
UART_G4_RingBufferParser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004380  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004598  08004598  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045a0  080045a0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080045b4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080045b4  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8be  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c9  00000000  00000000  000138fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000159c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f6  00000000  00000000  00016438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250b4  00000000  00000000  00016c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e213  00000000  00000000  0003bce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9439  00000000  00000000  00049ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013332e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000290c  00000000  00000000  00133374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00135c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004540 	.word	0x08004540

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004540 	.word	0x08004540

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a2a      	ldr	r2, [pc, #168]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b28      	ldr	r3, [pc, #160]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a24      	ldr	r2, [pc, #144]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b22      	ldr	r3, [pc, #136]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fe67 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000590:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <MX_GPIO_Init+0xc8>)
 80005a2:	f000 fcd7 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a6:	2320      	movs	r3, #32
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fcc8 	bl	8000f54 <HAL_GPIO_Init>

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000800 	.word	0x48000800

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fa7a 	bl	8000ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f843 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f7ff ff91 	bl	8000508 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005e6:	f000 f9a7 	bl	8000938 <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005ea:	f000 f888 	bl	80006fe <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // Start listening for IRQ on LPUART1
  //    Callback will be handled in the User Code 4
  HAL_UART_Receive_IT(&hlpuart1, &TmpReceived, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	4917      	ldr	r1, [pc, #92]	@ (8000650 <main+0x7c>)
 80005f2:	4818      	ldr	r0, [pc, #96]	@ (8000654 <main+0x80>)
 80005f4:	f001 ff08 	bl	8002408 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(receivedLines > 0)
 80005f8:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <main+0x84>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0fb      	beq.n	80005f8 <main+0x24>
	  {
		  i = 0; // Reset counter for next RX
 8000600:	4b16      	ldr	r3, [pc, #88]	@ (800065c <main+0x88>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
		  do
		  {
			  // Read 1 byte from Ring Buffer
			  RingBuffer_Read(&RingBuffer, &TmpRead);
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	4619      	mov	r1, r3
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <main+0x8c>)
 800060c:	f000 f8f3 	bl	80007f6 <RingBuffer_Read>

			  // Write to parse buffer
			  if(TmpRead == ENDLINE)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b0a      	cmp	r3, #10
 8000614:	d106      	bne.n	8000624 <main+0x50>
			  {
				  // Swap '\n' with 0
				  ReceivedData[i] = 0;
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <main+0x88>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <main+0x90>)
 800061e:	2100      	movs	r1, #0
 8000620:	5499      	strb	r1, [r3, r2]
 8000622:	e005      	b.n	8000630 <main+0x5c>
			  }
			  else
			  {
				  // Put value read from RingBuffer to parse buffer
				  ReceivedData[i] = TmpRead;
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <main+0x88>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	79f9      	ldrb	r1, [r7, #7]
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <main+0x90>)
 800062e:	5499      	strb	r1, [r3, r2]
			  }
			  i++;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <main+0x88>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <main+0x88>)
 800063a:	701a      	strb	r2, [r3, #0]
		  } while(TmpRead != ENDLINE); // Read from RingBuffer until '\n' sign
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b0a      	cmp	r3, #10
 8000640:	d1e1      	bne.n	8000606 <main+0x32>
		  receivedLines--;
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <main+0x84>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <main+0x84>)
 800064c:	701a      	strb	r2, [r3, #0]
	  if(receivedLines > 0)
 800064e:	e7d3      	b.n	80005f8 <main+0x24>
 8000650:	20000028 	.word	0x20000028
 8000654:	20000074 	.word	0x20000074
 8000658:	20000029 	.word	0x20000029
 800065c:	20000070 	.word	0x20000070
 8000660:	2000002c 	.word	0x2000002c
 8000664:	20000050 	.word	0x20000050

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2238      	movs	r2, #56	@ 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 ff36 	bl	80044e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fe20 	bl	80012d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2340      	movs	r3, #64	@ 0x40
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006aa:	2355      	movs	r3, #85	@ 0x55
 80006ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 feba 	bl	8001438 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ca:	f000 f85d 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2104      	movs	r1, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f9b8 	bl	8001a5c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006f2:	f000 f849 	bl	8000788 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2028      	movs	r0, #40	@ 0x28
 8000708:	f000 fb2f 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800070c:	2028      	movs	r0, #40	@ 0x28
 800070e:	f000 fb46 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	205b      	movs	r0, #91	@ 0x5b
 8000718:	f000 fb27 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800071c:	205b      	movs	r0, #91	@ 0x5b
 800071e:	f000 fb3e 	bl	8000d9e <HAL_NVIC_EnableIRQ>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	// Checking if Callback from lpuart1
	if(huart->Instance == LPUART1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <HAL_UART_RxCpltCallback+0x4c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d117      	bne.n	800076a <HAL_UART_RxCpltCallback+0x42>
	{
		// Try to write byte to the ring buffer
		if(RB_OK == RingBuffer_Write(&RingBuffer, TmpReceived))
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <HAL_UART_RxCpltCallback+0x50>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4619      	mov	r1, r3
 8000740:	480e      	ldr	r0, [pc, #56]	@ (800077c <HAL_UART_RxCpltCallback+0x54>)
 8000742:	f000 f827 	bl	8000794 <RingBuffer_Write>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	d109      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x38>
		{
//			Length = sprintf(Message, "Received: %c\r\n", TmpReceived);
//			HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)Message, Length);

			if(TmpReceived == ENDLINE)
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <HAL_UART_RxCpltCallback+0x50>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b0a      	cmp	r3, #10
 8000752:	d105      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x38>
			{
				receivedLines++;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <HAL_UART_RxCpltCallback+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <HAL_UART_RxCpltCallback+0x58>)
 800075e:	701a      	strb	r2, [r3, #0]
			}
		}

		// Re-enable lpuart1 to receive next byte from interrupt
		HAL_UART_Receive_IT(&hlpuart1, &TmpReceived, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	4905      	ldr	r1, [pc, #20]	@ (8000778 <HAL_UART_RxCpltCallback+0x50>)
 8000764:	4807      	ldr	r0, [pc, #28]	@ (8000784 <HAL_UART_RxCpltCallback+0x5c>)
 8000766:	f001 fe4f 	bl	8002408 <HAL_UART_Receive_IT>
	}
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40008000 	.word	0x40008000
 8000778:	20000028 	.word	0x20000028
 800077c:	2000002c 	.word	0x2000002c
 8000780:	20000029 	.word	0x20000029
 8000784:	20000074 	.word	0x20000074

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <RingBuffer_Write>:


// Functions
// Write
RB_Status RingBuffer_Write(RingBuffer_t *RingBuffer, uint8_t Value)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]

	// Check if RB has place to write
	if((RingBuffer->Head + 1) % RING_BUFFER_SIZE == RingBuffer->Tail)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	425a      	negs	r2, r3
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	f002 021f 	and.w	r2, r2, #31
 80007b0:	bf58      	it	pl
 80007b2:	4253      	negpl	r3, r2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	8852      	ldrh	r2, [r2, #2]
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d101      	bne.n	80007c0 <RingBuffer_Write+0x2c>
	{
		return RB_ERROR; // The buffer has no space to write
 80007bc:	2300      	movs	r3, #0
 80007be:	e014      	b.n	80007ea <RingBuffer_Write+0x56>
	}

	// Write value to ring buffer
	RingBuffer->Buffer[RingBuffer->Head] = Value;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	78fa      	ldrb	r2, [r7, #3]
 80007cc:	711a      	strb	r2, [r3, #4]

	// Shift RB head pointer
	RingBuffer->Head = (RingBuffer->Head + 1) % RING_BUFFER_SIZE;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	425a      	negs	r2, r3
 80007d6:	f003 031f 	and.w	r3, r3, #31
 80007da:	f002 021f 	and.w	r2, r2, #31
 80007de:	bf58      	it	pl
 80007e0:	4253      	negpl	r3, r2
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <RingBuffer_Read>:


// Read
RB_Status RingBuffer_Read(RingBuffer_t *RingBuffer, uint8_t *Value)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
	// Check if RB isn't empty
	if(RingBuffer->Tail == RingBuffer->Head)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	885a      	ldrh	r2, [r3, #2]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	d101      	bne.n	8000810 <RingBuffer_Read+0x1a>
	{
		return RB_ERROR; // The buffer is empty
 800080c:	2300      	movs	r3, #0
 800080e:	e015      	b.n	800083c <RingBuffer_Read+0x46>
	}

	// <- Read from buffer ->
	*Value = RingBuffer->Buffer[RingBuffer->Tail];
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	885b      	ldrh	r3, [r3, #2]
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	791a      	ldrb	r2, [r3, #4]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	701a      	strb	r2, [r3, #0]

	RingBuffer->Tail = (RingBuffer->Tail + 1) % RING_BUFFER_SIZE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	885b      	ldrh	r3, [r3, #2]
 8000824:	3301      	adds	r3, #1
 8000826:	425a      	negs	r2, r3
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	f002 021f 	and.w	r2, r2, #31
 8000830:	bf58      	it	pl
 8000832:	4253      	negpl	r3, r2
 8000834:	b29a      	uxth	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000852:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	@ 0x60
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	@ 0x58
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800087e:	f000 fdcb 	bl	8001418 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f947 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}

080008ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008f6:	f000 fcc7 	bl	8001288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <LPUART1_IRQHandler+0x10>)
 8000906:	f001 fdcb 	bl	80024a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000074 	.word	0x20000074

08000914 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 800093e:	4a23      	ldr	r2, [pc, #140]	@ (80009cc <MX_LPUART1_UART_Init+0x94>)
 8000940:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000942:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_MultiProcessor_Init(&hlpuart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	4812      	ldr	r0, [pc, #72]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000980:	f001 fcd6 	bl	8002330 <HAL_MultiProcessor_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800098a:	f7ff fefd 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 8000992:	f003 fcde 	bl	8004352 <HAL_UARTEx_SetTxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800099c:	f7ff fef4 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 80009a4:	f003 fd13 	bl	80043ce <HAL_UARTEx_SetRxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009ae:	f7ff feeb 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_LPUART1_UART_Init+0x90>)
 80009b4:	f003 fc94 	bl	80042e0 <HAL_UARTEx_DisableFifoMode>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009be:	f7ff fee3 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000074 	.word	0x20000074
 80009cc:	40008000 	.word	0x40008000

080009d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09e      	sub	sp, #120	@ 0x78
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2254      	movs	r2, #84	@ 0x54
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 fd79 	bl	80044e8 <memset>
  if(uartHandle->Instance==LPUART1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <HAL_UART_MspInit+0xa8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d136      	bne.n	8000a6e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a00:	2320      	movs	r3, #32
 8000a02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fa41 	bl	8001e94 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a18:	f7ff feb6 	bl	8000788 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a38:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <HAL_UART_MspInit+0xac>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f000 fa73 	bl	8000f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3778      	adds	r7, #120	@ 0x78
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40008000 	.word	0x40008000
 8000a7c:	40021000 	.word	0x40021000

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ff46 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f003 fd23 	bl	80044f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fd8f 	bl	80005d4 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   r0, =_estack
 8000ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	080045a8 	.word	0x080045a8
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	2000010c 	.word	0x2000010c

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>

08000ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f939 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f80e 	bl	8000b04 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af4:	f7ff fea8 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	79fb      	ldrb	r3, [r7, #7]

}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_InitTick+0x68>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d022      	beq.n	8000b5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_InitTick+0x6c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <HAL_InitTick+0x68>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f944 	bl	8000dba <HAL_SYSTICK_Config>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10f      	bne.n	8000b58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d809      	bhi.n	8000b52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	f04f 30ff 	mov.w	r0, #4294967295
 8000b46:	f000 f910 	bl	8000d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <HAL_InitTick+0x70>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e007      	b.n	8000b62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e004      	b.n	8000b62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a03      	ldr	r2, [pc, #12]	@ (8000b94 <HAL_IncTick+0x1c>)
 8000b88:	6013      	str	r3, [r2, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	20000108 	.word	0x20000108
 8000b98:	20000008 	.word	0x20000008

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000108 	.word	0x20000108

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	@ (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	@ (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	@ (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	@ 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff29 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff40 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff33 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa4 	bl	8000d10 <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d005      	beq.n	8000df6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2204      	movs	r2, #4
 8000dee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e037      	b.n	8000e66 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 020e 	bic.w	r2, r2, #14
 8000e04:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e14:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0201 	bic.w	r2, r2, #1
 8000e24:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f003 021f 	and.w	r2, r3, #31
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f202 	lsl.w	r2, r1, r2
 8000e38:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e42:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00c      	beq.n	8000e66 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e5a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e64:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d00d      	beq.n	8000eb8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e047      	b.n	8000f48 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 020e 	bic.w	r2, r2, #14
 8000ec6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00c      	beq.n	8000f28 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	4798      	blx	r3
    }
  }
  return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f62:	e15a      	b.n	800121a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 814c 	beq.w	8001214 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	f003 0201 	and.w	r2, r3, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d017      	beq.n	8001032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d123      	bne.n	8001086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0203 	and.w	r2, r3, #3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80a6 	beq.w	8001214 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001238 <HAL_GPIO_Init+0x2e4>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001238 <HAL_GPIO_Init+0x2e4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d4:	4b58      	ldr	r3, [pc, #352]	@ (8001238 <HAL_GPIO_Init+0x2e4>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e0:	4a56      	ldr	r2, [pc, #344]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800110a:	d01f      	beq.n	800114c <HAL_GPIO_Init+0x1f8>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a4c      	ldr	r2, [pc, #304]	@ (8001240 <HAL_GPIO_Init+0x2ec>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d019      	beq.n	8001148 <HAL_GPIO_Init+0x1f4>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a4b      	ldr	r2, [pc, #300]	@ (8001244 <HAL_GPIO_Init+0x2f0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d013      	beq.n	8001144 <HAL_GPIO_Init+0x1f0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a4a      	ldr	r2, [pc, #296]	@ (8001248 <HAL_GPIO_Init+0x2f4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d00d      	beq.n	8001140 <HAL_GPIO_Init+0x1ec>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a49      	ldr	r2, [pc, #292]	@ (800124c <HAL_GPIO_Init+0x2f8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d007      	beq.n	800113c <HAL_GPIO_Init+0x1e8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a48      	ldr	r2, [pc, #288]	@ (8001250 <HAL_GPIO_Init+0x2fc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_GPIO_Init+0x1e4>
 8001134:	2305      	movs	r3, #5
 8001136:	e00a      	b.n	800114e <HAL_GPIO_Init+0x1fa>
 8001138:	2306      	movs	r3, #6
 800113a:	e008      	b.n	800114e <HAL_GPIO_Init+0x1fa>
 800113c:	2304      	movs	r3, #4
 800113e:	e006      	b.n	800114e <HAL_GPIO_Init+0x1fa>
 8001140:	2303      	movs	r3, #3
 8001142:	e004      	b.n	800114e <HAL_GPIO_Init+0x1fa>
 8001144:	2302      	movs	r3, #2
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0x1fa>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_GPIO_Init+0x1fa>
 800114c:	2300      	movs	r3, #0
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	f002 0203 	and.w	r2, r2, #3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4093      	lsls	r3, r2
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115e:	4937      	ldr	r1, [pc, #220]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800116c:	4b39      	ldr	r3, [pc, #228]	@ (8001254 <HAL_GPIO_Init+0x300>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001190:	4a30      	ldr	r2, [pc, #192]	@ (8001254 <HAL_GPIO_Init+0x300>)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <HAL_GPIO_Init+0x300>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ba:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <HAL_GPIO_Init+0x300>)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011c0:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <HAL_GPIO_Init+0x300>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <HAL_GPIO_Init+0x300>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <HAL_GPIO_Init+0x300>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800120e:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <HAL_GPIO_Init+0x300>)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	f47f ae9d 	bne.w	8000f64 <HAL_GPIO_Init+0x10>
  }
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	371c      	adds	r7, #28
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000
 8001240:	48000400 	.word	0x48000400
 8001244:	48000800 	.word	0x48000800
 8001248:	48000c00 	.word	0x48000c00
 800124c:	48001000 	.word	0x48001000
 8001250:	48001400 	.word	0x48001400
 8001254:	40010400 	.word	0x40010400

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e002      	b.n	800127c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f806 	bl	80012b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40010400 	.word	0x40010400

080012b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d141      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012de:	4b4b      	ldr	r3, [pc, #300]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ea:	d131      	bne.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ec:	4b47      	ldr	r3, [pc, #284]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012f2:	4a46      	ldr	r2, [pc, #280]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	4b43      	ldr	r3, [pc, #268]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001304:	4a41      	ldr	r2, [pc, #260]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800130c:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2232      	movs	r2, #50	@ 0x32
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	4a3f      	ldr	r2, [pc, #252]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	0c9b      	lsrs	r3, r3, #18
 800131e:	3301      	adds	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001322:	e002      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3b01      	subs	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132a:	4b38      	ldr	r3, [pc, #224]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001336:	d102      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f2      	bne.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134a:	d158      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e057      	b.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001350:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	4a2d      	ldr	r2, [pc, #180]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800135c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001360:	e04d      	b.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001368:	d141      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800136a:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001376:	d131      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800137e:	4a23      	ldr	r2, [pc, #140]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001390:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2232      	movs	r2, #50	@ 0x32
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9b      	lsrs	r3, r3, #18
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ae:	e002      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c2:	d102      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f2      	bne.n	80013b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d6:	d112      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e011      	b.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e2:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013ec:	e007      	b.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40007000 	.word	0x40007000
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83

08001418 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001426:	6093      	str	r3, [r2, #8]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40007000 	.word	0x40007000

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e2fe      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d075      	beq.n	8001542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001456:	4b97      	ldr	r3, [pc, #604]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001460:	4b94      	ldr	r3, [pc, #592]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b0c      	cmp	r3, #12
 800146e:	d102      	bne.n	8001476 <HAL_RCC_OscConfig+0x3e>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d002      	beq.n	800147c <HAL_RCC_OscConfig+0x44>
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b08      	cmp	r3, #8
 800147a:	d10b      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b8d      	ldr	r3, [pc, #564]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d05b      	beq.n	8001540 <HAL_RCC_OscConfig+0x108>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d157      	bne.n	8001540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e2d9      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x74>
 800149e:	4b85      	ldr	r3, [pc, #532]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a84      	ldr	r2, [pc, #528]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b7f      	ldr	r3, [pc, #508]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7e      	ldr	r2, [pc, #504]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b7c      	ldr	r3, [pc, #496]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7b      	ldr	r2, [pc, #492]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014d0:	4b78      	ldr	r3, [pc, #480]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a77      	ldr	r2, [pc, #476]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b75      	ldr	r3, [pc, #468]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a74      	ldr	r2, [pc, #464]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb54 	bl	8000b9c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb50 	bl	8000b9c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e29e      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	4b6a      	ldr	r3, [pc, #424]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xc0>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb40 	bl	8000b9c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fb3c 	bl	8000b9c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e28a      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001532:	4b60      	ldr	r3, [pc, #384]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0xe8>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d075      	beq.n	800163a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154e:	4b59      	ldr	r3, [pc, #356]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001558:	4b56      	ldr	r3, [pc, #344]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	d102      	bne.n	800156e <HAL_RCC_OscConfig+0x136>
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d002      	beq.n	8001574 <HAL_RCC_OscConfig+0x13c>
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b04      	cmp	r3, #4
 8001572:	d11f      	bne.n	80015b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001574:	4b4f      	ldr	r3, [pc, #316]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_OscConfig+0x154>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e25d      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b49      	ldr	r3, [pc, #292]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	061b      	lsls	r3, r3, #24
 800159a:	4946      	ldr	r1, [pc, #280]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015a0:	4b45      	ldr	r3, [pc, #276]	@ (80016b8 <HAL_RCC_OscConfig+0x280>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff faad 	bl	8000b04 <HAL_InitTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d043      	beq.n	8001638 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e249      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d023      	beq.n	8001604 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b3d      	ldr	r3, [pc, #244]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a3c      	ldr	r2, [pc, #240]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fae8 	bl	8000b9c <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fae4 	bl	8000b9c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e232      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e2:	4b34      	ldr	r3, [pc, #208]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	492d      	ldr	r1, [pc, #180]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
 8001602:	e01a      	b.n	800163a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2a      	ldr	r2, [pc, #168]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800160a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800160e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fac4 	bl	8000b9c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fac0 	bl	8000b9c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e20e      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1e0>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d041      	beq.n	80016ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d01c      	beq.n	8001688 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff fa9d 	bl	8000b9c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fa99 	bl	8000b9c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1e7      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0ef      	beq.n	8001666 <HAL_RCC_OscConfig+0x22e>
 8001686:	e020      	b.n	80016ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168e:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fa80 	bl	8000b9c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169e:	e00d      	b.n	80016bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fa7c 	bl	8000b9c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d906      	bls.n	80016bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1ca      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	4b8c      	ldr	r3, [pc, #560]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ea      	bne.n	80016a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 80a6 	beq.w	8001824 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016dc:	4b84      	ldr	r3, [pc, #528]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x2b4>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x2b6>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00d      	beq.n	800170e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f6:	4a7e      	ldr	r2, [pc, #504]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016fe:	4b7c      	ldr	r3, [pc, #496]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800170a:	2301      	movs	r3, #1
 800170c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170e:	4b79      	ldr	r3, [pc, #484]	@ (80018f4 <HAL_RCC_OscConfig+0x4bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171a:	4b76      	ldr	r3, [pc, #472]	@ (80018f4 <HAL_RCC_OscConfig+0x4bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a75      	ldr	r2, [pc, #468]	@ (80018f4 <HAL_RCC_OscConfig+0x4bc>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff fa39 	bl	8000b9c <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172e:	f7ff fa35 	bl	8000b9c <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e183      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	4b6c      	ldr	r3, [pc, #432]	@ (80018f4 <HAL_RCC_OscConfig+0x4bc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_RCC_OscConfig+0x32e>
 8001754:	4b66      	ldr	r3, [pc, #408]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	4a65      	ldr	r2, [pc, #404]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001764:	e024      	b.n	80017b0 <HAL_RCC_OscConfig+0x378>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d110      	bne.n	8001790 <HAL_RCC_OscConfig+0x358>
 800176e:	4b60      	ldr	r3, [pc, #384]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001774:	4a5e      	ldr	r2, [pc, #376]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800177e:	4b5c      	ldr	r3, [pc, #368]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001784:	4a5a      	ldr	r2, [pc, #360]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178e:	e00f      	b.n	80017b0 <HAL_RCC_OscConfig+0x378>
 8001790:	4b57      	ldr	r3, [pc, #348]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001796:	4a56      	ldr	r2, [pc, #344]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a6:	4a52      	ldr	r2, [pc, #328]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d016      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff f9f0 	bl	8000b9c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff f9ec 	bl	8000b9c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e138      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d6:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ed      	beq.n	80017c0 <HAL_RCC_OscConfig+0x388>
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff f9d9 	bl	8000b9c <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff f9d5 	bl	8000b9c <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e121      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ed      	bne.n	80017ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001818:	4b35      	ldr	r3, [pc, #212]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	4a34      	ldr	r2, [pc, #208]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001822:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d03c      	beq.n	80018aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01c      	beq.n	8001872 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001838:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800183a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800183e:	4a2c      	ldr	r2, [pc, #176]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff f9a8 	bl	8000b9c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001850:	f7ff f9a4 	bl	8000b9c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0f2      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ef      	beq.n	8001850 <HAL_RCC_OscConfig+0x418>
 8001870:	e01b      	b.n	80018aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001872:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001874:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001878:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001882:	f7ff f98b 	bl	8000b9c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188a:	f7ff f987 	bl	8000b9c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0d5      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ef      	bne.n	800188a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80c9 	beq.w	8001a46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b4:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	f000 8083 	beq.w	80019c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d15e      	bne.n	8001988 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff f961 	bl	8000b9c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018dc:	e00c      	b.n	80018f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff f95d 	bl	8000b9c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d905      	bls.n	80018f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0ab      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ec      	bne.n	80018de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b52      	ldr	r3, [pc, #328]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4b52      	ldr	r3, [pc, #328]	@ (8001a54 <HAL_RCC_OscConfig+0x61c>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6a11      	ldr	r1, [r2, #32]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001914:	3a01      	subs	r2, #1
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800191e:	0212      	lsls	r2, r2, #8
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001926:	0852      	lsrs	r2, r2, #1
 8001928:	3a01      	subs	r2, #1
 800192a:	0552      	lsls	r2, r2, #21
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001932:	0852      	lsrs	r2, r2, #1
 8001934:	3a01      	subs	r2, #1
 8001936:	0652      	lsls	r2, r2, #25
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800193e:	06d2      	lsls	r2, r2, #27
 8001940:	430a      	orrs	r2, r1
 8001942:	4943      	ldr	r1, [pc, #268]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001944:	4313      	orrs	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001948:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a40      	ldr	r2, [pc, #256]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a3d      	ldr	r2, [pc, #244]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800195e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f91c 	bl	8000b9c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f918 	bl	8000b9c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e066      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x530>
 8001986:	e05e      	b.n	8001a46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a30      	ldr	r2, [pc, #192]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 800198e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f902 	bl	8000b9c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f8fe 	bl	8000b9c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e04c      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019ba:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4924      	ldr	r1, [pc, #144]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <HAL_RCC_OscConfig+0x620>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	60cb      	str	r3, [r1, #12]
 80019c6:	e03e      	b.n	8001a46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e039      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <HAL_RCC_OscConfig+0x618>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d12c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	3b01      	subs	r3, #1
 80019f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d123      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11b      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d113      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	019f800c 	.word	0x019f800c
 8001a58:	feeefffc 	.word	0xfeeefffc

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e11e      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b91      	ldr	r3, [pc, #580]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d910      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b8e      	ldr	r3, [pc, #568]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 020f 	bic.w	r2, r3, #15
 8001a8a:	498c      	ldr	r1, [pc, #560]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b8a      	ldr	r3, [pc, #552]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e106      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d073      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d129      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab8:	4b81      	ldr	r3, [pc, #516]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0f4      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ac8:	f000 f99e 	bl	8001e08 <RCC_GetSysClockFreqFromPLLSource>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc4 <HAL_RCC_ClockConfig+0x268>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d93f      	bls.n	8001b56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d033      	beq.n	8001b56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d12f      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001af6:	4b72      	ldr	r3, [pc, #456]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001afe:	4a70      	ldr	r2, [pc, #448]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e024      	b.n	8001b56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b14:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d109      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0c6      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b24:	4b66      	ldr	r3, [pc, #408]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0be      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b34:	f000 f8ce 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4a61      	ldr	r2, [pc, #388]	@ (8001cc4 <HAL_RCC_ClockConfig+0x268>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d909      	bls.n	8001b56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b42:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b4a:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4957      	ldr	r1, [pc, #348]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b68:	f7ff f818 	bl	8000b9c <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f814 	bl	8000b9c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e095      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d023      	beq.n	8001bec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb0:	4b43      	ldr	r3, [pc, #268]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a42      	ldr	r2, [pc, #264]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001bd0:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4936      	ldr	r1, [pc, #216]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b80      	cmp	r3, #128	@ 0x80
 8001bf0:	d105      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bf2:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	4a32      	ldr	r2, [pc, #200]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001bf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bfc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d21d      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 020f 	bic.w	r2, r3, #15
 8001c14:	4929      	ldr	r1, [pc, #164]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c1c:	f7fe ffbe 	bl	8000b9c <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c24:	f7fe ffba 	bl	8000b9c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e03b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_RCC_ClockConfig+0x260>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1ed      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4917      	ldr	r1, [pc, #92]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	490f      	ldr	r1, [pc, #60]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c86:	f000 f825 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <HAL_RCC_ClockConfig+0x264>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <HAL_RCC_ClockConfig+0x26c>)
 8001c98:	5ccb      	ldrb	r3, [r1, r3]
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <HAL_RCC_ClockConfig+0x270>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_RCC_ClockConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ff2a 	bl	8000b04 <HAL_InitTick>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	04c4b400 	.word	0x04c4b400
 8001cc8:	08004558 	.word	0x08004558
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e047      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cec:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf8:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	e03e      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d136      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d28:	4a1a      	ldr	r2, [pc, #104]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	4a16      	ldr	r2, [pc, #88]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d32:	68d2      	ldr	r2, [r2, #12]
 8001d34:	0a12      	lsrs	r2, r2, #8
 8001d36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
      break;
 8001d40:	e00c      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4a10      	ldr	r2, [pc, #64]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	0a12      	lsrs	r2, r2, #8
 8001d50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
      break;
 8001d5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0e5b      	lsrs	r3, r3, #25
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	e001      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d7c:	693b      	ldr	r3, [r7, #16]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	00f42400 	.word	0x00f42400
 8001d94:	016e3600 	.word	0x016e3600

08001d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4904      	ldr	r1, [pc, #16]	@ (8001dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08004568 	.word	0x08004568

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de0:	f7ff ffda 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0adb      	lsrs	r3, r3, #11
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4904      	ldr	r1, [pc, #16]	@ (8001e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08004568 	.word	0x08004568

08001e08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3301      	adds	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d10c      	bne.n	8001e46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e2c:	4a17      	ldr	r2, [pc, #92]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e36:	68d2      	ldr	r2, [r2, #12]
 8001e38:	0a12      	lsrs	r2, r2, #8
 8001e3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
    break;
 8001e44:	e00c      	b.n	8001e60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	0a12      	lsrs	r2, r2, #8
 8001e54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    break;
 8001e5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0e5b      	lsrs	r3, r3, #25
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	016e3600 	.word	0x016e3600
 8001e90:	00f42400 	.word	0x00f42400

08001e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8098 	beq.w	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b43      	ldr	r3, [pc, #268]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b40      	ldr	r3, [pc, #256]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ece:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ede:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a39      	ldr	r2, [pc, #228]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eea:	f7fe fe57 	bl	8000b9c <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef0:	e009      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7fe fe53 	bl	8000b9c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d902      	bls.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	74fb      	strb	r3, [r7, #19]
        break;
 8001f04:	e005      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f06:	4b30      	ldr	r3, [pc, #192]	@ (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0ef      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f12:	7cfb      	ldrb	r3, [r7, #19]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d159      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f18:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01e      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d019      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f56:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f60:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d016      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fe13 	bl	8000b9c <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f78:	e00b      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fe0f 	bl	8000b9c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d902      	bls.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f90:	e006      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ec      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10b      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa6:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb4:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	74bb      	strb	r3, [r7, #18]
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd0:	7c7b      	ldrb	r3, [r7, #17]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4ba7      	ldr	r3, [pc, #668]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	4aa6      	ldr	r2, [pc, #664]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fee:	4ba1      	ldr	r3, [pc, #644]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff4:	f023 0203 	bic.w	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	499d      	ldr	r1, [pc, #628]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002010:	4b98      	ldr	r3, [pc, #608]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	f023 020c 	bic.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4995      	ldr	r1, [pc, #596]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002032:	4b90      	ldr	r3, [pc, #576]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002038:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	498c      	ldr	r1, [pc, #560]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002054:	4b87      	ldr	r3, [pc, #540]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	4984      	ldr	r1, [pc, #528]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002076:	4b7f      	ldr	r3, [pc, #508]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	497b      	ldr	r1, [pc, #492]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002098:	4b76      	ldr	r3, [pc, #472]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	4973      	ldr	r1, [pc, #460]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	496a      	ldr	r1, [pc, #424]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020dc:	4b65      	ldr	r3, [pc, #404]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4962      	ldr	r1, [pc, #392]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	4959      	ldr	r1, [pc, #356]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002120:	4b54      	ldr	r3, [pc, #336]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002122:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	4951      	ldr	r1, [pc, #324]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002142:	4b4c      	ldr	r3, [pc, #304]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002148:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	4948      	ldr	r1, [pc, #288]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002164:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4940      	ldr	r1, [pc, #256]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002182:	d105      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002184:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a3a      	ldr	r2, [pc, #232]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800218e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800219c:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021aa:	4932      	ldr	r1, [pc, #200]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e2:	4924      	ldr	r1, [pc, #144]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f2:	d105      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d015      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221a:	4916      	ldr	r1, [pc, #88]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800222a:	d105      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800222c:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002236:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d019      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	4908      	ldr	r1, [pc, #32]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002262:	d109      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a02      	ldr	r2, [pc, #8]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800226e:	60d3      	str	r3, [r2, #12]
 8002270:	e002      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002284:	4b29      	ldr	r3, [pc, #164]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	4926      	ldr	r1, [pc, #152]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022a2:	d105      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022a4:	4b21      	ldr	r3, [pc, #132]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a20      	ldr	r2, [pc, #128]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	4918      	ldr	r1, [pc, #96]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022da:	d105      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a12      	ldr	r2, [pc, #72]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	490a      	ldr	r1, [pc, #40]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002312:	d105      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800231a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002320:	7cbb      	ldrb	r3, [r7, #18]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	460b      	mov	r3, r1
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e05b      	b.n	8002400 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7fe fb38 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2224      	movs	r2, #36	@ 0x24
 8002364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_MultiProcessor_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 feeb 	bl	800315c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fbec 	bl	8002b64 <UART_SetConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_MultiProcessor_Init+0x66>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e034      	b.n	8002400 <HAL_MultiProcessor_Init+0xd0>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023b4:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023bc:	d10a      	bne.n	80023d4 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	061a      	lsls	r2, r3, #24
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 ff51 	bl	80032a0 <UART_CheckIdleState>
 80023fe:	4603      	mov	r3, r0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	4613      	mov	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800241c:	2b20      	cmp	r3, #32
 800241e:	d137      	bne.n	8002490 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_UART_Receive_IT+0x24>
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e030      	b.n	8002492 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a18      	ldr	r2, [pc, #96]	@ (800249c <HAL_UART_Receive_IT+0x94>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d01f      	beq.n	8002480 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d018      	beq.n	8002480 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	e853 3f00 	ldrex	r3, [r3]
 800245a:	613b      	str	r3, [r7, #16]
   return(result);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	69f9      	ldr	r1, [r7, #28]
 8002472:	6a3a      	ldr	r2, [r7, #32]
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	61bb      	str	r3, [r7, #24]
   return(result);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e6      	bne.n	800244e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	461a      	mov	r2, r3
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f001 f822 	bl	80034d0 <UART_Start_Receive_IT>
 800248c:	4603      	mov	r3, r0
 800248e:	e000      	b.n	8002492 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3728      	adds	r7, #40	@ 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40008000 	.word	0x40008000

080024a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b0ba      	sub	sp, #232	@ 0xe8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80024ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80024ce:	4013      	ands	r3, r2
 80024d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80024d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d11b      	bne.n	8002514 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80024e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8300 	beq.w	8002b0a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
      }
      return;
 8002512:	e2fa      	b.n	8002b0a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8123 	beq.w	8002764 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800251e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002522:	4b8d      	ldr	r3, [pc, #564]	@ (8002758 <HAL_UART_IRQHandler+0x2b8>)
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800252a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800252e:	4b8b      	ldr	r3, [pc, #556]	@ (800275c <HAL_UART_IRQHandler+0x2bc>)
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8116 	beq.w	8002764 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d011      	beq.n	8002568 <HAL_UART_IRQHandler+0xc8>
 8002544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2201      	movs	r2, #1
 8002556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d011      	beq.n	8002598 <HAL_UART_IRQHandler+0xf8>
 8002574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00b      	beq.n	8002598 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2202      	movs	r2, #2
 8002586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	f043 0204 	orr.w	r2, r3, #4
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d011      	beq.n	80025c8 <HAL_UART_IRQHandler+0x128>
 80025a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2204      	movs	r2, #4
 80025b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d017      	beq.n	8002604 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80025e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80025e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_UART_IRQHandler+0x2b8>)
 80025e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2208      	movs	r2, #8
 80025f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	f043 0208 	orr.w	r2, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800260c:	2b00      	cmp	r3, #0
 800260e:	d012      	beq.n	8002636 <HAL_UART_IRQHandler+0x196>
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002614:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8266 	beq.w	8002b0e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d013      	beq.n	8002676 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800264e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800265a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268a:	2b40      	cmp	r3, #64	@ 0x40
 800268c:	d005      	beq.n	800269a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800268e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002692:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d054      	beq.n	8002744 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f001 f83a 	bl	8003714 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	d146      	bne.n	800273c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3308      	adds	r3, #8
 80026b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026bc:	e853 3f00 	ldrex	r3, [r3]
 80026c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3308      	adds	r3, #8
 80026d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1d9      	bne.n	80026ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d017      	beq.n	8002734 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800270a:	4a15      	ldr	r2, [pc, #84]	@ (8002760 <HAL_UART_IRQHandler+0x2c0>)
 800270c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fbb5 	bl	8000e84 <HAL_DMA_Abort_IT>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d019      	beq.n	8002754 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800272e:	4610      	mov	r0, r2
 8002730:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002732:	e00f      	b.n	8002754 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f9ff 	bl	8002b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273a:	e00b      	b.n	8002754 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f9fb 	bl	8002b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002742:	e007      	b.n	8002754 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f9f7 	bl	8002b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002752:	e1dc      	b.n	8002b0e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002754:	bf00      	nop
    return;
 8002756:	e1da      	b.n	8002b0e <HAL_UART_IRQHandler+0x66e>
 8002758:	10000001 	.word	0x10000001
 800275c:	04000120 	.word	0x04000120
 8002760:	080037e1 	.word	0x080037e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8170 	bne.w	8002a4e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800276e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8169 	beq.w	8002a4e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800277c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8162 	beq.w	8002a4e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279c:	2b40      	cmp	r3, #64	@ 0x40
 800279e:	f040 80d8 	bne.w	8002952 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80af 	beq.w	8002918 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80027c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f080 80a7 	bcs.w	8002918 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8087 	bne.w	80028f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002812:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002816:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800281e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002822:	e841 2300 	strex	r3, r2, [r1]
 8002826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800282a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1da      	bne.n	80027e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3308      	adds	r3, #8
 8002838:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800283c:	e853 3f00 	ldrex	r3, [r3]
 8002840:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3308      	adds	r3, #8
 8002852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002856:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800285a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800285e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e1      	bne.n	8002832 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3308      	adds	r3, #8
 8002874:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800287e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3308      	adds	r3, #8
 800288e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002892:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002894:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002898:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e3      	bne.n	800286e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028c4:	f023 0310 	bic.w	r3, r3, #16
 80028c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e4      	bne.n	80028b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fa6e 	bl	8000dd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002908:	b29b      	uxth	r3, r3
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	b29b      	uxth	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f91b 	bl	8002b4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002916:	e0fc      	b.n	8002b12 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800291e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002922:	429a      	cmp	r2, r3
 8002924:	f040 80f5 	bne.w	8002b12 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b20      	cmp	r3, #32
 8002938:	f040 80eb 	bne.w	8002b12 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8fe 	bl	8002b4c <HAL_UARTEx_RxEventCallback>
      return;
 8002950:	e0df      	b.n	8002b12 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800295e:	b29b      	uxth	r3, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80d1 	beq.w	8002b16 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80cc 	beq.w	8002b16 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800298c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029a8:	e841 2300 	strex	r3, r2, [r1]
 80029ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e4      	bne.n	800297e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3308      	adds	r3, #8
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	623b      	str	r3, [r7, #32]
   return(result);
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3308      	adds	r3, #8
 80029d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e1      	bne.n	80029b4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f023 0310 	bic.w	r3, r3, #16
 8002a18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	617b      	str	r3, [r7, #20]
   return(result);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e4      	bne.n	8002a04 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f880 	bl	8002b4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a4c:	e063      	b.n	8002b16 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <HAL_UART_IRQHandler+0x5d8>
 8002a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 fc17 	bl	80042a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a76:	e051      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d014      	beq.n	8002aae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d03a      	beq.n	8002b1a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
    }
    return;
 8002aac:	e035      	b.n	8002b1a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_UART_IRQHandler+0x62e>
 8002aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fea0 	bl	800380c <UART_EndTransmit_IT>
    return;
 8002acc:	e026      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_UART_IRQHandler+0x64e>
 8002ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ade:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f001 fbf0 	bl	80042cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002aec:	e016      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_UART_IRQHandler+0x67c>
 8002afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da0c      	bge.n	8002b1c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f001 fbd8 	bl	80042b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b08:	e008      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
      return;
 8002b0a:	bf00      	nop
 8002b0c:	e006      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
    return;
 8002b0e:	bf00      	nop
 8002b10:	e004      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
      return;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
      return;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <HAL_UART_IRQHandler+0x67c>
    return;
 8002b1a:	bf00      	nop
  }
}
 8002b1c:	37e8      	adds	r7, #232	@ 0xe8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop

08002b24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b08c      	sub	sp, #48	@ 0x30
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4baa      	ldr	r3, [pc, #680]	@ (8002e3c <UART_SetConfig+0x2d8>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a9f      	ldr	r2, [pc, #636]	@ (8002e40 <UART_SetConfig+0x2dc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002bda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	f023 010f 	bic.w	r1, r3, #15
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a90      	ldr	r2, [pc, #576]	@ (8002e44 <UART_SetConfig+0x2e0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d125      	bne.n	8002c54 <UART_SetConfig+0xf0>
 8002c08:	4b8f      	ldr	r3, [pc, #572]	@ (8002e48 <UART_SetConfig+0x2e4>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d81a      	bhi.n	8002c4c <UART_SetConfig+0xe8>
 8002c16:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <UART_SetConfig+0xb8>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c3d 	.word	0x08002c3d
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c45 	.word	0x08002c45
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c32:	e116      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3a:	e112      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c42:	e10e      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002c44:	2308      	movs	r3, #8
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c4a:	e10a      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c52:	e106      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a7c      	ldr	r2, [pc, #496]	@ (8002e4c <UART_SetConfig+0x2e8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d138      	bne.n	8002cd0 <UART_SetConfig+0x16c>
 8002c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e48 <UART_SetConfig+0x2e4>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d82d      	bhi.n	8002cc8 <UART_SetConfig+0x164>
 8002c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <UART_SetConfig+0x110>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002ca9 	.word	0x08002ca9
 8002c78:	08002cc9 	.word	0x08002cc9
 8002c7c:	08002cc9 	.word	0x08002cc9
 8002c80:	08002cc9 	.word	0x08002cc9
 8002c84:	08002cb9 	.word	0x08002cb9
 8002c88:	08002cc9 	.word	0x08002cc9
 8002c8c:	08002cc9 	.word	0x08002cc9
 8002c90:	08002cc9 	.word	0x08002cc9
 8002c94:	08002cb1 	.word	0x08002cb1
 8002c98:	08002cc9 	.word	0x08002cc9
 8002c9c:	08002cc9 	.word	0x08002cc9
 8002ca0:	08002cc9 	.word	0x08002cc9
 8002ca4:	08002cc1 	.word	0x08002cc1
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cae:	e0d8      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb6:	e0d4      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cbe:	e0d0      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cc6:	e0cc      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002cc8:	2310      	movs	r3, #16
 8002cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cce:	e0c8      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002e50 <UART_SetConfig+0x2ec>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d125      	bne.n	8002d26 <UART_SetConfig+0x1c2>
 8002cda:	4b5b      	ldr	r3, [pc, #364]	@ (8002e48 <UART_SetConfig+0x2e4>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ce4:	2b30      	cmp	r3, #48	@ 0x30
 8002ce6:	d016      	beq.n	8002d16 <UART_SetConfig+0x1b2>
 8002ce8:	2b30      	cmp	r3, #48	@ 0x30
 8002cea:	d818      	bhi.n	8002d1e <UART_SetConfig+0x1ba>
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d00a      	beq.n	8002d06 <UART_SetConfig+0x1a2>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d814      	bhi.n	8002d1e <UART_SetConfig+0x1ba>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <UART_SetConfig+0x19a>
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d008      	beq.n	8002d0e <UART_SetConfig+0x1aa>
 8002cfc:	e00f      	b.n	8002d1e <UART_SetConfig+0x1ba>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d04:	e0ad      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d06:	2302      	movs	r3, #2
 8002d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d0c:	e0a9      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d0e:	2304      	movs	r3, #4
 8002d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d14:	e0a5      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d16:	2308      	movs	r3, #8
 8002d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d1c:	e0a1      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d1e:	2310      	movs	r3, #16
 8002d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d24:	e09d      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e54 <UART_SetConfig+0x2f0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d125      	bne.n	8002d7c <UART_SetConfig+0x218>
 8002d30:	4b45      	ldr	r3, [pc, #276]	@ (8002e48 <UART_SetConfig+0x2e4>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d3c:	d016      	beq.n	8002d6c <UART_SetConfig+0x208>
 8002d3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d40:	d818      	bhi.n	8002d74 <UART_SetConfig+0x210>
 8002d42:	2b80      	cmp	r3, #128	@ 0x80
 8002d44:	d00a      	beq.n	8002d5c <UART_SetConfig+0x1f8>
 8002d46:	2b80      	cmp	r3, #128	@ 0x80
 8002d48:	d814      	bhi.n	8002d74 <UART_SetConfig+0x210>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <UART_SetConfig+0x1f0>
 8002d4e:	2b40      	cmp	r3, #64	@ 0x40
 8002d50:	d008      	beq.n	8002d64 <UART_SetConfig+0x200>
 8002d52:	e00f      	b.n	8002d74 <UART_SetConfig+0x210>
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e082      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d62:	e07e      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d64:	2304      	movs	r3, #4
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6a:	e07a      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d72:	e076      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d74:	2310      	movs	r3, #16
 8002d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d7a:	e072      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a35      	ldr	r2, [pc, #212]	@ (8002e58 <UART_SetConfig+0x2f4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12a      	bne.n	8002ddc <UART_SetConfig+0x278>
 8002d86:	4b30      	ldr	r3, [pc, #192]	@ (8002e48 <UART_SetConfig+0x2e4>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d94:	d01a      	beq.n	8002dcc <UART_SetConfig+0x268>
 8002d96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d9a:	d81b      	bhi.n	8002dd4 <UART_SetConfig+0x270>
 8002d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da0:	d00c      	beq.n	8002dbc <UART_SetConfig+0x258>
 8002da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da6:	d815      	bhi.n	8002dd4 <UART_SetConfig+0x270>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <UART_SetConfig+0x250>
 8002dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db0:	d008      	beq.n	8002dc4 <UART_SetConfig+0x260>
 8002db2:	e00f      	b.n	8002dd4 <UART_SetConfig+0x270>
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dba:	e052      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc2:	e04e      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dca:	e04a      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002dcc:	2308      	movs	r3, #8
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dd2:	e046      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dda:	e042      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a17      	ldr	r2, [pc, #92]	@ (8002e40 <UART_SetConfig+0x2dc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d13a      	bne.n	8002e5c <UART_SetConfig+0x2f8>
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <UART_SetConfig+0x2e4>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002df0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002df4:	d01a      	beq.n	8002e2c <UART_SetConfig+0x2c8>
 8002df6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dfa:	d81b      	bhi.n	8002e34 <UART_SetConfig+0x2d0>
 8002dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e00:	d00c      	beq.n	8002e1c <UART_SetConfig+0x2b8>
 8002e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e06:	d815      	bhi.n	8002e34 <UART_SetConfig+0x2d0>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <UART_SetConfig+0x2b0>
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e10:	d008      	beq.n	8002e24 <UART_SetConfig+0x2c0>
 8002e12:	e00f      	b.n	8002e34 <UART_SetConfig+0x2d0>
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1a:	e022      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e22:	e01e      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002e24:	2304      	movs	r3, #4
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2a:	e01a      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e32:	e016      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002e34:	2310      	movs	r3, #16
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e3a:	e012      	b.n	8002e62 <UART_SetConfig+0x2fe>
 8002e3c:	cfff69f3 	.word	0xcfff69f3
 8002e40:	40008000 	.word	0x40008000
 8002e44:	40013800 	.word	0x40013800
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40004400 	.word	0x40004400
 8002e50:	40004800 	.word	0x40004800
 8002e54:	40004c00 	.word	0x40004c00
 8002e58:	40005000 	.word	0x40005000
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4aae      	ldr	r2, [pc, #696]	@ (8003120 <UART_SetConfig+0x5bc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f040 8097 	bne.w	8002f9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d823      	bhi.n	8002ebe <UART_SetConfig+0x35a>
 8002e76:	a201      	add	r2, pc, #4	@ (adr r2, 8002e7c <UART_SetConfig+0x318>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ebf 	.word	0x08002ebf
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002ebf 	.word	0x08002ebf
 8002e8c:	08002eaf 	.word	0x08002eaf
 8002e90:	08002ebf 	.word	0x08002ebf
 8002e94:	08002ebf 	.word	0x08002ebf
 8002e98:	08002ebf 	.word	0x08002ebf
 8002e9c:	08002eb7 	.word	0x08002eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7fe ff86 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ea6:	e010      	b.n	8002eca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ea8:	4b9e      	ldr	r3, [pc, #632]	@ (8003124 <UART_SetConfig+0x5c0>)
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002eac:	e00d      	b.n	8002eca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eae:	f7fe ff11 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8002eb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002eb4:	e009      	b.n	8002eca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ebc:	e005      	b.n	8002eca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ec8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 8130 	beq.w	8003132 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	4a94      	ldr	r2, [pc, #592]	@ (8003128 <UART_SetConfig+0x5c4>)
 8002ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d305      	bcc.n	8002f02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d903      	bls.n	8002f0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f08:	e113      	b.n	8003132 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	60fa      	str	r2, [r7, #12]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	4a84      	ldr	r2, [pc, #528]	@ (8003128 <UART_SetConfig+0x5c4>)
 8002f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2200      	movs	r2, #0
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f2c:	f7fd f974 	bl	8000218 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	020b      	lsls	r3, r1, #8
 8002f42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f46:	0202      	lsls	r2, r0, #8
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	6849      	ldr	r1, [r1, #4]
 8002f4c:	0849      	lsrs	r1, r1, #1
 8002f4e:	2000      	movs	r0, #0
 8002f50:	460c      	mov	r4, r1
 8002f52:	4605      	mov	r5, r0
 8002f54:	eb12 0804 	adds.w	r8, r2, r4
 8002f58:	eb43 0905 	adc.w	r9, r3, r5
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	469a      	mov	sl, r3
 8002f64:	4693      	mov	fp, r2
 8002f66:	4652      	mov	r2, sl
 8002f68:	465b      	mov	r3, fp
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	f7fd f953 	bl	8000218 <__aeabi_uldivmod>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4613      	mov	r3, r2
 8002f78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f80:	d308      	bcc.n	8002f94 <UART_SetConfig+0x430>
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f88:	d204      	bcs.n	8002f94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a3a      	ldr	r2, [r7, #32]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e0ce      	b.n	8003132 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f9a:	e0ca      	b.n	8003132 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa4:	d166      	bne.n	8003074 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d827      	bhi.n	8002ffe <UART_SetConfig+0x49a>
 8002fae:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <UART_SetConfig+0x450>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002fe1 	.word	0x08002fe1
 8002fbc:	08002fe9 	.word	0x08002fe9
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fef 	.word	0x08002fef
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08002fff 	.word	0x08002fff
 8002fd4:	08002ff7 	.word	0x08002ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7fe feea 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8002fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fde:	e014      	b.n	800300a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fe0:	f7fe fefc 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fe6:	e010      	b.n	800300a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8003124 <UART_SetConfig+0x5c0>)
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fec:	e00d      	b.n	800300a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fee:	f7fe fe71 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8002ff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ff4:	e009      	b.n	800300a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ffc:	e005      	b.n	800300a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8090 	beq.w	8003132 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	4a44      	ldr	r2, [pc, #272]	@ (8003128 <UART_SetConfig+0x5c4>)
 8003018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800301c:	461a      	mov	r2, r3
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	fbb3 f3f2 	udiv	r3, r3, r2
 8003024:	005a      	lsls	r2, r3, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	441a      	add	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	d916      	bls.n	800306c <UART_SetConfig+0x508>
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d212      	bcs.n	800306c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f023 030f 	bic.w	r3, r3, #15
 800304e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	b29a      	uxth	r2, r3
 800305c:	8bfb      	ldrh	r3, [r7, #30]
 800305e:	4313      	orrs	r3, r2
 8003060:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	8bfa      	ldrh	r2, [r7, #30]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	e062      	b.n	8003132 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003072:	e05e      	b.n	8003132 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003074:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003078:	2b08      	cmp	r3, #8
 800307a:	d828      	bhi.n	80030ce <UART_SetConfig+0x56a>
 800307c:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <UART_SetConfig+0x520>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	080030a9 	.word	0x080030a9
 8003088:	080030b1 	.word	0x080030b1
 800308c:	080030b9 	.word	0x080030b9
 8003090:	080030cf 	.word	0x080030cf
 8003094:	080030bf 	.word	0x080030bf
 8003098:	080030cf 	.word	0x080030cf
 800309c:	080030cf 	.word	0x080030cf
 80030a0:	080030cf 	.word	0x080030cf
 80030a4:	080030c7 	.word	0x080030c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a8:	f7fe fe82 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 80030ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030ae:	e014      	b.n	80030da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b0:	f7fe fe94 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 80030b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030b6:	e010      	b.n	80030da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <UART_SetConfig+0x5c0>)
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030bc:	e00d      	b.n	80030da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030be:	f7fe fe09 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 80030c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030c4:	e009      	b.n	80030da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030cc:	e005      	b.n	80030da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030d8:	bf00      	nop
    }

    if (pclk != 0U)
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d028      	beq.n	8003132 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	4a10      	ldr	r2, [pc, #64]	@ (8003128 <UART_SetConfig+0x5c4>)
 80030e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	441a      	add	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	d910      	bls.n	800312c <UART_SetConfig+0x5c8>
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003110:	d20c      	bcs.n	800312c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	b29a      	uxth	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	e009      	b.n	8003132 <UART_SetConfig+0x5ce>
 800311e:	bf00      	nop
 8003120:	40008000 	.word	0x40008000
 8003124:	00f42400 	.word	0x00f42400
 8003128:	08004570 	.word	0x08004570
      }
      else
      {
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2201      	movs	r2, #1
 8003136:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2201      	movs	r2, #1
 800313e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800314e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003152:	4618      	mov	r0, r3
 8003154:	3730      	adds	r7, #48	@ 0x30
 8003156:	46bd      	mov	sp, r7
 8003158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800315c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01a      	beq.n	8003272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325a:	d10a      	bne.n	8003272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
  }
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b098      	sub	sp, #96	@ 0x60
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b0:	f7fd fc74 	bl	8000b9c <HAL_GetTick>
 80032b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d12f      	bne.n	8003324 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	2200      	movs	r2, #0
 80032ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f88e 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d022      	beq.n	8003324 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e6:	e853 3f00 	ldrex	r3, [r3]
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003304:	e841 2300 	strex	r3, r2, [r1]
 8003308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800330a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e6      	bne.n	80032de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e063      	b.n	80033ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d149      	bne.n	80033c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003332:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333a:	2200      	movs	r2, #0
 800333c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f857 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03c      	beq.n	80033c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	623b      	str	r3, [r7, #32]
   return(result);
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003360:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800336a:	633b      	str	r3, [r7, #48]	@ 0x30
 800336c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e6      	bne.n	800334c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	60fb      	str	r3, [r7, #12]
   return(result);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3308      	adds	r3, #8
 800339c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800339e:	61fa      	str	r2, [r7, #28]
 80033a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	69b9      	ldr	r1, [r7, #24]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	617b      	str	r3, [r7, #20]
   return(result);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e012      	b.n	80033ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3758      	adds	r7, #88	@ 0x58
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	e04f      	b.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d04b      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fd fbc5 	bl	8000b9c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <UART_WaitOnFlagUntilTimeout+0x30>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e04e      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d037      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b80      	cmp	r3, #128	@ 0x80
 800343a:	d034      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b40      	cmp	r3, #64	@ 0x40
 8003440:	d031      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d110      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2208      	movs	r2, #8
 8003456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f95b 	bl	8003714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2208      	movs	r2, #8
 8003462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e029      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800347c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003480:	d111      	bne.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800348a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f941 	bl	8003714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e00f      	b.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4013      	ands	r3, r2
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d0a0      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b0a3      	sub	sp, #140	@ 0x8c
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003502:	d10e      	bne.n	8003522 <UART_Start_Receive_IT+0x52>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <UART_Start_Receive_IT+0x48>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003512:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003516:	e02d      	b.n	8003574 <UART_Start_Receive_IT+0xa4>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	22ff      	movs	r2, #255	@ 0xff
 800351c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003520:	e028      	b.n	8003574 <UART_Start_Receive_IT+0xa4>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10d      	bne.n	8003546 <UART_Start_Receive_IT+0x76>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <UART_Start_Receive_IT+0x6c>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	22ff      	movs	r2, #255	@ 0xff
 8003536:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800353a:	e01b      	b.n	8003574 <UART_Start_Receive_IT+0xa4>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	227f      	movs	r2, #127	@ 0x7f
 8003540:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003544:	e016      	b.n	8003574 <UART_Start_Receive_IT+0xa4>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800354e:	d10d      	bne.n	800356c <UART_Start_Receive_IT+0x9c>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <UART_Start_Receive_IT+0x92>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	227f      	movs	r2, #127	@ 0x7f
 800355c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003560:	e008      	b.n	8003574 <UART_Start_Receive_IT+0xa4>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	223f      	movs	r2, #63	@ 0x3f
 8003566:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800356a:	e003      	b.n	8003574 <UART_Start_Receive_IT+0xa4>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2222      	movs	r2, #34	@ 0x22
 8003580:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3308      	adds	r3, #8
 80035a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80035a8:	673a      	str	r2, [r7, #112]	@ 0x70
 80035aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80035ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80035b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e3      	bne.n	8003584 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035c4:	d14f      	bne.n	8003666 <UART_Start_Receive_IT+0x196>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d349      	bcc.n	8003666 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035da:	d107      	bne.n	80035ec <UART_Start_Receive_IT+0x11c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a47      	ldr	r2, [pc, #284]	@ (8003704 <UART_Start_Receive_IT+0x234>)
 80035e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80035ea:	e002      	b.n	80035f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a46      	ldr	r2, [pc, #280]	@ (8003708 <UART_Start_Receive_IT+0x238>)
 80035f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800360a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800361c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800361e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003622:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e4      	bne.n	80035fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3308      	adds	r3, #8
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003646:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003650:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003652:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_Start_Receive_IT+0x160>
 8003664:	e046      	b.n	80036f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366e:	d107      	bne.n	8003680 <UART_Start_Receive_IT+0x1b0>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a24      	ldr	r2, [pc, #144]	@ (800370c <UART_Start_Receive_IT+0x23c>)
 800367c:	675a      	str	r2, [r3, #116]	@ 0x74
 800367e:	e002      	b.n	8003686 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4a23      	ldr	r2, [pc, #140]	@ (8003710 <UART_Start_Receive_IT+0x240>)
 8003684:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d019      	beq.n	80036c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80036a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e6      	bne.n	800368e <UART_Start_Receive_IT+0x1be>
 80036c0:	e018      	b.n	80036f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	613b      	str	r3, [r7, #16]
   return(result);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e0:	623b      	str	r3, [r7, #32]
 80036e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	69f9      	ldr	r1, [r7, #28]
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e6      	bne.n	80036c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	378c      	adds	r7, #140	@ 0x8c
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	08003f39 	.word	0x08003f39
 8003708:	08003bd5 	.word	0x08003bd5
 800370c:	08003a1d 	.word	0x08003a1d
 8003710:	08003865 	.word	0x08003865

08003714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b095      	sub	sp, #84	@ 0x54
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800373a:	643b      	str	r3, [r7, #64]	@ 0x40
 800373c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003740:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e6      	bne.n	800371c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3308      	adds	r3, #8
 8003754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	61fb      	str	r3, [r7, #28]
   return(result);
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e3      	bne.n	800374e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d118      	bne.n	80037c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	60bb      	str	r3, [r7, #8]
   return(result);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f023 0310 	bic.w	r3, r3, #16
 80037a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6979      	ldr	r1, [r7, #20]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e6      	bne.n	800378e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80037d4:	bf00      	nop
 80037d6:	3754      	adds	r7, #84	@ 0x54
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7ff f99a 	bl	8002b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	60bb      	str	r3, [r7, #8]
   return(result);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	613b      	str	r3, [r7, #16]
   return(result);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e6      	bne.n	8003814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff f965 	bl	8002b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800385a:	bf00      	nop
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b09c      	sub	sp, #112	@ 0x70
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003872:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800387c:	2b22      	cmp	r3, #34	@ 0x22
 800387e:	f040 80be 	bne.w	80039fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800388c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003890:	b2d9      	uxtb	r1, r3
 8003892:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003896:	b2da      	uxtb	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389c:	400a      	ands	r2, r1
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 80a1 	bne.w	8003a0e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800390e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	667b      	str	r3, [r7, #100]	@ 0x64
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800391e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003920:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800392c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a33      	ldr	r2, [pc, #204]	@ (8003a18 <UART_RxISR_8BIT+0x1b4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01f      	beq.n	8003990 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	623b      	str	r3, [r7, #32]
   return(result);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003972:	663b      	str	r3, [r7, #96]	@ 0x60
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800397c:	633b      	str	r3, [r7, #48]	@ 0x30
 800397e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e6      	bne.n	800395e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d12e      	bne.n	80039f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0310 	bic.w	r3, r3, #16
 80039b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e6      	bne.n	800399e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d103      	bne.n	80039e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2210      	movs	r2, #16
 80039e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff f8ac 	bl	8002b4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039f4:	e00b      	b.n	8003a0e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fc fe96 	bl	8000728 <HAL_UART_RxCpltCallback>
}
 80039fc:	e007      	b.n	8003a0e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0208 	orr.w	r2, r2, #8
 8003a0c:	619a      	str	r2, [r3, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	3770      	adds	r7, #112	@ 0x70
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40008000 	.word	0x40008000

08003a1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b09c      	sub	sp, #112	@ 0x70
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a34:	2b22      	cmp	r3, #34	@ 0x22
 8003a36:	f040 80be 	bne.w	8003bb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003a4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a52:	4013      	ands	r3, r2
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	1c9a      	adds	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 80a1 	bne.w	8003bc6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aa4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003aa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e6      	bne.n	8003a84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a33      	ldr	r2, [pc, #204]	@ (8003bd0 <UART_RxISR_16BIT+0x1b4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d01f      	beq.n	8003b48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d12e      	bne.n	8003bae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f023 0310 	bic.w	r3, r3, #16
 8003b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	6979      	ldr	r1, [r7, #20]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	613b      	str	r3, [r7, #16]
   return(result);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e6      	bne.n	8003b56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d103      	bne.n	8003b9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe ffd0 	bl	8002b4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bac:	e00b      	b.n	8003bc6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fc fdba 	bl	8000728 <HAL_UART_RxCpltCallback>
}
 8003bb4:	e007      	b.n	8003bc6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0208 	orr.w	r2, r2, #8
 8003bc4:	619a      	str	r2, [r3, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	3770      	adds	r7, #112	@ 0x70
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40008000 	.word	0x40008000

08003bd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0ac      	sub	sp, #176	@ 0xb0
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003be2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c0a:	2b22      	cmp	r3, #34	@ 0x22
 8003c0c:	f040 8183 	bne.w	8003f16 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003c16:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003c1a:	e126      	b.n	8003e6a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c26:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003c2a:	b2d9      	uxtb	r1, r3
 8003c2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c36:	400a      	ands	r2, r1
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d053      	beq.n	8003d16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <UART_RxISR_8BIT_FIFOEN+0xca>
 8003c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d011      	beq.n	8003cce <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc4:	f043 0204 	orr.w	r2, r3, #4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2204      	movs	r2, #4
 8003cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	f043 0202 	orr.w	r2, r3, #2
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d006      	beq.n	8003d16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fe ff15 	bl	8002b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 80a3 	bne.w	8003e6a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8003d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d48:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003d4c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8003d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e4      	bne.n	8003d24 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3308      	adds	r3, #8
 8003d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d82:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003d84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003d88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003d90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e1      	bne.n	8003d5a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a60      	ldr	r2, [pc, #384]	@ (8003f30 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d021      	beq.n	8003df8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01a      	beq.n	8003df8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003de4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003de6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003dea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e4      	bne.n	8003dc2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d130      	bne.n	8003e62 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	f023 0310 	bic.w	r3, r3, #16
 8003e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e4      	bne.n	8003e06 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d103      	bne.n	8003e52 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fe76 	bl	8002b4c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8003e60:	e00e      	b.n	8003e80 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc fc60 	bl	8000728 <HAL_UART_RxCpltCallback>
        break;
 8003e68:	e00a      	b.n	8003e80 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e6a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d006      	beq.n	8003e80 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8003e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f47f aece 	bne.w	8003c1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e86:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003e8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d049      	beq.n	8003f26 <UART_RxISR_8BIT_FIFOEN+0x352>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003e98:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d242      	bcs.n	8003f26 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e3      	bne.n	8003ea0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a16      	ldr	r2, [pc, #88]	@ (8003f34 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8003edc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f043 0320 	orr.w	r3, r3, #32
 8003ef2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e4      	bne.n	8003ede <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f14:	e007      	b.n	8003f26 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699a      	ldr	r2, [r3, #24]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0208 	orr.w	r2, r2, #8
 8003f24:	619a      	str	r2, [r3, #24]
}
 8003f26:	bf00      	nop
 8003f28:	37b0      	adds	r7, #176	@ 0xb0
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40008000 	.word	0x40008000
 8003f34:	08003865 	.word	0x08003865

08003f38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0ae      	sub	sp, #184	@ 0xb8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003f46:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6e:	2b22      	cmp	r3, #34	@ 0x22
 8003f70:	f040 8187 	bne.w	8004282 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003f7a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f7e:	e12a      	b.n	80041d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8003f92:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8003f96:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa8:	1c9a      	adds	r2, r3, #2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d053      	beq.n	800407e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d011      	beq.n	8004006 <UART_RxISR_16BIT_FIFOEN+0xce>
 8003fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004006:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004012:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2202      	movs	r2, #2
 8004024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d011      	beq.n	8004066 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2204      	movs	r2, #4
 8004054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	f043 0202 	orr.w	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fe fd61 	bl	8002b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 80a5 	bne.w	80041d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800409a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800409c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e2      	bne.n	800408c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3308      	adds	r3, #8
 80040cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80040ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e1      	bne.n	80040c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a60      	ldr	r2, [pc, #384]	@ (800429c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d021      	beq.n	8004164 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01a      	beq.n	8004164 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800413c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004152:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800415e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e4      	bne.n	800412e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d130      	bne.n	80041ce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004194:	647b      	str	r3, [r7, #68]	@ 0x44
 8004196:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800419a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e4      	bne.n	8004172 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d103      	bne.n	80041be <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2210      	movs	r2, #16
 80041bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041c4:	4619      	mov	r1, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fcc0 	bl	8002b4c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80041cc:	e00e      	b.n	80041ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc faaa 	bl	8000728 <HAL_UART_RxCpltCallback>
        break;
 80041d4:	e00a      	b.n	80041ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041d6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80041de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f47f aeca 	bne.w	8003f80 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d049      	beq.n	8004292 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004204:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004208:	429a      	cmp	r2, r3
 800420a:	d242      	bcs.n	8004292 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3308      	adds	r3, #8
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	623b      	str	r3, [r7, #32]
   return(result);
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004222:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3308      	adds	r3, #8
 800422c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004230:	633a      	str	r2, [r7, #48]	@ 0x30
 8004232:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004248:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	60fb      	str	r3, [r7, #12]
   return(result);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	69b9      	ldr	r1, [r7, #24]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	617b      	str	r3, [r7, #20]
   return(result);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e4      	bne.n	800424a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004280:	e007      	b.n	8004292 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0208 	orr.w	r2, r2, #8
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	37b8      	adds	r7, #184	@ 0xb8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40008000 	.word	0x40008000
 80042a0:	08003a1d 	.word	0x08003a1d

080042a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e027      	b.n	8004346 <HAL_UARTEx_DisableFifoMode+0x66>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2224      	movs	r2, #36	@ 0x24
 8004302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004324:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004366:	2302      	movs	r3, #2
 8004368:	e02d      	b.n	80043c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2224      	movs	r2, #36	@ 0x24
 8004376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f850 	bl	800444c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e02d      	b.n	8004442 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2224      	movs	r2, #36	@ 0x24
 80043f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f812 	bl	800444c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004458:	2b00      	cmp	r3, #0
 800445a:	d108      	bne.n	800446e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800446c:	e031      	b.n	80044d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800446e:	2308      	movs	r3, #8
 8004470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004472:	2308      	movs	r3, #8
 8004474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	0e5b      	lsrs	r3, r3, #25
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	0f5b      	lsrs	r3, r3, #29
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004496:	7bbb      	ldrb	r3, [r7, #14]
 8004498:	7b3a      	ldrb	r2, [r7, #12]
 800449a:	4911      	ldr	r1, [pc, #68]	@ (80044e0 <UARTEx_SetNbDataToProcess+0x94>)
 800449c:	5c8a      	ldrb	r2, [r1, r2]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044a2:	7b3a      	ldrb	r2, [r7, #12]
 80044a4:	490f      	ldr	r1, [pc, #60]	@ (80044e4 <UARTEx_SetNbDataToProcess+0x98>)
 80044a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	7b7a      	ldrb	r2, [r7, #13]
 80044b8:	4909      	ldr	r1, [pc, #36]	@ (80044e0 <UARTEx_SetNbDataToProcess+0x94>)
 80044ba:	5c8a      	ldrb	r2, [r1, r2]
 80044bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044c0:	7b7a      	ldrb	r2, [r7, #13]
 80044c2:	4908      	ldr	r1, [pc, #32]	@ (80044e4 <UARTEx_SetNbDataToProcess+0x98>)
 80044c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	08004588 	.word	0x08004588
 80044e4:	08004590 	.word	0x08004590

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <__libc_init_array>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004530 <__libc_init_array+0x38>)
 80044fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004534 <__libc_init_array+0x3c>)
 80044fe:	1b64      	subs	r4, r4, r5
 8004500:	10a4      	asrs	r4, r4, #2
 8004502:	2600      	movs	r6, #0
 8004504:	42a6      	cmp	r6, r4
 8004506:	d109      	bne.n	800451c <__libc_init_array+0x24>
 8004508:	4d0b      	ldr	r5, [pc, #44]	@ (8004538 <__libc_init_array+0x40>)
 800450a:	4c0c      	ldr	r4, [pc, #48]	@ (800453c <__libc_init_array+0x44>)
 800450c:	f000 f818 	bl	8004540 <_init>
 8004510:	1b64      	subs	r4, r4, r5
 8004512:	10a4      	asrs	r4, r4, #2
 8004514:	2600      	movs	r6, #0
 8004516:	42a6      	cmp	r6, r4
 8004518:	d105      	bne.n	8004526 <__libc_init_array+0x2e>
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004520:	4798      	blx	r3
 8004522:	3601      	adds	r6, #1
 8004524:	e7ee      	b.n	8004504 <__libc_init_array+0xc>
 8004526:	f855 3b04 	ldr.w	r3, [r5], #4
 800452a:	4798      	blx	r3
 800452c:	3601      	adds	r6, #1
 800452e:	e7f2      	b.n	8004516 <__libc_init_array+0x1e>
 8004530:	080045a0 	.word	0x080045a0
 8004534:	080045a0 	.word	0x080045a0
 8004538:	080045a0 	.word	0x080045a0
 800453c:	080045a4 	.word	0x080045a4

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
