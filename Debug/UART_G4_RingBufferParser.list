
UART_G4_RingBufferParser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800546c  0800546c  0000646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005500  08005500  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005500  08005500  00006500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005508  08005508  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005508  08005508  00006508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005510  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  0800556c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  0800556c  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db92  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002185  00000000  00000000  00014c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00016da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000809  00000000  00000000  00017838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025455  00000000  00000000  00018041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7ea  00000000  00000000  0003d496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e999d  00000000  00000000  0004bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013561d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e98  00000000  00000000  00135660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001384f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005454 	.word	0x08005454

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005454 	.word	0x08005454

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000694 <MX_GPIO_Init+0xc4>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000694 <MX_GPIO_Init+0xc4>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a24      	ldr	r2, [pc, #144]	@ (8000694 <MX_GPIO_Init+0xc4>)
 8000604:	f043 0320 	orr.w	r3, r3, #32
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0320 	and.w	r3, r3, #32
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4a1e      	ldr	r2, [pc, #120]	@ (8000694 <MX_GPIO_Init+0xc4>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000622:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a18      	ldr	r2, [pc, #96]	@ (8000694 <MX_GPIO_Init+0xc4>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2120      	movs	r1, #32
 800064a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064e:	f000 fee3 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000658:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800065c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <MX_GPIO_Init+0xc8>)
 800066a:	f000 fd53 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800066e:	2320      	movs	r3, #32
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f000 fd44 	bl	8001114 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	@ 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	48000800 	.word	0x48000800

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 faf6 	bl	8000c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f889 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff ff91 	bl	80005d0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006ae:	f000 fa23 	bl	8000af8 <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80006b2:	f000 f8ce 	bl	8000852 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // Start listening for IRQ on LPUART1
  //    Callback will be handled in the User Code 4
  HAL_UART_Receive_IT(&hlpuart1, &TmpReceived, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	4934      	ldr	r1, [pc, #208]	@ (800078c <main+0xf0>)
 80006ba:	4835      	ldr	r0, [pc, #212]	@ (8000790 <main+0xf4>)
 80006bc:	f002 f818 	bl	80026f0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(receivedLines > 0)
 80006c0:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <main+0xf8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0fb      	beq.n	80006c0 <main+0x24>
	  {
		  i = 0; // Reset counter for next UART RX
 80006c8:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <main+0xfc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		  do
		  {
			  // Read 1 byte from Ring Buffer
			  RingBuffer_Read(&RingBuffer, &TmpRead);
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4832      	ldr	r0, [pc, #200]	@ (800079c <main+0x100>)
 80006d4:	f000 f939 	bl	800094a <RingBuffer_Read>

			  // Write to parse buffer
			  if(TmpRead == ENDLINE)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b0a      	cmp	r3, #10
 80006dc:	d106      	bne.n	80006ec <main+0x50>
			  {
				  // Swap '\n' with 0
				  ReceivedData[i] = 0;
 80006de:	4b2e      	ldr	r3, [pc, #184]	@ (8000798 <main+0xfc>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b2e      	ldr	r3, [pc, #184]	@ (80007a0 <main+0x104>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	5499      	strb	r1, [r3, r2]
 80006ea:	e005      	b.n	80006f8 <main+0x5c>
			  }
			  else
			  {
				  // Put value read from RingBuffer to parse buffer
				  ReceivedData[i] = TmpRead;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <main+0xfc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	79f9      	ldrb	r1, [r7, #7]
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <main+0x104>)
 80006f6:	5499      	strb	r1, [r3, r2]
			  }
			  i++;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <main+0xfc>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <main+0xfc>)
 8000702:	701a      	strb	r2, [r3, #0]
		  } while(TmpRead != ENDLINE); // Read from RingBuffer until '\n' sign
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b0a      	cmp	r3, #10
 8000708:	d1e1      	bne.n	80006ce <main+0x32>
		  receivedLines--;
 800070a:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <main+0xf8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <main+0xf8>)
 8000714:	701a      	strb	r2, [r3, #0]


		  // <- parse add here ->
		  if(strcmp("LED_ON", (char*)ReceivedData) == 0)
 8000716:	4922      	ldr	r1, [pc, #136]	@ (80007a0 <main+0x104>)
 8000718:	4822      	ldr	r0, [pc, #136]	@ (80007a4 <main+0x108>)
 800071a:	f7ff fd81 	bl	8000220 <strcmp>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d115      	bne.n	8000750 <main+0xb4>
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2120      	movs	r1, #32
 8000728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072c:	f000 fe74 	bl	8001418 <HAL_GPIO_WritePin>
			  Length = sprintf(Message, "Led On");
 8000730:	491d      	ldr	r1, [pc, #116]	@ (80007a8 <main+0x10c>)
 8000732:	481e      	ldr	r0, [pc, #120]	@ (80007ac <main+0x110>)
 8000734:	f004 f9ee 	bl	8004b14 <siprintf>
 8000738:	4603      	mov	r3, r0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <main+0x114>)
 800073e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)Message, Length);
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <main+0x114>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4919      	ldr	r1, [pc, #100]	@ (80007ac <main+0x110>)
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <main+0xf4>)
 800074a:	f001 ff3d 	bl	80025c8 <HAL_UART_Transmit_IT>
 800074e:	e7b7      	b.n	80006c0 <main+0x24>
		  }
		  else if(strcmp("LED_OFF", (char*)ReceivedData) == 0)
 8000750:	4913      	ldr	r1, [pc, #76]	@ (80007a0 <main+0x104>)
 8000752:	4818      	ldr	r0, [pc, #96]	@ (80007b4 <main+0x118>)
 8000754:	f7ff fd64 	bl	8000220 <strcmp>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1b0      	bne.n	80006c0 <main+0x24>
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2120      	movs	r1, #32
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f000 fe57 	bl	8001418 <HAL_GPIO_WritePin>
			  Length = sprintf(Message, "Led Off");
 800076a:	4913      	ldr	r1, [pc, #76]	@ (80007b8 <main+0x11c>)
 800076c:	480f      	ldr	r0, [pc, #60]	@ (80007ac <main+0x110>)
 800076e:	f004 f9d1 	bl	8004b14 <siprintf>
 8000772:	4603      	mov	r3, r0
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <main+0x114>)
 8000778:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)Message, Length);
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <main+0x114>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	490a      	ldr	r1, [pc, #40]	@ (80007ac <main+0x110>)
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <main+0xf4>)
 8000784:	f001 ff20 	bl	80025c8 <HAL_UART_Transmit_IT>
	  if(receivedLines > 0)
 8000788:	e79a      	b.n	80006c0 <main+0x24>
 800078a:	bf00      	nop
 800078c:	20000078 	.word	0x20000078
 8000790:	200000e8 	.word	0x200000e8
 8000794:	2000007a 	.word	0x2000007a
 8000798:	20000079 	.word	0x20000079
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	200000a0 	.word	0x200000a0
 80007a4:	0800546c 	.word	0x0800546c
 80007a8:	08005474 	.word	0x08005474
 80007ac:	200000c0 	.word	0x200000c0
 80007b0:	200000e0 	.word	0x200000e0
 80007b4:	0800547c 	.word	0x0800547c
 80007b8:	08005484 	.word	0x08005484

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	@ 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2238      	movs	r2, #56	@ 0x38
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 f9c2 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 fe56 	bl	8001490 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ee:	2340      	movs	r3, #64	@ 0x40
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f6:	2302      	movs	r3, #2
 80007f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007fe:	2355      	movs	r3, #85	@ 0x55
 8000800:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fef0 	bl	80015f8 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800081e:	f000 f85d 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2303      	movs	r3, #3
 8000828:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2104      	movs	r1, #4
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f9ee 	bl	8001c1c <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000846:	f000 f849 	bl	80008dc <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	@ 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2028      	movs	r0, #40	@ 0x28
 800085c:	f000 fb65 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000860:	2028      	movs	r0, #40	@ 0x28
 8000862:	f000 fb7c 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	205b      	movs	r0, #91	@ 0x5b
 800086c:	f000 fb5d 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000870:	205b      	movs	r0, #91	@ 0x5b
 8000872:	f000 fb74 	bl	8000f5e <HAL_NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	// Checking if Callback from lpuart1
	if(huart->Instance == LPUART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <HAL_UART_RxCpltCallback+0x4c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d117      	bne.n	80008be <HAL_UART_RxCpltCallback+0x42>
	{
		// Try to write byte to the ring buffer
		if(RB_OK == RingBuffer_Write(&RingBuffer, TmpReceived))
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <HAL_UART_RxCpltCallback+0x50>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <HAL_UART_RxCpltCallback+0x54>)
 8000896:	f000 f827 	bl	80008e8 <RingBuffer_Write>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d109      	bne.n	80008b4 <HAL_UART_RxCpltCallback+0x38>
		{
			if(TmpReceived == ENDLINE)
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <HAL_UART_RxCpltCallback+0x50>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b0a      	cmp	r3, #10
 80008a6:	d105      	bne.n	80008b4 <HAL_UART_RxCpltCallback+0x38>
			{
				receivedLines++;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_UART_RxCpltCallback+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_UART_RxCpltCallback+0x58>)
 80008b2:	701a      	strb	r2, [r3, #0]
			}
		}

		// Re-enable lpuart1 to receive next byte from interrupt
		HAL_UART_Receive_IT(&hlpuart1, &TmpReceived, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	4905      	ldr	r1, [pc, #20]	@ (80008cc <HAL_UART_RxCpltCallback+0x50>)
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <HAL_UART_RxCpltCallback+0x5c>)
 80008ba:	f001 ff19 	bl	80026f0 <HAL_UART_Receive_IT>
	}
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40008000 	.word	0x40008000
 80008cc:	20000078 	.word	0x20000078
 80008d0:	2000007c 	.word	0x2000007c
 80008d4:	2000007a 	.word	0x2000007a
 80008d8:	200000e8 	.word	0x200000e8

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <RingBuffer_Write>:


// Functions
// Write
RB_Status RingBuffer_Write(RingBuffer_t *RingBuffer, uint8_t Value)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]

	// Check if RB has place to write
	if((RingBuffer->Head + 1) % RING_BUFFER_SIZE == RingBuffer->Tail)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	425a      	negs	r2, r3
 80008fc:	f003 031f 	and.w	r3, r3, #31
 8000900:	f002 021f 	and.w	r2, r2, #31
 8000904:	bf58      	it	pl
 8000906:	4253      	negpl	r3, r2
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	8852      	ldrh	r2, [r2, #2]
 800090c:	4293      	cmp	r3, r2
 800090e:	d101      	bne.n	8000914 <RingBuffer_Write+0x2c>
	{
		return RB_ERROR; // The buffer has no space to write
 8000910:	2300      	movs	r3, #0
 8000912:	e014      	b.n	800093e <RingBuffer_Write+0x56>
	}

	// Write value to ring buffer
	RingBuffer->Buffer[RingBuffer->Head] = Value;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	78fa      	ldrb	r2, [r7, #3]
 8000920:	711a      	strb	r2, [r3, #4]

	// Shift RB head pointer
	RingBuffer->Head = (RingBuffer->Head + 1) % RING_BUFFER_SIZE;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	425a      	negs	r2, r3
 800092a:	f003 031f 	and.w	r3, r3, #31
 800092e:	f002 021f 	and.w	r2, r2, #31
 8000932:	bf58      	it	pl
 8000934:	4253      	negpl	r3, r2
 8000936:	b29a      	uxth	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 800093c:	2301      	movs	r3, #1
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <RingBuffer_Read>:


// Read
RB_Status RingBuffer_Read(RingBuffer_t *RingBuffer, uint8_t *Value)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
	// Check if RB isn't empty
	if(RingBuffer->Tail == RingBuffer->Head)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	885a      	ldrh	r2, [r3, #2]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d101      	bne.n	8000964 <RingBuffer_Read+0x1a>
	{
		return RB_ERROR; // The buffer is empty
 8000960:	2300      	movs	r3, #0
 8000962:	e015      	b.n	8000990 <RingBuffer_Read+0x46>
	}

	// <- Read from buffer ->
	*Value = RingBuffer->Buffer[RingBuffer->Tail];
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	885b      	ldrh	r3, [r3, #2]
 8000968:	461a      	mov	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	791a      	ldrb	r2, [r3, #4]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	701a      	strb	r2, [r3, #0]

	RingBuffer->Tail = (RingBuffer->Tail + 1) % RING_BUFFER_SIZE;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	885b      	ldrh	r3, [r3, #2]
 8000978:	3301      	adds	r3, #1
 800097a:	425a      	negs	r2, r3
 800097c:	f003 031f 	and.w	r3, r3, #31
 8000980:	f002 021f 	and.w	r2, r2, #31
 8000984:	bf58      	it	pl
 8000986:	4253      	negpl	r3, r2
 8000988:	b29a      	uxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x44>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a6:	4a0e      	ldr	r2, [pc, #56]	@ (80009e0 <HAL_MspInit+0x44>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_MspInit+0x44>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_MspInit+0x44>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009d2:	f000 fe01 	bl	80015d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3a:	f000 f97d 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a46:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a4a:	f000 fcfd 	bl	8001448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <LPUART1_IRQHandler+0x10>)
 8000a5a:	f001 fe95 	bl	8002788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000e8 	.word	0x200000e8

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d207      	bcs.n	8000aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a98:	f004 f864 	bl	8004b64 <__errno>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	e009      	b.n	8000abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <_sbrk+0x64>)
 8000ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20020000 	.word	0x20020000
 8000ac8:	00000400 	.word	0x00000400
 8000acc:	200000e4 	.word	0x200000e4
 8000ad0:	200002c8 	.word	0x200002c8

08000ad4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000afc:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000afe:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <MX_LPUART1_UART_Init+0x94>)
 8000b00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_MultiProcessor_Init(&hlpuart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b40:	f001 fcd6 	bl	80024f0 <HAL_MultiProcessor_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b4a:	f7ff fec7 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b52:	f003 ff14 	bl	800497e <HAL_UARTEx_SetTxFifoThreshold>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000b5c:	f7ff febe 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b64:	f003 ff49 	bl	80049fa <HAL_UARTEx_SetRxFifoThreshold>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000b6e:	f7ff feb5 	bl	80008dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_LPUART1_UART_Init+0x90>)
 8000b74:	f003 feca 	bl	800490c <HAL_UARTEx_DisableFifoMode>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b7e:	f7ff fead 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000e8 	.word	0x200000e8
 8000b8c:	40008000 	.word	0x40008000

08000b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09e      	sub	sp, #120	@ 0x78
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2254      	movs	r2, #84	@ 0x54
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 ffcf 	bl	8004b54 <memset>
  if(uartHandle->Instance==LPUART1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <HAL_UART_MspInit+0xa8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d136      	bne.n	8000c2e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fa41 	bl	8002054 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd8:	f7ff fe80 	bl	80008dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_UART_MspInit+0xac>)
 8000bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000be0:	4a16      	ldr	r2, [pc, #88]	@ (8000c3c <HAL_UART_MspInit+0xac>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_UART_MspInit+0xac>)
 8000bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <HAL_UART_MspInit+0xac>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf8:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <HAL_UART_MspInit+0xac>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_UART_MspInit+0xac>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2a:	f000 fa73 	bl	8001114 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3778      	adds	r7, #120	@ 0x78
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40008000 	.word	0x40008000
 8000c3c:	40021000 	.word	0x40021000

08000c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f7ff ff46 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f003 ff7f 	bl	8004b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c72:	f7ff fd13 	bl	800069c <main>

08000c76 <LoopForever>:

LoopForever:
    b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   r0, =_estack
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c84:	08005510 	.word	0x08005510
  ldr r2, =_sbss
 8000c88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c8c:	200002c8 	.word	0x200002c8

08000c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_2_IRQHandler>

08000c92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f939 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f80e 	bl	8000cc4 <HAL_InitTick>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e001      	b.n	8000cb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb4:	f7ff fe72 	bl	800099c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <HAL_InitTick+0x68>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d022      	beq.n	8000d1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_InitTick+0x6c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <HAL_InitTick+0x68>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f944 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10f      	bne.n	8000d18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d809      	bhi.n	8000d12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	f04f 30ff 	mov.w	r0, #4294967295
 8000d06:	f000 f910 	bl	8000f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_InitTick+0x70>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	e007      	b.n	8000d22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e004      	b.n	8000d22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e001      	b.n	8000d22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <HAL_IncTick+0x1c>)
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	2000017c 	.word	0x2000017c
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000017c 	.word	0x2000017c

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	@ (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff40 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff33 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa4 	bl	8000ed0 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d005      	beq.n	8000fb6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2204      	movs	r2, #4
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e037      	b.n	8001026 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 020e 	bic.w	r2, r2, #14
 8000fc4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fd4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f003 021f 	and.w	r2, r3, #31
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001002:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00c      	beq.n	8001026 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800101a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001024:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d00d      	beq.n	8001078 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2204      	movs	r2, #4
 8001060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e047      	b.n	8001108 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 020e 	bic.w	r2, r2, #14
 8001086:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	2101      	movs	r1, #1
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00c      	beq.n	80010e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80010e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4798      	blx	r3
    }
  }
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001122:	e15a      	b.n	80013da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 814c 	beq.w	80013d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	f003 0201 	and.w	r2, r3, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d017      	beq.n	80011f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d123      	bne.n	8001246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	6939      	ldr	r1, [r7, #16]
 8001242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80a6 	beq.w	80013d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	4b5b      	ldr	r3, [pc, #364]	@ (80013f8 <HAL_GPIO_Init+0x2e4>)
 800128a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128c:	4a5a      	ldr	r2, [pc, #360]	@ (80013f8 <HAL_GPIO_Init+0x2e4>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6613      	str	r3, [r2, #96]	@ 0x60
 8001294:	4b58      	ldr	r3, [pc, #352]	@ (80013f8 <HAL_GPIO_Init+0x2e4>)
 8001296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a0:	4a56      	ldr	r2, [pc, #344]	@ (80013fc <HAL_GPIO_Init+0x2e8>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ca:	d01f      	beq.n	800130c <HAL_GPIO_Init+0x1f8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001400 <HAL_GPIO_Init+0x2ec>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d019      	beq.n	8001308 <HAL_GPIO_Init+0x1f4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001404 <HAL_GPIO_Init+0x2f0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d013      	beq.n	8001304 <HAL_GPIO_Init+0x1f0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4a      	ldr	r2, [pc, #296]	@ (8001408 <HAL_GPIO_Init+0x2f4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00d      	beq.n	8001300 <HAL_GPIO_Init+0x1ec>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a49      	ldr	r2, [pc, #292]	@ (800140c <HAL_GPIO_Init+0x2f8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d007      	beq.n	80012fc <HAL_GPIO_Init+0x1e8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a48      	ldr	r2, [pc, #288]	@ (8001410 <HAL_GPIO_Init+0x2fc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_GPIO_Init+0x1e4>
 80012f4:	2305      	movs	r3, #5
 80012f6:	e00a      	b.n	800130e <HAL_GPIO_Init+0x1fa>
 80012f8:	2306      	movs	r3, #6
 80012fa:	e008      	b.n	800130e <HAL_GPIO_Init+0x1fa>
 80012fc:	2304      	movs	r3, #4
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x1fa>
 8001300:	2303      	movs	r3, #3
 8001302:	e004      	b.n	800130e <HAL_GPIO_Init+0x1fa>
 8001304:	2302      	movs	r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x1fa>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_GPIO_Init+0x1fa>
 800130c:	2300      	movs	r3, #0
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	f002 0203 	and.w	r2, r2, #3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4093      	lsls	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131e:	4937      	ldr	r1, [pc, #220]	@ (80013fc <HAL_GPIO_Init+0x2e8>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132c:	4b39      	ldr	r3, [pc, #228]	@ (8001414 <HAL_GPIO_Init+0x300>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001350:	4a30      	ldr	r2, [pc, #192]	@ (8001414 <HAL_GPIO_Init+0x300>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001356:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <HAL_GPIO_Init+0x300>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137a:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <HAL_GPIO_Init+0x300>)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_GPIO_Init+0x300>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001414 <HAL_GPIO_Init+0x300>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_GPIO_Init+0x300>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ce:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_GPIO_Init+0x300>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3301      	adds	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f ae9d 	bne.w	8001124 <HAL_GPIO_Init+0x10>
  }
}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	48001000 	.word	0x48001000
 8001410:	48001400 	.word	0x48001400
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001434:	e002      	b.n	800143c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f806 	bl	8001478 <HAL_GPIO_EXTI_Callback>
  }
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d141      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800149e:	4b4b      	ldr	r3, [pc, #300]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014aa:	d131      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014ac:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014b2:	4a46      	ldr	r2, [pc, #280]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014bc:	4b43      	ldr	r3, [pc, #268]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014c4:	4a41      	ldr	r2, [pc, #260]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014cc:	4b40      	ldr	r3, [pc, #256]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2232      	movs	r2, #50	@ 0x32
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4a3f      	ldr	r2, [pc, #252]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e2:	e002      	b.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ea:	4b38      	ldr	r3, [pc, #224]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f6:	d102      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f2      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014fe:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d158      	bne.n	80015be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e057      	b.n	80015c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001510:	4b2e      	ldr	r3, [pc, #184]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001516:	4a2d      	ldr	r2, [pc, #180]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800151c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001520:	e04d      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001528:	d141      	bne.n	80015ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800152a:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001536:	d131      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800153e:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001544:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001550:	4a1e      	ldr	r2, [pc, #120]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001556:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001558:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2232      	movs	r2, #50	@ 0x32
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	3301      	adds	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156e:	e002      	b.n	8001576 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3b01      	subs	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001582:	d102      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f2      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001596:	d112      	bne.n	80015be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e011      	b.n	80015c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015ac:	e007      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40007000 	.word	0x40007000
 80015d0:	20000000 	.word	0x20000000
 80015d4:	431bde83 	.word	0x431bde83

080015d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e6:	6093      	str	r3, [r2, #8]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40007000 	.word	0x40007000

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e2fe      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d075      	beq.n	8001702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001616:	4b97      	ldr	r3, [pc, #604]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001620:	4b94      	ldr	r3, [pc, #592]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d102      	bne.n	8001636 <HAL_RCC_OscConfig+0x3e>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d002      	beq.n	800163c <HAL_RCC_OscConfig+0x44>
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b8d      	ldr	r3, [pc, #564]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d05b      	beq.n	8001700 <HAL_RCC_OscConfig+0x108>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d157      	bne.n	8001700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e2d9      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x74>
 800165e:	4b85      	ldr	r3, [pc, #532]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a84      	ldr	r2, [pc, #528]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b7f      	ldr	r3, [pc, #508]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7e      	ldr	r2, [pc, #504]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b7c      	ldr	r3, [pc, #496]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7b      	ldr	r2, [pc, #492]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xb0>
 8001690:	4b78      	ldr	r3, [pc, #480]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a77      	ldr	r2, [pc, #476]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b75      	ldr	r3, [pc, #468]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a74      	ldr	r2, [pc, #464]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb54 	bl	8000d5c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb50 	bl	8000d5c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e29e      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xc0>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb40 	bl	8000d5c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb3c 	bl	8000d5c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e28a      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f2:	4b60      	ldr	r3, [pc, #384]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0xe8>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d075      	beq.n	80017fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170e:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001718:	4b56      	ldr	r3, [pc, #344]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d102      	bne.n	800172e <HAL_RCC_OscConfig+0x136>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d002      	beq.n	8001734 <HAL_RCC_OscConfig+0x13c>
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d11f      	bne.n	8001774 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	4b4f      	ldr	r3, [pc, #316]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x154>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e25d      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b49      	ldr	r3, [pc, #292]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	4946      	ldr	r1, [pc, #280]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001760:	4b45      	ldr	r3, [pc, #276]	@ (8001878 <HAL_RCC_OscConfig+0x280>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff faad 	bl	8000cc4 <HAL_InitTick>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d043      	beq.n	80017f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e249      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3c      	ldr	r2, [pc, #240]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fae8 	bl	8000d5c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001790:	f7ff fae4 	bl	8000d5c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e232      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a2:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	492d      	ldr	r1, [pc, #180]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
 80017c2:	e01a      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fac4 	bl	8000d5c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fac0 	bl	8000d5c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e20e      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x1e0>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d041      	beq.n	800188a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01c      	beq.n	8001848 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001814:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff fa9d 	bl	8000d5c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fa99 	bl	8000d5c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1e7      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800183a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ef      	beq.n	8001826 <HAL_RCC_OscConfig+0x22e>
 8001846:	e020      	b.n	800188a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184e:	4a09      	ldr	r2, [pc, #36]	@ (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fa80 	bl	8000d5c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800185e:	e00d      	b.n	800187c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff fa7c 	bl	8000d5c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d906      	bls.n	800187c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1ca      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800187c:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ea      	bne.n	8001860 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80a6 	beq.w	80019e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800189c:	4b84      	ldr	r3, [pc, #528]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_OscConfig+0x2b4>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x2b6>
 80018ac:	2300      	movs	r3, #0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018be:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ce:	4b79      	ldr	r3, [pc, #484]	@ (8001ab4 <HAL_RCC_OscConfig+0x4bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018da:	4b76      	ldr	r3, [pc, #472]	@ (8001ab4 <HAL_RCC_OscConfig+0x4bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a75      	ldr	r2, [pc, #468]	@ (8001ab4 <HAL_RCC_OscConfig+0x4bc>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fa39 	bl	8000d5c <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ee:	f7ff fa35 	bl	8000d5c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e183      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001900:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab4 <HAL_RCC_OscConfig+0x4bc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_RCC_OscConfig+0x32e>
 8001914:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	4a65      	ldr	r2, [pc, #404]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001924:	e024      	b.n	8001970 <HAL_RCC_OscConfig+0x378>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d110      	bne.n	8001950 <HAL_RCC_OscConfig+0x358>
 800192e:	4b60      	ldr	r3, [pc, #384]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001934:	4a5e      	ldr	r2, [pc, #376]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800193e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001944:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800194e:	e00f      	b.n	8001970 <HAL_RCC_OscConfig+0x378>
 8001950:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001956:	4a56      	ldr	r2, [pc, #344]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001960:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001966:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d016      	beq.n	80019a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff f9f0 	bl	8000d5c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001980:	f7ff f9ec 	bl	8000d5c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e138      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001996:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ed      	beq.n	8001980 <HAL_RCC_OscConfig+0x388>
 80019a4:	e015      	b.n	80019d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a6:	f7ff f9d9 	bl	8000d5c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff f9d5 	bl	8000d5c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e121      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ed      	bne.n	80019ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d2:	7ffb      	ldrb	r3, [r7, #31]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b35      	ldr	r3, [pc, #212]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019dc:	4a34      	ldr	r2, [pc, #208]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 80019de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d03c      	beq.n	8001a6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 80019fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019fe:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f9a8 	bl	8000d5c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a10:	f7ff f9a4 	bl	8000d5c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0f2      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a22:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ef      	beq.n	8001a10 <HAL_RCC_OscConfig+0x418>
 8001a30:	e01b      	b.n	8001a6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a38:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff f98b 	bl	8000d5c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a4a:	f7ff f987 	bl	8000d5c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0d5      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ef      	bne.n	8001a4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80c9 	beq.w	8001c06 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	f000 8083 	beq.w	8001b88 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d15e      	bne.n	8001b48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <HAL_RCC_OscConfig+0x4b8>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f961 	bl	8000d5c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	e00c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f95d 	bl	8000d5c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d905      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0ab      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab8:	4b55      	ldr	r3, [pc, #340]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ec      	bne.n	8001a9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac4:	4b52      	ldr	r3, [pc, #328]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4b52      	ldr	r3, [pc, #328]	@ (8001c14 <HAL_RCC_OscConfig+0x61c>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6a11      	ldr	r1, [r2, #32]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001ade:	0212      	lsls	r2, r2, #8
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ae6:	0852      	lsrs	r2, r2, #1
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	0552      	lsls	r2, r2, #21
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001af2:	0852      	lsrs	r2, r2, #1
 8001af4:	3a01      	subs	r2, #1
 8001af6:	0652      	lsls	r2, r2, #25
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001afe:	06d2      	lsls	r2, r2, #27
 8001b00:	430a      	orrs	r2, r1
 8001b02:	4943      	ldr	r1, [pc, #268]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b08:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a40      	ldr	r2, [pc, #256]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b14:	4b3e      	ldr	r3, [pc, #248]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a3d      	ldr	r2, [pc, #244]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f91c 	bl	8000d5c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f918 	bl	8000d5c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e066      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3a:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x530>
 8001b46:	e05e      	b.n	8001c06 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a30      	ldr	r2, [pc, #192]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f902 	bl	8000d5c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff f8fe 	bl	8000d5c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04c      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6e:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b7a:	4b25      	ldr	r3, [pc, #148]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	4924      	ldr	r1, [pc, #144]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_RCC_OscConfig+0x620>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	60cb      	str	r3, [r1, #12]
 8001b86:	e03e      	b.n	8001c06 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e039      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b94:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <HAL_RCC_OscConfig+0x618>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d12c      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d123      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d11b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d113      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf8:	085b      	lsrs	r3, r3, #1
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	019f800c 	.word	0x019f800c
 8001c18:	feeefffc 	.word	0xfeeefffc

08001c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e11e      	b.n	8001e72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b91      	ldr	r3, [pc, #580]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d910      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b8e      	ldr	r3, [pc, #568]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 020f 	bic.w	r2, r3, #15
 8001c4a:	498c      	ldr	r1, [pc, #560]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b8a      	ldr	r3, [pc, #552]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e106      	b.n	8001e72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d073      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d129      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c78:	4b81      	ldr	r3, [pc, #516]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0f4      	b.n	8001e72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c88:	f000 f99e 	bl	8001fc8 <RCC_GetSysClockFreqFromPLLSource>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4a7c      	ldr	r2, [pc, #496]	@ (8001e84 <HAL_RCC_ClockConfig+0x268>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d93f      	bls.n	8001d16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c96:	4b7a      	ldr	r3, [pc, #488]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d033      	beq.n	8001d16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12f      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cb6:	4b72      	ldr	r3, [pc, #456]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cbe:	4a70      	ldr	r2, [pc, #448]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e024      	b.n	8001d16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0c6      	b.n	8001e72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	4b66      	ldr	r3, [pc, #408]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0be      	b.n	8001e72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cf4:	f000 f8ce 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4a61      	ldr	r2, [pc, #388]	@ (8001e84 <HAL_RCC_ClockConfig+0x268>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d909      	bls.n	8001d16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d02:	4b5f      	ldr	r3, [pc, #380]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d0a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d12:	2380      	movs	r3, #128	@ 0x80
 8001d14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b5a      	ldr	r3, [pc, #360]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4957      	ldr	r1, [pc, #348]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d28:	f7ff f818 	bl	8000d5c <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7ff f814 	bl	8000d5c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e095      	b.n	8001e72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b4e      	ldr	r3, [pc, #312]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d023      	beq.n	8001dac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d70:	4b43      	ldr	r3, [pc, #268]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a42      	ldr	r2, [pc, #264]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d88:	4b3d      	ldr	r3, [pc, #244]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d90:	4a3b      	ldr	r2, [pc, #236]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b39      	ldr	r3, [pc, #228]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4936      	ldr	r1, [pc, #216]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2b80      	cmp	r3, #128	@ 0x80
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001db2:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4a32      	ldr	r2, [pc, #200]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dbc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d21d      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 020f 	bic.w	r2, r3, #15
 8001dd4:	4929      	ldr	r1, [pc, #164]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe ffbe 	bl	8000d5c <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7fe ffba 	bl	8000d5c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e03b      	b.n	8001e72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ed      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4917      	ldr	r1, [pc, #92]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e32:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	490f      	ldr	r1, [pc, #60]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e46:	f000 f825 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <HAL_RCC_ClockConfig+0x264>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <HAL_RCC_ClockConfig+0x26c>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <HAL_RCC_ClockConfig+0x270>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_RCC_ClockConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff2a 	bl	8000cc4 <HAL_InitTick>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	04c4b400 	.word	0x04c4b400
 8001e88:	0800548c 	.word	0x0800548c
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e047      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eb8:	4b26      	ldr	r3, [pc, #152]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	e03e      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ebe:	4b23      	ldr	r3, [pc, #140]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	d136      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d10c      	bne.n	8001f02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef2:	68d2      	ldr	r2, [r2, #12]
 8001ef4:	0a12      	lsrs	r2, r2, #8
 8001ef6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
      break;
 8001f00:	e00c      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4a10      	ldr	r2, [pc, #64]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0c:	68d2      	ldr	r2, [r2, #12]
 8001f0e:	0a12      	lsrs	r2, r2, #8
 8001f10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
      break;
 8001f1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0e5b      	lsrs	r3, r3, #25
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	3301      	adds	r3, #1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e001      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f3c:	693b      	ldr	r3, [r7, #16]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	016e3600 	.word	0x016e3600

08001f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000000 	.word	0x20000000

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f74:	f7ff fff0 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4904      	ldr	r1, [pc, #16]	@ (8001f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	0800549c 	.word	0x0800549c

08001f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fa0:	f7ff ffda 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0adb      	lsrs	r3, r3, #11
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4904      	ldr	r1, [pc, #16]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	0800549c 	.word	0x0800549c

08001fc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d10c      	bne.n	8002006 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fec:	4a17      	ldr	r2, [pc, #92]	@ (800204c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ff6:	68d2      	ldr	r2, [r2, #12]
 8001ff8:	0a12      	lsrs	r2, r2, #8
 8001ffa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
    break;
 8002004:	e00c      	b.n	8002020 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002010:	68d2      	ldr	r2, [r2, #12]
 8002012:	0a12      	lsrs	r2, r2, #8
 8002014:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    break;
 800201e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002020:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0e5b      	lsrs	r3, r3, #25
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	3301      	adds	r3, #1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000
 800204c:	016e3600 	.word	0x016e3600
 8002050:	00f42400 	.word	0x00f42400

08002054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800205c:	2300      	movs	r3, #0
 800205e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002060:	2300      	movs	r3, #0
 8002062:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8098 	beq.w	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b40      	ldr	r3, [pc, #256]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	4a3f      	ldr	r2, [pc, #252]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	@ 0x58
 800208e:	4b3d      	ldr	r3, [pc, #244]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800209e:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a39      	ldr	r2, [pc, #228]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020aa:	f7fe fe57 	bl	8000d5c <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b0:	e009      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe fe53 	bl	8000d5c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d902      	bls.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	74fb      	strb	r3, [r7, #19]
        break;
 80020c4:	e005      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020c6:	4b30      	ldr	r3, [pc, #192]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0ef      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d159      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01e      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d019      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020f4:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002100:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	4a1f      	ldr	r2, [pc, #124]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	4a1b      	ldr	r2, [pc, #108]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002120:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fe13 	bl	8000d5c <HAL_GetTick>
 8002136:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002138:	e00b      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fe0f 	bl	8000d5c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d902      	bls.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	74fb      	strb	r3, [r7, #19]
            break;
 8002150:	e006      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002152:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ec      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10b      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002174:	4903      	ldr	r1, [pc, #12]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800217c:	e008      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	74bb      	strb	r3, [r7, #18]
 8002182:	e005      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002190:	7c7b      	ldrb	r3, [r7, #17]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4ba7      	ldr	r3, [pc, #668]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	4aa6      	ldr	r2, [pc, #664]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f023 0203 	bic.w	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	499d      	ldr	r1, [pc, #628]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d0:	4b98      	ldr	r3, [pc, #608]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f023 020c 	bic.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4995      	ldr	r1, [pc, #596]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021f2:	4b90      	ldr	r3, [pc, #576]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	498c      	ldr	r1, [pc, #560]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002214:	4b87      	ldr	r3, [pc, #540]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	4984      	ldr	r1, [pc, #528]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002236:	4b7f      	ldr	r3, [pc, #508]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	497b      	ldr	r1, [pc, #492]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002258:	4b76      	ldr	r3, [pc, #472]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	4973      	ldr	r1, [pc, #460]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227a:	4b6e      	ldr	r3, [pc, #440]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	496a      	ldr	r1, [pc, #424]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800229c:	4b65      	ldr	r3, [pc, #404]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4962      	ldr	r1, [pc, #392]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022be:	4b5d      	ldr	r3, [pc, #372]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	4959      	ldr	r1, [pc, #356]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e0:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	4951      	ldr	r1, [pc, #324]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	4b4c      	ldr	r3, [pc, #304]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	4948      	ldr	r1, [pc, #288]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d015      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002324:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4940      	ldr	r1, [pc, #256]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002342:	d105      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b3b      	ldr	r3, [pc, #236]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a3a      	ldr	r2, [pc, #232]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800234e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800235c:	4b35      	ldr	r3, [pc, #212]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236a:	4932      	ldr	r1, [pc, #200]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800237a:	d105      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237c:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a2c      	ldr	r2, [pc, #176]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002386:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002394:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a2:	4924      	ldr	r1, [pc, #144]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023cc:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023da:	4916      	ldr	r1, [pc, #88]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ea:	d105      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a10      	ldr	r2, [pc, #64]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d019      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002422:	d109      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a02      	ldr	r2, [pc, #8]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
 8002430:	e002      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d015      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002444:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	4926      	ldr	r1, [pc, #152]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002462:	d105      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002464:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a20      	ldr	r2, [pc, #128]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800247c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248a:	4918      	ldr	r1, [pc, #96]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800249a:	d105      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	490a      	ldr	r1, [pc, #40]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80024da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	460b      	mov	r3, r1
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e05b      	b.n	80025c0 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7fe fb38 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2224      	movs	r2, #36	@ 0x24
 8002524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_MultiProcessor_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 ff7f 	bl	8003444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fc80 	bl	8002e4c <UART_SetConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_MultiProcessor_Init+0x66>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e034      	b.n	80025c0 <HAL_MultiProcessor_Init+0xd0>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002564:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002574:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800257c:	d10a      	bne.n	8002594 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	061a      	lsls	r2, r3, #24
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 ffe5 	bl	8003588 <UART_CheckIdleState>
 80025be:	4603      	mov	r3, r0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b091      	sub	sp, #68	@ 0x44
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d178      	bne.n	80026d2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_UART_Transmit_IT+0x24>
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e071      	b.n	80026d4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2221      	movs	r2, #33	@ 0x21
 8002618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002624:	d12a      	bne.n	800267c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800262e:	d107      	bne.n	8002640 <HAL_UART_Transmit_IT+0x78>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a29      	ldr	r2, [pc, #164]	@ (80026e0 <HAL_UART_Transmit_IT+0x118>)
 800263c:	679a      	str	r2, [r3, #120]	@ 0x78
 800263e:	e002      	b.n	8002646 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a28      	ldr	r2, [pc, #160]	@ (80026e4 <HAL_UART_Transmit_IT+0x11c>)
 8002644:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3308      	adds	r3, #8
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800265c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3308      	adds	r3, #8
 8002664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002666:	637a      	str	r2, [r7, #52]	@ 0x34
 8002668:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800266c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e5      	bne.n	8002646 <HAL_UART_Transmit_IT+0x7e>
 800267a:	e028      	b.n	80026ce <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002684:	d107      	bne.n	8002696 <HAL_UART_Transmit_IT+0xce>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <HAL_UART_Transmit_IT+0x120>)
 8002692:	679a      	str	r2, [r3, #120]	@ 0x78
 8002694:	e002      	b.n	800269c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <HAL_UART_Transmit_IT+0x124>)
 800269a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	613b      	str	r3, [r7, #16]
   return(result);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026be:	69f9      	ldr	r1, [r7, #28]
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	e841 2300 	strex	r3, r2, [r1]
 80026c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1e6      	bne.n	800269c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3744      	adds	r7, #68	@ 0x44
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	08003d4f 	.word	0x08003d4f
 80026e4:	08003c6f 	.word	0x08003c6f
 80026e8:	08003bad 	.word	0x08003bad
 80026ec:	08003af5 	.word	0x08003af5

080026f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002704:	2b20      	cmp	r3, #32
 8002706:	d137      	bne.n	8002778 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_UART_Receive_IT+0x24>
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e030      	b.n	800277a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <HAL_UART_Receive_IT+0x94>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d01f      	beq.n	8002768 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	613b      	str	r3, [r7, #16]
   return(result);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	61bb      	str	r3, [r7, #24]
   return(result);
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e6      	bne.n	8002736 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	461a      	mov	r2, r3
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f001 f822 	bl	80037b8 <UART_Start_Receive_IT>
 8002774:	4603      	mov	r3, r0
 8002776:	e000      	b.n	800277a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3728      	adds	r7, #40	@ 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40008000 	.word	0x40008000

08002788 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0ba      	sub	sp, #232	@ 0xe8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80027b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80027b6:	4013      	ands	r3, r2
 80027b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80027bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11b      	bne.n	80027fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8300 	beq.w	8002df2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
      }
      return;
 80027fa:	e2fa      	b.n	8002df2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8123 	beq.w	8002a4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002806:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800280a:	4b8d      	ldr	r3, [pc, #564]	@ (8002a40 <HAL_UART_IRQHandler+0x2b8>)
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002812:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002816:	4b8b      	ldr	r3, [pc, #556]	@ (8002a44 <HAL_UART_IRQHandler+0x2bc>)
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8116 	beq.w	8002a4c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d011      	beq.n	8002850 <HAL_UART_IRQHandler+0xc8>
 800282c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d011      	beq.n	8002880 <HAL_UART_IRQHandler+0xf8>
 800285c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d011      	beq.n	80028b0 <HAL_UART_IRQHandler+0x128>
 800288c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2204      	movs	r2, #4
 800289e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d017      	beq.n	80028ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80028c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80028cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002a40 <HAL_UART_IRQHandler+0x2b8>)
 80028ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	f043 0208 	orr.w	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_UART_IRQHandler+0x196>
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00c      	beq.n	800291e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800290c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8266 	beq.w	8002df6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d013      	beq.n	800295e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002964:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d005      	beq.n	8002982 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800297a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800297e:	2b00      	cmp	r3, #0
 8002980:	d054      	beq.n	8002a2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f001 f83a 	bl	80039fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d146      	bne.n	8002a24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3308      	adds	r3, #8
 800299c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80029ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3308      	adds	r3, #8
 80029be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80029c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80029c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80029ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1d9      	bne.n	8002996 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d017      	beq.n	8002a1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f2:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <HAL_UART_IRQHandler+0x2c0>)
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fb21 	bl	8001044 <HAL_DMA_Abort_IT>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d019      	beq.n	8002a3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002a16:	4610      	mov	r0, r2
 8002a18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1a:	e00f      	b.n	8002a3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f9ff 	bl	8002e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a22:	e00b      	b.n	8002a3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f9fb 	bl	8002e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2a:	e007      	b.n	8002a3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9f7 	bl	8002e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002a3a:	e1dc      	b.n	8002df6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	bf00      	nop
    return;
 8002a3e:	e1da      	b.n	8002df6 <HAL_UART_IRQHandler+0x66e>
 8002a40:	10000001 	.word	0x10000001
 8002a44:	04000120 	.word	0x04000120
 8002a48:	08003ac9 	.word	0x08003ac9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	f040 8170 	bne.w	8002d36 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8169 	beq.w	8002d36 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8162 	beq.w	8002d36 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2210      	movs	r2, #16
 8002a78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a84:	2b40      	cmp	r3, #64	@ 0x40
 8002a86:	f040 80d8 	bne.w	8002c3a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80af 	beq.w	8002c00 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002aa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f080 80a7 	bcs.w	8002c00 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ab8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 8087 	bne.w	8002bde <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002afe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1da      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1e1      	bne.n	8002b1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3308      	adds	r3, #8
 8002b76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e3      	bne.n	8002b56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bac:	f023 0310 	bic.w	r3, r3, #16
 8002bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e4      	bne.n	8002b9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f9da 	bl	8000f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f91b 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002bfe:	e0fc      	b.n	8002dfa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	f040 80f5 	bne.w	8002dfa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	f040 80eb 	bne.w	8002dfa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002c30:	4619      	mov	r1, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8fe 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
      return;
 8002c38:	e0df      	b.n	8002dfa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80d1 	beq.w	8002dfe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80cc 	beq.w	8002dfe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e4      	bne.n	8002c66 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
 8002caa:	623b      	str	r3, [r7, #32]
   return(result);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e1      	bne.n	8002c9c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f023 0310 	bic.w	r3, r3, #16
 8002d00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	69b9      	ldr	r1, [r7, #24]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e4      	bne.n	8002cec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f880 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d34:	e063      	b.n	8002dfe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00e      	beq.n	8002d60 <HAL_UART_IRQHandler+0x5d8>
 8002d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f001 fdb9 	bl	80048d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d5e:	e051      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d014      	beq.n	8002d96 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d03a      	beq.n	8002e02 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
    }
    return;
 8002d94:	e035      	b.n	8002e02 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_UART_IRQHandler+0x62e>
 8002da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f001 f842 	bl	8003e38 <UART_EndTransmit_IT>
    return;
 8002db4:	e026      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x64e>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f001 fd92 	bl	80048f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dd4:	e016      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_UART_IRQHandler+0x67c>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0c      	bge.n	8002e04 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f001 fd7a 	bl	80048e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002df0:	e008      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
      return;
 8002df2:	bf00      	nop
 8002df4:	e006      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
    return;
 8002df6:	bf00      	nop
 8002df8:	e004      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
      return;
 8002dfa:	bf00      	nop
 8002dfc:	e002      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
      return;
 8002dfe:	bf00      	nop
 8002e00:	e000      	b.n	8002e04 <HAL_UART_IRQHandler+0x67c>
    return;
 8002e02:	bf00      	nop
  }
}
 8002e04:	37e8      	adds	r7, #232	@ 0xe8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop

08002e0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e50:	b08c      	sub	sp, #48	@ 0x30
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4baa      	ldr	r3, [pc, #680]	@ (8003124 <UART_SetConfig+0x2d8>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a9f      	ldr	r2, [pc, #636]	@ (8003128 <UART_SetConfig+0x2dc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002ec2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	f023 010f 	bic.w	r1, r3, #15
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a90      	ldr	r2, [pc, #576]	@ (800312c <UART_SetConfig+0x2e0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d125      	bne.n	8002f3c <UART_SetConfig+0xf0>
 8002ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8003130 <UART_SetConfig+0x2e4>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d81a      	bhi.n	8002f34 <UART_SetConfig+0xe8>
 8002efe:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <UART_SetConfig+0xb8>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f25 	.word	0x08002f25
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f2d 	.word	0x08002f2d
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1a:	e116      	b.n	800314a <UART_SetConfig+0x2fe>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f22:	e112      	b.n	800314a <UART_SetConfig+0x2fe>
 8002f24:	2304      	movs	r3, #4
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2a:	e10e      	b.n	800314a <UART_SetConfig+0x2fe>
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f32:	e10a      	b.n	800314a <UART_SetConfig+0x2fe>
 8002f34:	2310      	movs	r3, #16
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3a:	e106      	b.n	800314a <UART_SetConfig+0x2fe>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a7c      	ldr	r2, [pc, #496]	@ (8003134 <UART_SetConfig+0x2e8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d138      	bne.n	8002fb8 <UART_SetConfig+0x16c>
 8002f46:	4b7a      	ldr	r3, [pc, #488]	@ (8003130 <UART_SetConfig+0x2e4>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d82d      	bhi.n	8002fb0 <UART_SetConfig+0x164>
 8002f54:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <UART_SetConfig+0x110>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f91 	.word	0x08002f91
 8002f60:	08002fb1 	.word	0x08002fb1
 8002f64:	08002fb1 	.word	0x08002fb1
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fb1 	.word	0x08002fb1
 8002f74:	08002fb1 	.word	0x08002fb1
 8002f78:	08002fb1 	.word	0x08002fb1
 8002f7c:	08002f99 	.word	0x08002f99
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fb1 	.word	0x08002fb1
 8002f8c:	08002fa9 	.word	0x08002fa9
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f96:	e0d8      	b.n	800314a <UART_SetConfig+0x2fe>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9e:	e0d4      	b.n	800314a <UART_SetConfig+0x2fe>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa6:	e0d0      	b.n	800314a <UART_SetConfig+0x2fe>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fae:	e0cc      	b.n	800314a <UART_SetConfig+0x2fe>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb6:	e0c8      	b.n	800314a <UART_SetConfig+0x2fe>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003138 <UART_SetConfig+0x2ec>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d125      	bne.n	800300e <UART_SetConfig+0x1c2>
 8002fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8003130 <UART_SetConfig+0x2e4>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fcc:	2b30      	cmp	r3, #48	@ 0x30
 8002fce:	d016      	beq.n	8002ffe <UART_SetConfig+0x1b2>
 8002fd0:	2b30      	cmp	r3, #48	@ 0x30
 8002fd2:	d818      	bhi.n	8003006 <UART_SetConfig+0x1ba>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d00a      	beq.n	8002fee <UART_SetConfig+0x1a2>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d814      	bhi.n	8003006 <UART_SetConfig+0x1ba>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <UART_SetConfig+0x19a>
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d008      	beq.n	8002ff6 <UART_SetConfig+0x1aa>
 8002fe4:	e00f      	b.n	8003006 <UART_SetConfig+0x1ba>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fec:	e0ad      	b.n	800314a <UART_SetConfig+0x2fe>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff4:	e0a9      	b.n	800314a <UART_SetConfig+0x2fe>
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ffc:	e0a5      	b.n	800314a <UART_SetConfig+0x2fe>
 8002ffe:	2308      	movs	r3, #8
 8003000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003004:	e0a1      	b.n	800314a <UART_SetConfig+0x2fe>
 8003006:	2310      	movs	r3, #16
 8003008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800300c:	e09d      	b.n	800314a <UART_SetConfig+0x2fe>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a4a      	ldr	r2, [pc, #296]	@ (800313c <UART_SetConfig+0x2f0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d125      	bne.n	8003064 <UART_SetConfig+0x218>
 8003018:	4b45      	ldr	r3, [pc, #276]	@ (8003130 <UART_SetConfig+0x2e4>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003022:	2bc0      	cmp	r3, #192	@ 0xc0
 8003024:	d016      	beq.n	8003054 <UART_SetConfig+0x208>
 8003026:	2bc0      	cmp	r3, #192	@ 0xc0
 8003028:	d818      	bhi.n	800305c <UART_SetConfig+0x210>
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	d00a      	beq.n	8003044 <UART_SetConfig+0x1f8>
 800302e:	2b80      	cmp	r3, #128	@ 0x80
 8003030:	d814      	bhi.n	800305c <UART_SetConfig+0x210>
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <UART_SetConfig+0x1f0>
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d008      	beq.n	800304c <UART_SetConfig+0x200>
 800303a:	e00f      	b.n	800305c <UART_SetConfig+0x210>
 800303c:	2300      	movs	r3, #0
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003042:	e082      	b.n	800314a <UART_SetConfig+0x2fe>
 8003044:	2302      	movs	r3, #2
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304a:	e07e      	b.n	800314a <UART_SetConfig+0x2fe>
 800304c:	2304      	movs	r3, #4
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003052:	e07a      	b.n	800314a <UART_SetConfig+0x2fe>
 8003054:	2308      	movs	r3, #8
 8003056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800305a:	e076      	b.n	800314a <UART_SetConfig+0x2fe>
 800305c:	2310      	movs	r3, #16
 800305e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003062:	e072      	b.n	800314a <UART_SetConfig+0x2fe>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	@ (8003140 <UART_SetConfig+0x2f4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d12a      	bne.n	80030c4 <UART_SetConfig+0x278>
 800306e:	4b30      	ldr	r3, [pc, #192]	@ (8003130 <UART_SetConfig+0x2e4>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003074:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800307c:	d01a      	beq.n	80030b4 <UART_SetConfig+0x268>
 800307e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003082:	d81b      	bhi.n	80030bc <UART_SetConfig+0x270>
 8003084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003088:	d00c      	beq.n	80030a4 <UART_SetConfig+0x258>
 800308a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800308e:	d815      	bhi.n	80030bc <UART_SetConfig+0x270>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <UART_SetConfig+0x250>
 8003094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003098:	d008      	beq.n	80030ac <UART_SetConfig+0x260>
 800309a:	e00f      	b.n	80030bc <UART_SetConfig+0x270>
 800309c:	2300      	movs	r3, #0
 800309e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a2:	e052      	b.n	800314a <UART_SetConfig+0x2fe>
 80030a4:	2302      	movs	r3, #2
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030aa:	e04e      	b.n	800314a <UART_SetConfig+0x2fe>
 80030ac:	2304      	movs	r3, #4
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b2:	e04a      	b.n	800314a <UART_SetConfig+0x2fe>
 80030b4:	2308      	movs	r3, #8
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ba:	e046      	b.n	800314a <UART_SetConfig+0x2fe>
 80030bc:	2310      	movs	r3, #16
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c2:	e042      	b.n	800314a <UART_SetConfig+0x2fe>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a17      	ldr	r2, [pc, #92]	@ (8003128 <UART_SetConfig+0x2dc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d13a      	bne.n	8003144 <UART_SetConfig+0x2f8>
 80030ce:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <UART_SetConfig+0x2e4>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030dc:	d01a      	beq.n	8003114 <UART_SetConfig+0x2c8>
 80030de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030e2:	d81b      	bhi.n	800311c <UART_SetConfig+0x2d0>
 80030e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e8:	d00c      	beq.n	8003104 <UART_SetConfig+0x2b8>
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ee:	d815      	bhi.n	800311c <UART_SetConfig+0x2d0>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <UART_SetConfig+0x2b0>
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f8:	d008      	beq.n	800310c <UART_SetConfig+0x2c0>
 80030fa:	e00f      	b.n	800311c <UART_SetConfig+0x2d0>
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003102:	e022      	b.n	800314a <UART_SetConfig+0x2fe>
 8003104:	2302      	movs	r3, #2
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310a:	e01e      	b.n	800314a <UART_SetConfig+0x2fe>
 800310c:	2304      	movs	r3, #4
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003112:	e01a      	b.n	800314a <UART_SetConfig+0x2fe>
 8003114:	2308      	movs	r3, #8
 8003116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800311a:	e016      	b.n	800314a <UART_SetConfig+0x2fe>
 800311c:	2310      	movs	r3, #16
 800311e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003122:	e012      	b.n	800314a <UART_SetConfig+0x2fe>
 8003124:	cfff69f3 	.word	0xcfff69f3
 8003128:	40008000 	.word	0x40008000
 800312c:	40013800 	.word	0x40013800
 8003130:	40021000 	.word	0x40021000
 8003134:	40004400 	.word	0x40004400
 8003138:	40004800 	.word	0x40004800
 800313c:	40004c00 	.word	0x40004c00
 8003140:	40005000 	.word	0x40005000
 8003144:	2310      	movs	r3, #16
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4aae      	ldr	r2, [pc, #696]	@ (8003408 <UART_SetConfig+0x5bc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	f040 8097 	bne.w	8003284 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800315a:	2b08      	cmp	r3, #8
 800315c:	d823      	bhi.n	80031a6 <UART_SetConfig+0x35a>
 800315e:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <UART_SetConfig+0x318>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003189 	.word	0x08003189
 8003168:	080031a7 	.word	0x080031a7
 800316c:	08003191 	.word	0x08003191
 8003170:	080031a7 	.word	0x080031a7
 8003174:	08003197 	.word	0x08003197
 8003178:	080031a7 	.word	0x080031a7
 800317c:	080031a7 	.word	0x080031a7
 8003180:	080031a7 	.word	0x080031a7
 8003184:	0800319f 	.word	0x0800319f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7fe fef2 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 800318c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800318e:	e010      	b.n	80031b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003190:	4b9e      	ldr	r3, [pc, #632]	@ (800340c <UART_SetConfig+0x5c0>)
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003194:	e00d      	b.n	80031b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003196:	f7fe fe7d 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 800319a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800319c:	e009      	b.n	80031b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031a4:	e005      	b.n	80031b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8130 	beq.w	800341a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	4a94      	ldr	r2, [pc, #592]	@ (8003410 <UART_SetConfig+0x5c4>)
 80031c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d305      	bcc.n	80031ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d903      	bls.n	80031f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031f0:	e113      	b.n	800341a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	2200      	movs	r2, #0
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	60fa      	str	r2, [r7, #12]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	4a84      	ldr	r2, [pc, #528]	@ (8003410 <UART_SetConfig+0x5c4>)
 8003200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003204:	b29b      	uxth	r3, r3
 8003206:	2200      	movs	r2, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003210:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003214:	f7fd f864 	bl	80002e0 <__aeabi_uldivmod>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	020b      	lsls	r3, r1, #8
 800322a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800322e:	0202      	lsls	r2, r0, #8
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	6849      	ldr	r1, [r1, #4]
 8003234:	0849      	lsrs	r1, r1, #1
 8003236:	2000      	movs	r0, #0
 8003238:	460c      	mov	r4, r1
 800323a:	4605      	mov	r5, r0
 800323c:	eb12 0804 	adds.w	r8, r2, r4
 8003240:	eb43 0905 	adc.w	r9, r3, r5
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	469a      	mov	sl, r3
 800324c:	4693      	mov	fp, r2
 800324e:	4652      	mov	r2, sl
 8003250:	465b      	mov	r3, fp
 8003252:	4640      	mov	r0, r8
 8003254:	4649      	mov	r1, r9
 8003256:	f7fd f843 	bl	80002e0 <__aeabi_uldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4613      	mov	r3, r2
 8003260:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003268:	d308      	bcc.n	800327c <UART_SetConfig+0x430>
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003270:	d204      	bcs.n	800327c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a3a      	ldr	r2, [r7, #32]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e0ce      	b.n	800341a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003282:	e0ca      	b.n	800341a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800328c:	d166      	bne.n	800335c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800328e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003292:	2b08      	cmp	r3, #8
 8003294:	d827      	bhi.n	80032e6 <UART_SetConfig+0x49a>
 8003296:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <UART_SetConfig+0x450>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032c1 	.word	0x080032c1
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032d1 	.word	0x080032d1
 80032a8:	080032e7 	.word	0x080032e7
 80032ac:	080032d7 	.word	0x080032d7
 80032b0:	080032e7 	.word	0x080032e7
 80032b4:	080032e7 	.word	0x080032e7
 80032b8:	080032e7 	.word	0x080032e7
 80032bc:	080032df 	.word	0x080032df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c0:	f7fe fe56 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 80032c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032c6:	e014      	b.n	80032f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c8:	f7fe fe68 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 80032cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032ce:	e010      	b.n	80032f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d0:	4b4e      	ldr	r3, [pc, #312]	@ (800340c <UART_SetConfig+0x5c0>)
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032d4:	e00d      	b.n	80032f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d6:	f7fe fddd 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 80032da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032dc:	e009      	b.n	80032f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032e4:	e005      	b.n	80032f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8090 	beq.w	800341a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	4a44      	ldr	r2, [pc, #272]	@ (8003410 <UART_SetConfig+0x5c4>)
 8003300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	fbb3 f3f2 	udiv	r3, r3, r2
 800330c:	005a      	lsls	r2, r3, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	441a      	add	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	d916      	bls.n	8003354 <UART_SetConfig+0x508>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332c:	d212      	bcs.n	8003354 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	b29b      	uxth	r3, r3
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	b29b      	uxth	r3, r3
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	b29a      	uxth	r2, r3
 8003344:	8bfb      	ldrh	r3, [r7, #30]
 8003346:	4313      	orrs	r3, r2
 8003348:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	8bfa      	ldrh	r2, [r7, #30]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e062      	b.n	800341a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800335a:	e05e      	b.n	800341a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800335c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003360:	2b08      	cmp	r3, #8
 8003362:	d828      	bhi.n	80033b6 <UART_SetConfig+0x56a>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <UART_SetConfig+0x520>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003391 	.word	0x08003391
 8003370:	08003399 	.word	0x08003399
 8003374:	080033a1 	.word	0x080033a1
 8003378:	080033b7 	.word	0x080033b7
 800337c:	080033a7 	.word	0x080033a7
 8003380:	080033b7 	.word	0x080033b7
 8003384:	080033b7 	.word	0x080033b7
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033af 	.word	0x080033af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7fe fdee 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8003394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003396:	e014      	b.n	80033c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003398:	f7fe fe00 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 800339c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800339e:	e010      	b.n	80033c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <UART_SetConfig+0x5c0>)
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033a4:	e00d      	b.n	80033c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a6:	f7fe fd75 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 80033aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ac:	e009      	b.n	80033c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033b4:	e005      	b.n	80033c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033c0:	bf00      	nop
    }

    if (pclk != 0U)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d028      	beq.n	800341a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	4a10      	ldr	r2, [pc, #64]	@ (8003410 <UART_SetConfig+0x5c4>)
 80033ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d2:	461a      	mov	r2, r3
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	441a      	add	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d910      	bls.n	8003414 <UART_SetConfig+0x5c8>
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d20c      	bcs.n	8003414 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e009      	b.n	800341a <UART_SetConfig+0x5ce>
 8003406:	bf00      	nop
 8003408:	40008000 	.word	0x40008000
 800340c:	00f42400 	.word	0x00f42400
 8003410:	080054a4 	.word	0x080054a4
      }
      else
      {
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2201      	movs	r2, #1
 800341e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2201      	movs	r2, #1
 8003426:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2200      	movs	r2, #0
 800342e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003436:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800343a:	4618      	mov	r0, r3
 800343c:	3730      	adds	r7, #48	@ 0x30
 800343e:	46bd      	mov	sp, r7
 8003440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01a      	beq.n	800355a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003542:	d10a      	bne.n	800355a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b098      	sub	sp, #96	@ 0x60
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003598:	f7fd fbe0 	bl	8000d5c <HAL_GetTick>
 800359c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d12f      	bne.n	800360c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f88e 	bl	80036dc <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d022      	beq.n	800360c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035da:	653b      	str	r3, [r7, #80]	@ 0x50
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e6      	bne.n	80035c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e063      	b.n	80036d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d149      	bne.n	80036ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003622:	2200      	movs	r2, #0
 8003624:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f857 	bl	80036dc <UART_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d03c      	beq.n	80036ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	623b      	str	r3, [r7, #32]
   return(result);
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
 8003654:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e6      	bne.n	8003634 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3308      	adds	r3, #8
 800366c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	60fb      	str	r3, [r7, #12]
   return(result);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3308      	adds	r3, #8
 8003684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003686:	61fa      	str	r2, [r7, #28]
 8003688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	69b9      	ldr	r1, [r7, #24]
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	617b      	str	r3, [r7, #20]
   return(result);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e5      	bne.n	8003666 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e012      	b.n	80036d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3758      	adds	r7, #88	@ 0x58
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ec:	e04f      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d04b      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fd fb31 	bl	8000d5c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <UART_WaitOnFlagUntilTimeout+0x30>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e04e      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d037      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0xb2>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b80      	cmp	r3, #128	@ 0x80
 8003722:	d034      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	d031      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b08      	cmp	r3, #8
 8003736:	d110      	bne.n	800375a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2208      	movs	r2, #8
 800373e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f95b 	bl	80039fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2208      	movs	r2, #8
 800374a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e029      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003768:	d111      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f941 	bl	80039fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e00f      	b.n	80037ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4013      	ands	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d0a0      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b0a3      	sub	sp, #140	@ 0x8c
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ea:	d10e      	bne.n	800380a <UART_Start_Receive_IT+0x52>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <UART_Start_Receive_IT+0x48>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80037fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80037fe:	e02d      	b.n	800385c <UART_Start_Receive_IT+0xa4>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	22ff      	movs	r2, #255	@ 0xff
 8003804:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003808:	e028      	b.n	800385c <UART_Start_Receive_IT+0xa4>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <UART_Start_Receive_IT+0x76>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <UART_Start_Receive_IT+0x6c>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	@ 0xff
 800381e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003822:	e01b      	b.n	800385c <UART_Start_Receive_IT+0xa4>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	227f      	movs	r2, #127	@ 0x7f
 8003828:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800382c:	e016      	b.n	800385c <UART_Start_Receive_IT+0xa4>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003836:	d10d      	bne.n	8003854 <UART_Start_Receive_IT+0x9c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <UART_Start_Receive_IT+0x92>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	227f      	movs	r2, #127	@ 0x7f
 8003844:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003848:	e008      	b.n	800385c <UART_Start_Receive_IT+0xa4>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	223f      	movs	r2, #63	@ 0x3f
 800384e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003852:	e003      	b.n	800385c <UART_Start_Receive_IT+0xa4>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2222      	movs	r2, #34	@ 0x22
 8003868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3308      	adds	r3, #8
 8003872:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800387c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003890:	673a      	str	r2, [r7, #112]	@ 0x70
 8003892:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003896:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800389e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e3      	bne.n	800386c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ac:	d14f      	bne.n	800394e <UART_Start_Receive_IT+0x196>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d349      	bcc.n	800394e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c2:	d107      	bne.n	80038d4 <UART_Start_Receive_IT+0x11c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a47      	ldr	r2, [pc, #284]	@ (80039ec <UART_Start_Receive_IT+0x234>)
 80038d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80038d2:	e002      	b.n	80038da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a46      	ldr	r2, [pc, #280]	@ (80039f0 <UART_Start_Receive_IT+0x238>)
 80038d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01a      	beq.n	8003918 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80038f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003906:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800390a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e4      	bne.n	80038e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800392e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003938:	64ba      	str	r2, [r7, #72]	@ 0x48
 800393a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800393e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_Start_Receive_IT+0x160>
 800394c:	e046      	b.n	80039dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003956:	d107      	bne.n	8003968 <UART_Start_Receive_IT+0x1b0>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a24      	ldr	r2, [pc, #144]	@ (80039f4 <UART_Start_Receive_IT+0x23c>)
 8003964:	675a      	str	r2, [r3, #116]	@ 0x74
 8003966:	e002      	b.n	800396e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a23      	ldr	r2, [pc, #140]	@ (80039f8 <UART_Start_Receive_IT+0x240>)
 800396c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d019      	beq.n	80039aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800398a:	677b      	str	r3, [r7, #116]	@ 0x74
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003994:	637b      	str	r3, [r7, #52]	@ 0x34
 8003996:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800399a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80039a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e6      	bne.n	8003976 <UART_Start_Receive_IT+0x1be>
 80039a8:	e018      	b.n	80039dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	613b      	str	r3, [r7, #16]
   return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f043 0320 	orr.w	r3, r3, #32
 80039be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	6a3a      	ldr	r2, [r7, #32]
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e6      	bne.n	80039aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	378c      	adds	r7, #140	@ 0x8c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	08004565 	.word	0x08004565
 80039f0:	08004201 	.word	0x08004201
 80039f4:	08004049 	.word	0x08004049
 80039f8:	08003e91 	.word	0x08003e91

080039fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b095      	sub	sp, #84	@ 0x54
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a22:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e6      	bne.n	8003a04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d118      	bne.n	8003aa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f023 0310 	bic.w	r3, r3, #16
 8003a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6979      	ldr	r1, [r7, #20]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e6      	bne.n	8003a76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003abc:	bf00      	nop
 8003abe:	3754      	adds	r7, #84	@ 0x54
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff f99a 	bl	8002e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b08f      	sub	sp, #60	@ 0x3c
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b02:	2b21      	cmp	r3, #33	@ 0x21
 8003b04:	d14c      	bne.n	8003ba0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d132      	bne.n	8003b78 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b32:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e6      	bne.n	8003b12 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6979      	ldr	r1, [r7, #20]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e6      	bne.n	8003b44 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003b76:	e013      	b.n	8003ba0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003ba0:	bf00      	nop
 8003ba2:	373c      	adds	r7, #60	@ 0x3c
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b091      	sub	sp, #68	@ 0x44
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bba:	2b21      	cmp	r3, #33	@ 0x21
 8003bbc:	d151      	bne.n	8003c62 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d132      	bne.n	8003c30 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	69b9      	ldr	r1, [r7, #24]
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	617b      	str	r3, [r7, #20]
   return(result);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e6      	bne.n	8003bfc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003c2e:	e018      	b.n	8003c62 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c44:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c4a:	1c9a      	adds	r2, r3, #2
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003c62:	bf00      	nop
 8003c64:	3744      	adds	r7, #68	@ 0x44
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b091      	sub	sp, #68	@ 0x44
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	2b21      	cmp	r3, #33	@ 0x21
 8003c7e:	d160      	bne.n	8003d42 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003c88:	e057      	b.n	8003d3a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d133      	bne.n	8003cfe <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e5      	bne.n	8003c96 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003cfc:	e021      	b.n	8003d42 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003d34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003d36:	3b01      	subs	r3, #1
 8003d38:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003d3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1a4      	bne.n	8003c8a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003d40:	e7ff      	b.n	8003d42 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003d42:	bf00      	nop
 8003d44:	3744      	adds	r7, #68	@ 0x44
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b091      	sub	sp, #68	@ 0x44
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5c:	2b21      	cmp	r3, #33	@ 0x21
 8003d5e:	d165      	bne.n	8003e2c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003d66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003d68:	e05c      	b.n	8003e24 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d133      	bne.n	8003dde <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e5      	bne.n	8003d76 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e6      	bne.n	8003daa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003ddc:	e026      	b.n	8003e2c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e00:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e06:	1c9a      	adds	r2, r3, #2
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003e20:	3b01      	subs	r3, #1
 8003e22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003e24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d19f      	bne.n	8003d6a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003e2a:	e7ff      	b.n	8003e2c <UART_TxISR_16BIT_FIFOEN+0xde>
 8003e2c:	bf00      	nop
 8003e2e:	3744      	adds	r7, #68	@ 0x44
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6979      	ldr	r1, [r7, #20]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e6      	bne.n	8003e40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fe ffc3 	bl	8002e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e86:	bf00      	nop
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b09c      	sub	sp, #112	@ 0x70
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003e9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ea8:	2b22      	cmp	r3, #34	@ 0x22
 8003eaa:	f040 80be 	bne.w	800402a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003eb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ebc:	b2d9      	uxtb	r1, r3
 8003ebe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	400a      	ands	r2, r1
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 80a1 	bne.w	800403a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e6      	bne.n	8003ef8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a33      	ldr	r2, [pc, #204]	@ (8004044 <UART_RxISR_8BIT+0x1b4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d01f      	beq.n	8003fbc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	623b      	str	r3, [r7, #32]
   return(result);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e6      	bne.n	8003f8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d12e      	bne.n	8004022 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	69b9      	ldr	r1, [r7, #24]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e6      	bne.n	8003fca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b10      	cmp	r3, #16
 8004008:	d103      	bne.n	8004012 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2210      	movs	r2, #16
 8004010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe ff0a 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004020:	e00b      	b.n	800403a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fc fc2a 	bl	800087c <HAL_UART_RxCpltCallback>
}
 8004028:	e007      	b.n	800403a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0208 	orr.w	r2, r2, #8
 8004038:	619a      	str	r2, [r3, #24]
}
 800403a:	bf00      	nop
 800403c:	3770      	adds	r7, #112	@ 0x70
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40008000 	.word	0x40008000

08004048 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b09c      	sub	sp, #112	@ 0x70
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004056:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004060:	2b22      	cmp	r3, #34	@ 0x22
 8004062:	f040 80be 	bne.w	80041e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004076:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800407a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800407e:	4013      	ands	r3, r2
 8004080:	b29a      	uxth	r2, r3
 8004082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004084:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 80a1 	bne.w	80041f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80040be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80040d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80040d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80040dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e6      	bne.n	80040b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3308      	adds	r3, #8
 8004100:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004102:	643a      	str	r2, [r7, #64]	@ 0x40
 8004104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e5      	bne.n	80040e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a33      	ldr	r2, [pc, #204]	@ (80041fc <UART_RxISR_16BIT+0x1b4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01f      	beq.n	8004174 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d018      	beq.n	8004174 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004162:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e6      	bne.n	8004142 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d12e      	bne.n	80041da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f023 0310 	bic.w	r3, r3, #16
 8004196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	613b      	str	r3, [r7, #16]
   return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e6      	bne.n	8004182 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d103      	bne.n	80041ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2210      	movs	r2, #16
 80041c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041d0:	4619      	mov	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fe fe2e 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041d8:	e00b      	b.n	80041f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fb4e 	bl	800087c <HAL_UART_RxCpltCallback>
}
 80041e0:	e007      	b.n	80041f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0208 	orr.w	r2, r2, #8
 80041f0:	619a      	str	r2, [r3, #24]
}
 80041f2:	bf00      	nop
 80041f4:	3770      	adds	r7, #112	@ 0x70
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40008000 	.word	0x40008000

08004200 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0ac      	sub	sp, #176	@ 0xb0
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800420e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004236:	2b22      	cmp	r3, #34	@ 0x22
 8004238:	f040 8183 	bne.w	8004542 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004242:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004246:	e126      	b.n	8004496 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004252:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004256:	b2d9      	uxtb	r1, r3
 8004258:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800425c:	b2da      	uxtb	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	400a      	ands	r2, r1
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800428e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	2b00      	cmp	r3, #0
 8004298:	d053      	beq.n	8004342 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800429a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d011      	beq.n	80042ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80042a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d011      	beq.n	80042fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80042d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2202      	movs	r2, #2
 80042e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	f043 0204 	orr.w	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2204      	movs	r2, #4
 8004318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004320:	f043 0202 	orr.w	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fe fd73 	bl	8002e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 80a3 	bne.w	8004496 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800435e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004372:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004374:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004378:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e4      	bne.n	8004350 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3308      	adds	r3, #8
 800438c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004396:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 80043b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80043b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80043bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e1      	bne.n	8004386 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a60      	ldr	r2, [pc, #384]	@ (800455c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d021      	beq.n	8004424 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01a      	beq.n	8004424 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80043fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004410:	657b      	str	r3, [r7, #84]	@ 0x54
 8004412:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004416:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800441e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e4      	bne.n	80043ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d130      	bne.n	800448e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004454:	643b      	str	r3, [r7, #64]	@ 0x40
 8004456:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800445a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e4      	bne.n	8004432 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d103      	bne.n	800447e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2210      	movs	r2, #16
 800447c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fe fcd4 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800448c:	e00e      	b.n	80044ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc f9f4 	bl	800087c <HAL_UART_RxCpltCallback>
        break;
 8004494:	e00a      	b.n	80044ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004496:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800449e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f47f aece 	bne.w	8004248 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d049      	beq.n	8004552 <UART_RxISR_8BIT_FIFOEN+0x352>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80044c4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d242      	bcs.n	8004552 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	61fb      	str	r3, [r7, #28]
   return(result);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3308      	adds	r3, #8
 80044ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80044f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e3      	bne.n	80044cc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a16      	ldr	r2, [pc, #88]	@ (8004560 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004508:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	60bb      	str	r3, [r7, #8]
   return(result);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f043 0320 	orr.w	r3, r3, #32
 800451e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6979      	ldr	r1, [r7, #20]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	613b      	str	r3, [r7, #16]
   return(result);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e4      	bne.n	800450a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004540:	e007      	b.n	8004552 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0208 	orr.w	r2, r2, #8
 8004550:	619a      	str	r2, [r3, #24]
}
 8004552:	bf00      	nop
 8004554:	37b0      	adds	r7, #176	@ 0xb0
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40008000 	.word	0x40008000
 8004560:	08003e91 	.word	0x08003e91

08004564 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b0ae      	sub	sp, #184	@ 0xb8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004572:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459a:	2b22      	cmp	r3, #34	@ 0x22
 800459c:	f040 8187 	bne.w	80048ae <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80045a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045aa:	e12a      	b.n	8004802 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80045be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80045c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80045c6:	4013      	ands	r3, r2
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80045f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d053      	beq.n	80046aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d011      	beq.n	8004632 <UART_RxISR_16BIT_FIFOEN+0xce>
 800460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004628:	f043 0201 	orr.w	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d011      	beq.n	8004662 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800463e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2202      	movs	r2, #2
 8004650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004658:	f043 0204 	orr.w	r2, r3, #4
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004662:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d011      	beq.n	8004692 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800466e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2204      	movs	r2, #4
 8004680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004688:	f043 0202 	orr.w	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fe fbbf 	bl	8002e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 80a5 	bne.w	8004802 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e2      	bne.n	80046b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800471a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800471c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e1      	bne.n	80046f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a60      	ldr	r2, [pc, #384]	@ (80048c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d021      	beq.n	8004790 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01a      	beq.n	8004790 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800476a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800476e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800477c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800477e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800478a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e4      	bne.n	800475a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d130      	bne.n	80047fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	f023 0310 	bic.w	r3, r3, #16
 80047b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80047c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e4      	bne.n	800479e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d103      	bne.n	80047ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2210      	movs	r2, #16
 80047e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe fb1e 	bl	8002e34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80047f8:	e00e      	b.n	8004818 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc f83e 	bl	800087c <HAL_UART_RxCpltCallback>
        break;
 8004800:	e00a      	b.n	8004818 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004802:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004806:	2b00      	cmp	r3, #0
 8004808:	d006      	beq.n	8004818 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800480a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	f47f aeca 	bne.w	80045ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800481e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004822:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004826:	2b00      	cmp	r3, #0
 8004828:	d049      	beq.n	80048be <UART_RxISR_16BIT_FIFOEN+0x35a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004830:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004834:	429a      	cmp	r2, r3
 8004836:	d242      	bcs.n	80048be <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3308      	adds	r3, #8
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	623b      	str	r3, [r7, #32]
   return(result);
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800484e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800485c:	633a      	str	r2, [r7, #48]	@ 0x30
 800485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e3      	bne.n	8004838 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a16      	ldr	r2, [pc, #88]	@ (80048cc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004874:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	60fb      	str	r3, [r7, #12]
   return(result);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f043 0320 	orr.w	r3, r3, #32
 800488a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	617b      	str	r3, [r7, #20]
   return(result);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e4      	bne.n	8004876 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048ac:	e007      	b.n	80048be <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0208 	orr.w	r2, r2, #8
 80048bc:	619a      	str	r2, [r3, #24]
}
 80048be:	bf00      	nop
 80048c0:	37b8      	adds	r7, #184	@ 0xb8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40008000 	.word	0x40008000
 80048cc:	08004049 	.word	0x08004049

080048d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_UARTEx_DisableFifoMode+0x16>
 800491e:	2302      	movs	r3, #2
 8004920:	e027      	b.n	8004972 <HAL_UARTEx_DisableFifoMode+0x66>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2224      	movs	r2, #36	@ 0x24
 800492e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004950:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004992:	2302      	movs	r3, #2
 8004994:	e02d      	b.n	80049f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2224      	movs	r2, #36	@ 0x24
 80049a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f850 	bl	8004a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e02d      	b.n	8004a6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2224      	movs	r2, #36	@ 0x24
 8004a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f812 	bl	8004a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a98:	e031      	b.n	8004afe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	0e5b      	lsrs	r3, r3, #25
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	0f5b      	lsrs	r3, r3, #29
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ac2:	7bbb      	ldrb	r3, [r7, #14]
 8004ac4:	7b3a      	ldrb	r2, [r7, #12]
 8004ac6:	4911      	ldr	r1, [pc, #68]	@ (8004b0c <UARTEx_SetNbDataToProcess+0x94>)
 8004ac8:	5c8a      	ldrb	r2, [r1, r2]
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ace:	7b3a      	ldrb	r2, [r7, #12]
 8004ad0:	490f      	ldr	r1, [pc, #60]	@ (8004b10 <UARTEx_SetNbDataToProcess+0x98>)
 8004ad2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ad4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	7b7a      	ldrb	r2, [r7, #13]
 8004ae4:	4909      	ldr	r1, [pc, #36]	@ (8004b0c <UARTEx_SetNbDataToProcess+0x94>)
 8004ae6:	5c8a      	ldrb	r2, [r1, r2]
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004aec:	7b7a      	ldrb	r2, [r7, #13]
 8004aee:	4908      	ldr	r1, [pc, #32]	@ (8004b10 <UARTEx_SetNbDataToProcess+0x98>)
 8004af0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004af2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	080054bc 	.word	0x080054bc
 8004b10:	080054c4 	.word	0x080054c4

08004b14 <siprintf>:
 8004b14:	b40e      	push	{r1, r2, r3}
 8004b16:	b500      	push	{lr}
 8004b18:	b09c      	sub	sp, #112	@ 0x70
 8004b1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	9006      	str	r0, [sp, #24]
 8004b20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b24:	4809      	ldr	r0, [pc, #36]	@ (8004b4c <siprintf+0x38>)
 8004b26:	9107      	str	r1, [sp, #28]
 8004b28:	9104      	str	r1, [sp, #16]
 8004b2a:	4909      	ldr	r1, [pc, #36]	@ (8004b50 <siprintf+0x3c>)
 8004b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b30:	9105      	str	r1, [sp, #20]
 8004b32:	6800      	ldr	r0, [r0, #0]
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	a902      	add	r1, sp, #8
 8004b38:	f000 f994 	bl	8004e64 <_svfiprintf_r>
 8004b3c:	9b02      	ldr	r3, [sp, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	b01c      	add	sp, #112	@ 0x70
 8004b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b48:	b003      	add	sp, #12
 8004b4a:	4770      	bx	lr
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	ffff0208 	.word	0xffff0208

08004b54 <memset>:
 8004b54:	4402      	add	r2, r0
 8004b56:	4603      	mov	r3, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <__errno>:
 8004b64:	4b01      	ldr	r3, [pc, #4]	@ (8004b6c <__errno+0x8>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	2000000c 	.word	0x2000000c

08004b70 <__libc_init_array>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba8 <__libc_init_array+0x38>)
 8004b74:	4c0d      	ldr	r4, [pc, #52]	@ (8004bac <__libc_init_array+0x3c>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	42a6      	cmp	r6, r4
 8004b7e:	d109      	bne.n	8004b94 <__libc_init_array+0x24>
 8004b80:	4d0b      	ldr	r5, [pc, #44]	@ (8004bb0 <__libc_init_array+0x40>)
 8004b82:	4c0c      	ldr	r4, [pc, #48]	@ (8004bb4 <__libc_init_array+0x44>)
 8004b84:	f000 fc66 	bl	8005454 <_init>
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d105      	bne.n	8004b9e <__libc_init_array+0x2e>
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b98:	4798      	blx	r3
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7ee      	b.n	8004b7c <__libc_init_array+0xc>
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	4798      	blx	r3
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7f2      	b.n	8004b8e <__libc_init_array+0x1e>
 8004ba8:	08005508 	.word	0x08005508
 8004bac:	08005508 	.word	0x08005508
 8004bb0:	08005508 	.word	0x08005508
 8004bb4:	0800550c 	.word	0x0800550c

08004bb8 <__retarget_lock_acquire_recursive>:
 8004bb8:	4770      	bx	lr

08004bba <__retarget_lock_release_recursive>:
 8004bba:	4770      	bx	lr

08004bbc <_free_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	d041      	beq.n	8004c48 <_free_r+0x8c>
 8004bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc8:	1f0c      	subs	r4, r1, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bfb8      	it	lt
 8004bce:	18e4      	addlt	r4, r4, r3
 8004bd0:	f000 f8e0 	bl	8004d94 <__malloc_lock>
 8004bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c4c <_free_r+0x90>)
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	b933      	cbnz	r3, 8004be8 <_free_r+0x2c>
 8004bda:	6063      	str	r3, [r4, #4]
 8004bdc:	6014      	str	r4, [r2, #0]
 8004bde:	4628      	mov	r0, r5
 8004be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004be4:	f000 b8dc 	b.w	8004da0 <__malloc_unlock>
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	d908      	bls.n	8004bfe <_free_r+0x42>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	1821      	adds	r1, r4, r0
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	bf01      	itttt	eq
 8004bf4:	6819      	ldreq	r1, [r3, #0]
 8004bf6:	685b      	ldreq	r3, [r3, #4]
 8004bf8:	1809      	addeq	r1, r1, r0
 8004bfa:	6021      	streq	r1, [r4, #0]
 8004bfc:	e7ed      	b.n	8004bda <_free_r+0x1e>
 8004bfe:	461a      	mov	r2, r3
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b10b      	cbz	r3, 8004c08 <_free_r+0x4c>
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	d9fa      	bls.n	8004bfe <_free_r+0x42>
 8004c08:	6811      	ldr	r1, [r2, #0]
 8004c0a:	1850      	adds	r0, r2, r1
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d10b      	bne.n	8004c28 <_free_r+0x6c>
 8004c10:	6820      	ldr	r0, [r4, #0]
 8004c12:	4401      	add	r1, r0
 8004c14:	1850      	adds	r0, r2, r1
 8004c16:	4283      	cmp	r3, r0
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	d1e0      	bne.n	8004bde <_free_r+0x22>
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	6053      	str	r3, [r2, #4]
 8004c22:	4408      	add	r0, r1
 8004c24:	6010      	str	r0, [r2, #0]
 8004c26:	e7da      	b.n	8004bde <_free_r+0x22>
 8004c28:	d902      	bls.n	8004c30 <_free_r+0x74>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	e7d6      	b.n	8004bde <_free_r+0x22>
 8004c30:	6820      	ldr	r0, [r4, #0]
 8004c32:	1821      	adds	r1, r4, r0
 8004c34:	428b      	cmp	r3, r1
 8004c36:	bf04      	itt	eq
 8004c38:	6819      	ldreq	r1, [r3, #0]
 8004c3a:	685b      	ldreq	r3, [r3, #4]
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	bf04      	itt	eq
 8004c40:	1809      	addeq	r1, r1, r0
 8004c42:	6021      	streq	r1, [r4, #0]
 8004c44:	6054      	str	r4, [r2, #4]
 8004c46:	e7ca      	b.n	8004bde <_free_r+0x22>
 8004c48:	bd38      	pop	{r3, r4, r5, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200002c4 	.word	0x200002c4

08004c50 <sbrk_aligned>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4e0f      	ldr	r6, [pc, #60]	@ (8004c90 <sbrk_aligned+0x40>)
 8004c54:	460c      	mov	r4, r1
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b911      	cbnz	r1, 8004c62 <sbrk_aligned+0x12>
 8004c5c:	f000 fba6 	bl	80053ac <_sbrk_r>
 8004c60:	6030      	str	r0, [r6, #0]
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 fba1 	bl	80053ac <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d103      	bne.n	8004c76 <sbrk_aligned+0x26>
 8004c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c72:	4620      	mov	r0, r4
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	1cc4      	adds	r4, r0, #3
 8004c78:	f024 0403 	bic.w	r4, r4, #3
 8004c7c:	42a0      	cmp	r0, r4
 8004c7e:	d0f8      	beq.n	8004c72 <sbrk_aligned+0x22>
 8004c80:	1a21      	subs	r1, r4, r0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 fb92 	bl	80053ac <_sbrk_r>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d1f2      	bne.n	8004c72 <sbrk_aligned+0x22>
 8004c8c:	e7ef      	b.n	8004c6e <sbrk_aligned+0x1e>
 8004c8e:	bf00      	nop
 8004c90:	200002c0 	.word	0x200002c0

08004c94 <_malloc_r>:
 8004c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c98:	1ccd      	adds	r5, r1, #3
 8004c9a:	f025 0503 	bic.w	r5, r5, #3
 8004c9e:	3508      	adds	r5, #8
 8004ca0:	2d0c      	cmp	r5, #12
 8004ca2:	bf38      	it	cc
 8004ca4:	250c      	movcc	r5, #12
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	4606      	mov	r6, r0
 8004caa:	db01      	blt.n	8004cb0 <_malloc_r+0x1c>
 8004cac:	42a9      	cmp	r1, r5
 8004cae:	d904      	bls.n	8004cba <_malloc_r+0x26>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	6033      	str	r3, [r6, #0]
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d90 <_malloc_r+0xfc>
 8004cbe:	f000 f869 	bl	8004d94 <__malloc_lock>
 8004cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc6:	461c      	mov	r4, r3
 8004cc8:	bb44      	cbnz	r4, 8004d1c <_malloc_r+0x88>
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f7ff ffbf 	bl	8004c50 <sbrk_aligned>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	d158      	bne.n	8004d8a <_malloc_r+0xf6>
 8004cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8004cdc:	4627      	mov	r7, r4
 8004cde:	2f00      	cmp	r7, #0
 8004ce0:	d143      	bne.n	8004d6a <_malloc_r+0xd6>
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	d04b      	beq.n	8004d7e <_malloc_r+0xea>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	4639      	mov	r1, r7
 8004cea:	4630      	mov	r0, r6
 8004cec:	eb04 0903 	add.w	r9, r4, r3
 8004cf0:	f000 fb5c 	bl	80053ac <_sbrk_r>
 8004cf4:	4581      	cmp	r9, r0
 8004cf6:	d142      	bne.n	8004d7e <_malloc_r+0xea>
 8004cf8:	6821      	ldr	r1, [r4, #0]
 8004cfa:	1a6d      	subs	r5, r5, r1
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f7ff ffa6 	bl	8004c50 <sbrk_aligned>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d03a      	beq.n	8004d7e <_malloc_r+0xea>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	442b      	add	r3, r5
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	bb62      	cbnz	r2, 8004d70 <_malloc_r+0xdc>
 8004d16:	f8c8 7000 	str.w	r7, [r8]
 8004d1a:	e00f      	b.n	8004d3c <_malloc_r+0xa8>
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	1b52      	subs	r2, r2, r5
 8004d20:	d420      	bmi.n	8004d64 <_malloc_r+0xd0>
 8004d22:	2a0b      	cmp	r2, #11
 8004d24:	d917      	bls.n	8004d56 <_malloc_r+0xc2>
 8004d26:	1961      	adds	r1, r4, r5
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	6025      	str	r5, [r4, #0]
 8004d2c:	bf18      	it	ne
 8004d2e:	6059      	strne	r1, [r3, #4]
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	bf08      	it	eq
 8004d34:	f8c8 1000 	streq.w	r1, [r8]
 8004d38:	5162      	str	r2, [r4, r5]
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 f82f 	bl	8004da0 <__malloc_unlock>
 8004d42:	f104 000b 	add.w	r0, r4, #11
 8004d46:	1d23      	adds	r3, r4, #4
 8004d48:	f020 0007 	bic.w	r0, r0, #7
 8004d4c:	1ac2      	subs	r2, r0, r3
 8004d4e:	bf1c      	itt	ne
 8004d50:	1a1b      	subne	r3, r3, r0
 8004d52:	50a3      	strne	r3, [r4, r2]
 8004d54:	e7af      	b.n	8004cb6 <_malloc_r+0x22>
 8004d56:	6862      	ldr	r2, [r4, #4]
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	bf0c      	ite	eq
 8004d5c:	f8c8 2000 	streq.w	r2, [r8]
 8004d60:	605a      	strne	r2, [r3, #4]
 8004d62:	e7eb      	b.n	8004d3c <_malloc_r+0xa8>
 8004d64:	4623      	mov	r3, r4
 8004d66:	6864      	ldr	r4, [r4, #4]
 8004d68:	e7ae      	b.n	8004cc8 <_malloc_r+0x34>
 8004d6a:	463c      	mov	r4, r7
 8004d6c:	687f      	ldr	r7, [r7, #4]
 8004d6e:	e7b6      	b.n	8004cde <_malloc_r+0x4a>
 8004d70:	461a      	mov	r2, r3
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d1fb      	bne.n	8004d70 <_malloc_r+0xdc>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6053      	str	r3, [r2, #4]
 8004d7c:	e7de      	b.n	8004d3c <_malloc_r+0xa8>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f80c 	bl	8004da0 <__malloc_unlock>
 8004d88:	e794      	b.n	8004cb4 <_malloc_r+0x20>
 8004d8a:	6005      	str	r5, [r0, #0]
 8004d8c:	e7d6      	b.n	8004d3c <_malloc_r+0xa8>
 8004d8e:	bf00      	nop
 8004d90:	200002c4 	.word	0x200002c4

08004d94 <__malloc_lock>:
 8004d94:	4801      	ldr	r0, [pc, #4]	@ (8004d9c <__malloc_lock+0x8>)
 8004d96:	f7ff bf0f 	b.w	8004bb8 <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	200002bc 	.word	0x200002bc

08004da0 <__malloc_unlock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	@ (8004da8 <__malloc_unlock+0x8>)
 8004da2:	f7ff bf0a 	b.w	8004bba <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	200002bc 	.word	0x200002bc

08004dac <__ssputs_r>:
 8004dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db0:	688e      	ldr	r6, [r1, #8]
 8004db2:	461f      	mov	r7, r3
 8004db4:	42be      	cmp	r6, r7
 8004db6:	680b      	ldr	r3, [r1, #0]
 8004db8:	4682      	mov	sl, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4690      	mov	r8, r2
 8004dbe:	d82d      	bhi.n	8004e1c <__ssputs_r+0x70>
 8004dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dc8:	d026      	beq.n	8004e18 <__ssputs_r+0x6c>
 8004dca:	6965      	ldr	r5, [r4, #20]
 8004dcc:	6909      	ldr	r1, [r1, #16]
 8004dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dd2:	eba3 0901 	sub.w	r9, r3, r1
 8004dd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dda:	1c7b      	adds	r3, r7, #1
 8004ddc:	444b      	add	r3, r9
 8004dde:	106d      	asrs	r5, r5, #1
 8004de0:	429d      	cmp	r5, r3
 8004de2:	bf38      	it	cc
 8004de4:	461d      	movcc	r5, r3
 8004de6:	0553      	lsls	r3, r2, #21
 8004de8:	d527      	bpl.n	8004e3a <__ssputs_r+0x8e>
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7ff ff52 	bl	8004c94 <_malloc_r>
 8004df0:	4606      	mov	r6, r0
 8004df2:	b360      	cbz	r0, 8004e4e <__ssputs_r+0xa2>
 8004df4:	6921      	ldr	r1, [r4, #16]
 8004df6:	464a      	mov	r2, r9
 8004df8:	f000 fae8 	bl	80053cc <memcpy>
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e06:	81a3      	strh	r3, [r4, #12]
 8004e08:	6126      	str	r6, [r4, #16]
 8004e0a:	6165      	str	r5, [r4, #20]
 8004e0c:	444e      	add	r6, r9
 8004e0e:	eba5 0509 	sub.w	r5, r5, r9
 8004e12:	6026      	str	r6, [r4, #0]
 8004e14:	60a5      	str	r5, [r4, #8]
 8004e16:	463e      	mov	r6, r7
 8004e18:	42be      	cmp	r6, r7
 8004e1a:	d900      	bls.n	8004e1e <__ssputs_r+0x72>
 8004e1c:	463e      	mov	r6, r7
 8004e1e:	6820      	ldr	r0, [r4, #0]
 8004e20:	4632      	mov	r2, r6
 8004e22:	4641      	mov	r1, r8
 8004e24:	f000 faa8 	bl	8005378 <memmove>
 8004e28:	68a3      	ldr	r3, [r4, #8]
 8004e2a:	1b9b      	subs	r3, r3, r6
 8004e2c:	60a3      	str	r3, [r4, #8]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	4433      	add	r3, r6
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	2000      	movs	r0, #0
 8004e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	f000 fad4 	bl	80053e8 <_realloc_r>
 8004e40:	4606      	mov	r6, r0
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d1e0      	bne.n	8004e08 <__ssputs_r+0x5c>
 8004e46:	6921      	ldr	r1, [r4, #16]
 8004e48:	4650      	mov	r0, sl
 8004e4a:	f7ff feb7 	bl	8004bbc <_free_r>
 8004e4e:	230c      	movs	r3, #12
 8004e50:	f8ca 3000 	str.w	r3, [sl]
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	e7e9      	b.n	8004e36 <__ssputs_r+0x8a>
	...

08004e64 <_svfiprintf_r>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	4698      	mov	r8, r3
 8004e6a:	898b      	ldrh	r3, [r1, #12]
 8004e6c:	061b      	lsls	r3, r3, #24
 8004e6e:	b09d      	sub	sp, #116	@ 0x74
 8004e70:	4607      	mov	r7, r0
 8004e72:	460d      	mov	r5, r1
 8004e74:	4614      	mov	r4, r2
 8004e76:	d510      	bpl.n	8004e9a <_svfiprintf_r+0x36>
 8004e78:	690b      	ldr	r3, [r1, #16]
 8004e7a:	b973      	cbnz	r3, 8004e9a <_svfiprintf_r+0x36>
 8004e7c:	2140      	movs	r1, #64	@ 0x40
 8004e7e:	f7ff ff09 	bl	8004c94 <_malloc_r>
 8004e82:	6028      	str	r0, [r5, #0]
 8004e84:	6128      	str	r0, [r5, #16]
 8004e86:	b930      	cbnz	r0, 8004e96 <_svfiprintf_r+0x32>
 8004e88:	230c      	movs	r3, #12
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	b01d      	add	sp, #116	@ 0x74
 8004e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e96:	2340      	movs	r3, #64	@ 0x40
 8004e98:	616b      	str	r3, [r5, #20]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea8:	2330      	movs	r3, #48	@ 0x30
 8004eaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005048 <_svfiprintf_r+0x1e4>
 8004eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eb2:	f04f 0901 	mov.w	r9, #1
 8004eb6:	4623      	mov	r3, r4
 8004eb8:	469a      	mov	sl, r3
 8004eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ebe:	b10a      	cbz	r2, 8004ec4 <_svfiprintf_r+0x60>
 8004ec0:	2a25      	cmp	r2, #37	@ 0x25
 8004ec2:	d1f9      	bne.n	8004eb8 <_svfiprintf_r+0x54>
 8004ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec8:	d00b      	beq.n	8004ee2 <_svfiprintf_r+0x7e>
 8004eca:	465b      	mov	r3, fp
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff ff6b 	bl	8004dac <__ssputs_r>
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f000 80a7 	beq.w	800502a <_svfiprintf_r+0x1c6>
 8004edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ede:	445a      	add	r2, fp
 8004ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 809f 	beq.w	800502a <_svfiprintf_r+0x1c6>
 8004eec:	2300      	movs	r3, #0
 8004eee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef6:	f10a 0a01 	add.w	sl, sl, #1
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	9307      	str	r3, [sp, #28]
 8004efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f04:	4654      	mov	r4, sl
 8004f06:	2205      	movs	r2, #5
 8004f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f0c:	484e      	ldr	r0, [pc, #312]	@ (8005048 <_svfiprintf_r+0x1e4>)
 8004f0e:	f7fb f997 	bl	8000240 <memchr>
 8004f12:	9a04      	ldr	r2, [sp, #16]
 8004f14:	b9d8      	cbnz	r0, 8004f4e <_svfiprintf_r+0xea>
 8004f16:	06d0      	lsls	r0, r2, #27
 8004f18:	bf44      	itt	mi
 8004f1a:	2320      	movmi	r3, #32
 8004f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f20:	0711      	lsls	r1, r2, #28
 8004f22:	bf44      	itt	mi
 8004f24:	232b      	movmi	r3, #43	@ 0x2b
 8004f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f30:	d015      	beq.n	8004f5e <_svfiprintf_r+0xfa>
 8004f32:	9a07      	ldr	r2, [sp, #28]
 8004f34:	4654      	mov	r4, sl
 8004f36:	2000      	movs	r0, #0
 8004f38:	f04f 0c0a 	mov.w	ip, #10
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f42:	3b30      	subs	r3, #48	@ 0x30
 8004f44:	2b09      	cmp	r3, #9
 8004f46:	d94b      	bls.n	8004fe0 <_svfiprintf_r+0x17c>
 8004f48:	b1b0      	cbz	r0, 8004f78 <_svfiprintf_r+0x114>
 8004f4a:	9207      	str	r2, [sp, #28]
 8004f4c:	e014      	b.n	8004f78 <_svfiprintf_r+0x114>
 8004f4e:	eba0 0308 	sub.w	r3, r0, r8
 8004f52:	fa09 f303 	lsl.w	r3, r9, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	46a2      	mov	sl, r4
 8004f5c:	e7d2      	b.n	8004f04 <_svfiprintf_r+0xa0>
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	1d19      	adds	r1, r3, #4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	9103      	str	r1, [sp, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bfbb      	ittet	lt
 8004f6a:	425b      	neglt	r3, r3
 8004f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f70:	9307      	strge	r3, [sp, #28]
 8004f72:	9307      	strlt	r3, [sp, #28]
 8004f74:	bfb8      	it	lt
 8004f76:	9204      	strlt	r2, [sp, #16]
 8004f78:	7823      	ldrb	r3, [r4, #0]
 8004f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f7c:	d10a      	bne.n	8004f94 <_svfiprintf_r+0x130>
 8004f7e:	7863      	ldrb	r3, [r4, #1]
 8004f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f82:	d132      	bne.n	8004fea <_svfiprintf_r+0x186>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	1d1a      	adds	r2, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	9203      	str	r2, [sp, #12]
 8004f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f90:	3402      	adds	r4, #2
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005058 <_svfiprintf_r+0x1f4>
 8004f98:	7821      	ldrb	r1, [r4, #0]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	f7fb f94f 	bl	8000240 <memchr>
 8004fa2:	b138      	cbz	r0, 8004fb4 <_svfiprintf_r+0x150>
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	eba0 000a 	sub.w	r0, r0, sl
 8004faa:	2240      	movs	r2, #64	@ 0x40
 8004fac:	4082      	lsls	r2, r0
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	3401      	adds	r4, #1
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb8:	4824      	ldr	r0, [pc, #144]	@ (800504c <_svfiprintf_r+0x1e8>)
 8004fba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fbe:	2206      	movs	r2, #6
 8004fc0:	f7fb f93e 	bl	8000240 <memchr>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d036      	beq.n	8005036 <_svfiprintf_r+0x1d2>
 8004fc8:	4b21      	ldr	r3, [pc, #132]	@ (8005050 <_svfiprintf_r+0x1ec>)
 8004fca:	bb1b      	cbnz	r3, 8005014 <_svfiprintf_r+0x1b0>
 8004fcc:	9b03      	ldr	r3, [sp, #12]
 8004fce:	3307      	adds	r3, #7
 8004fd0:	f023 0307 	bic.w	r3, r3, #7
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	9303      	str	r3, [sp, #12]
 8004fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fda:	4433      	add	r3, r6
 8004fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fde:	e76a      	b.n	8004eb6 <_svfiprintf_r+0x52>
 8004fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	e7a8      	b.n	8004f3c <_svfiprintf_r+0xd8>
 8004fea:	2300      	movs	r3, #0
 8004fec:	3401      	adds	r4, #1
 8004fee:	9305      	str	r3, [sp, #20]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f04f 0c0a 	mov.w	ip, #10
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ffc:	3a30      	subs	r2, #48	@ 0x30
 8004ffe:	2a09      	cmp	r2, #9
 8005000:	d903      	bls.n	800500a <_svfiprintf_r+0x1a6>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0c6      	beq.n	8004f94 <_svfiprintf_r+0x130>
 8005006:	9105      	str	r1, [sp, #20]
 8005008:	e7c4      	b.n	8004f94 <_svfiprintf_r+0x130>
 800500a:	fb0c 2101 	mla	r1, ip, r1, r2
 800500e:	4604      	mov	r4, r0
 8005010:	2301      	movs	r3, #1
 8005012:	e7f0      	b.n	8004ff6 <_svfiprintf_r+0x192>
 8005014:	ab03      	add	r3, sp, #12
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	462a      	mov	r2, r5
 800501a:	4b0e      	ldr	r3, [pc, #56]	@ (8005054 <_svfiprintf_r+0x1f0>)
 800501c:	a904      	add	r1, sp, #16
 800501e:	4638      	mov	r0, r7
 8005020:	f3af 8000 	nop.w
 8005024:	1c42      	adds	r2, r0, #1
 8005026:	4606      	mov	r6, r0
 8005028:	d1d6      	bne.n	8004fd8 <_svfiprintf_r+0x174>
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	065b      	lsls	r3, r3, #25
 800502e:	f53f af2d 	bmi.w	8004e8c <_svfiprintf_r+0x28>
 8005032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005034:	e72c      	b.n	8004e90 <_svfiprintf_r+0x2c>
 8005036:	ab03      	add	r3, sp, #12
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	462a      	mov	r2, r5
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <_svfiprintf_r+0x1f0>)
 800503e:	a904      	add	r1, sp, #16
 8005040:	4638      	mov	r0, r7
 8005042:	f000 f879 	bl	8005138 <_printf_i>
 8005046:	e7ed      	b.n	8005024 <_svfiprintf_r+0x1c0>
 8005048:	080054cc 	.word	0x080054cc
 800504c:	080054d6 	.word	0x080054d6
 8005050:	00000000 	.word	0x00000000
 8005054:	08004dad 	.word	0x08004dad
 8005058:	080054d2 	.word	0x080054d2

0800505c <_printf_common>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	4616      	mov	r6, r2
 8005062:	4698      	mov	r8, r3
 8005064:	688a      	ldr	r2, [r1, #8]
 8005066:	690b      	ldr	r3, [r1, #16]
 8005068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800506c:	4293      	cmp	r3, r2
 800506e:	bfb8      	it	lt
 8005070:	4613      	movlt	r3, r2
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005078:	4607      	mov	r7, r0
 800507a:	460c      	mov	r4, r1
 800507c:	b10a      	cbz	r2, 8005082 <_printf_common+0x26>
 800507e:	3301      	adds	r3, #1
 8005080:	6033      	str	r3, [r6, #0]
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	0699      	lsls	r1, r3, #26
 8005086:	bf42      	ittt	mi
 8005088:	6833      	ldrmi	r3, [r6, #0]
 800508a:	3302      	addmi	r3, #2
 800508c:	6033      	strmi	r3, [r6, #0]
 800508e:	6825      	ldr	r5, [r4, #0]
 8005090:	f015 0506 	ands.w	r5, r5, #6
 8005094:	d106      	bne.n	80050a4 <_printf_common+0x48>
 8005096:	f104 0a19 	add.w	sl, r4, #25
 800509a:	68e3      	ldr	r3, [r4, #12]
 800509c:	6832      	ldr	r2, [r6, #0]
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	42ab      	cmp	r3, r5
 80050a2:	dc26      	bgt.n	80050f2 <_printf_common+0x96>
 80050a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	3b00      	subs	r3, #0
 80050ac:	bf18      	it	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	0692      	lsls	r2, r2, #26
 80050b2:	d42b      	bmi.n	800510c <_printf_common+0xb0>
 80050b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050b8:	4641      	mov	r1, r8
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c8      	blx	r9
 80050be:	3001      	adds	r0, #1
 80050c0:	d01e      	beq.n	8005100 <_printf_common+0xa4>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	6922      	ldr	r2, [r4, #16]
 80050c6:	f003 0306 	and.w	r3, r3, #6
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	bf02      	ittt	eq
 80050ce:	68e5      	ldreq	r5, [r4, #12]
 80050d0:	6833      	ldreq	r3, [r6, #0]
 80050d2:	1aed      	subeq	r5, r5, r3
 80050d4:	68a3      	ldr	r3, [r4, #8]
 80050d6:	bf0c      	ite	eq
 80050d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050dc:	2500      	movne	r5, #0
 80050de:	4293      	cmp	r3, r2
 80050e0:	bfc4      	itt	gt
 80050e2:	1a9b      	subgt	r3, r3, r2
 80050e4:	18ed      	addgt	r5, r5, r3
 80050e6:	2600      	movs	r6, #0
 80050e8:	341a      	adds	r4, #26
 80050ea:	42b5      	cmp	r5, r6
 80050ec:	d11a      	bne.n	8005124 <_printf_common+0xc8>
 80050ee:	2000      	movs	r0, #0
 80050f0:	e008      	b.n	8005104 <_printf_common+0xa8>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4652      	mov	r2, sl
 80050f6:	4641      	mov	r1, r8
 80050f8:	4638      	mov	r0, r7
 80050fa:	47c8      	blx	r9
 80050fc:	3001      	adds	r0, #1
 80050fe:	d103      	bne.n	8005108 <_printf_common+0xac>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005108:	3501      	adds	r5, #1
 800510a:	e7c6      	b.n	800509a <_printf_common+0x3e>
 800510c:	18e1      	adds	r1, r4, r3
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	2030      	movs	r0, #48	@ 0x30
 8005112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005116:	4422      	add	r2, r4
 8005118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800511c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005120:	3302      	adds	r3, #2
 8005122:	e7c7      	b.n	80050b4 <_printf_common+0x58>
 8005124:	2301      	movs	r3, #1
 8005126:	4622      	mov	r2, r4
 8005128:	4641      	mov	r1, r8
 800512a:	4638      	mov	r0, r7
 800512c:	47c8      	blx	r9
 800512e:	3001      	adds	r0, #1
 8005130:	d0e6      	beq.n	8005100 <_printf_common+0xa4>
 8005132:	3601      	adds	r6, #1
 8005134:	e7d9      	b.n	80050ea <_printf_common+0x8e>
	...

08005138 <_printf_i>:
 8005138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	7e0f      	ldrb	r7, [r1, #24]
 800513e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005140:	2f78      	cmp	r7, #120	@ 0x78
 8005142:	4691      	mov	r9, r2
 8005144:	4680      	mov	r8, r0
 8005146:	460c      	mov	r4, r1
 8005148:	469a      	mov	sl, r3
 800514a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800514e:	d807      	bhi.n	8005160 <_printf_i+0x28>
 8005150:	2f62      	cmp	r7, #98	@ 0x62
 8005152:	d80a      	bhi.n	800516a <_printf_i+0x32>
 8005154:	2f00      	cmp	r7, #0
 8005156:	f000 80d2 	beq.w	80052fe <_printf_i+0x1c6>
 800515a:	2f58      	cmp	r7, #88	@ 0x58
 800515c:	f000 80b9 	beq.w	80052d2 <_printf_i+0x19a>
 8005160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005168:	e03a      	b.n	80051e0 <_printf_i+0xa8>
 800516a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800516e:	2b15      	cmp	r3, #21
 8005170:	d8f6      	bhi.n	8005160 <_printf_i+0x28>
 8005172:	a101      	add	r1, pc, #4	@ (adr r1, 8005178 <_printf_i+0x40>)
 8005174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051e5 	.word	0x080051e5
 8005180:	08005161 	.word	0x08005161
 8005184:	08005161 	.word	0x08005161
 8005188:	08005161 	.word	0x08005161
 800518c:	08005161 	.word	0x08005161
 8005190:	080051e5 	.word	0x080051e5
 8005194:	08005161 	.word	0x08005161
 8005198:	08005161 	.word	0x08005161
 800519c:	08005161 	.word	0x08005161
 80051a0:	08005161 	.word	0x08005161
 80051a4:	080052e5 	.word	0x080052e5
 80051a8:	0800520f 	.word	0x0800520f
 80051ac:	0800529f 	.word	0x0800529f
 80051b0:	08005161 	.word	0x08005161
 80051b4:	08005161 	.word	0x08005161
 80051b8:	08005307 	.word	0x08005307
 80051bc:	08005161 	.word	0x08005161
 80051c0:	0800520f 	.word	0x0800520f
 80051c4:	08005161 	.word	0x08005161
 80051c8:	08005161 	.word	0x08005161
 80051cc:	080052a7 	.word	0x080052a7
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6032      	str	r2, [r6, #0]
 80051d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051e0:	2301      	movs	r3, #1
 80051e2:	e09d      	b.n	8005320 <_printf_i+0x1e8>
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	1d19      	adds	r1, r3, #4
 80051ea:	6031      	str	r1, [r6, #0]
 80051ec:	0606      	lsls	r6, r0, #24
 80051ee:	d501      	bpl.n	80051f4 <_printf_i+0xbc>
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	e003      	b.n	80051fc <_printf_i+0xc4>
 80051f4:	0645      	lsls	r5, r0, #25
 80051f6:	d5fb      	bpl.n	80051f0 <_printf_i+0xb8>
 80051f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	da03      	bge.n	8005208 <_printf_i+0xd0>
 8005200:	232d      	movs	r3, #45	@ 0x2d
 8005202:	426d      	negs	r5, r5
 8005204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005208:	4859      	ldr	r0, [pc, #356]	@ (8005370 <_printf_i+0x238>)
 800520a:	230a      	movs	r3, #10
 800520c:	e011      	b.n	8005232 <_printf_i+0xfa>
 800520e:	6821      	ldr	r1, [r4, #0]
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	0608      	lsls	r0, r1, #24
 8005214:	f853 5b04 	ldr.w	r5, [r3], #4
 8005218:	d402      	bmi.n	8005220 <_printf_i+0xe8>
 800521a:	0649      	lsls	r1, r1, #25
 800521c:	bf48      	it	mi
 800521e:	b2ad      	uxthmi	r5, r5
 8005220:	2f6f      	cmp	r7, #111	@ 0x6f
 8005222:	4853      	ldr	r0, [pc, #332]	@ (8005370 <_printf_i+0x238>)
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	bf14      	ite	ne
 8005228:	230a      	movne	r3, #10
 800522a:	2308      	moveq	r3, #8
 800522c:	2100      	movs	r1, #0
 800522e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005232:	6866      	ldr	r6, [r4, #4]
 8005234:	60a6      	str	r6, [r4, #8]
 8005236:	2e00      	cmp	r6, #0
 8005238:	bfa2      	ittt	ge
 800523a:	6821      	ldrge	r1, [r4, #0]
 800523c:	f021 0104 	bicge.w	r1, r1, #4
 8005240:	6021      	strge	r1, [r4, #0]
 8005242:	b90d      	cbnz	r5, 8005248 <_printf_i+0x110>
 8005244:	2e00      	cmp	r6, #0
 8005246:	d04b      	beq.n	80052e0 <_printf_i+0x1a8>
 8005248:	4616      	mov	r6, r2
 800524a:	fbb5 f1f3 	udiv	r1, r5, r3
 800524e:	fb03 5711 	mls	r7, r3, r1, r5
 8005252:	5dc7      	ldrb	r7, [r0, r7]
 8005254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005258:	462f      	mov	r7, r5
 800525a:	42bb      	cmp	r3, r7
 800525c:	460d      	mov	r5, r1
 800525e:	d9f4      	bls.n	800524a <_printf_i+0x112>
 8005260:	2b08      	cmp	r3, #8
 8005262:	d10b      	bne.n	800527c <_printf_i+0x144>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07df      	lsls	r7, r3, #31
 8005268:	d508      	bpl.n	800527c <_printf_i+0x144>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	6861      	ldr	r1, [r4, #4]
 800526e:	4299      	cmp	r1, r3
 8005270:	bfde      	ittt	le
 8005272:	2330      	movle	r3, #48	@ 0x30
 8005274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800527c:	1b92      	subs	r2, r2, r6
 800527e:	6122      	str	r2, [r4, #16]
 8005280:	f8cd a000 	str.w	sl, [sp]
 8005284:	464b      	mov	r3, r9
 8005286:	aa03      	add	r2, sp, #12
 8005288:	4621      	mov	r1, r4
 800528a:	4640      	mov	r0, r8
 800528c:	f7ff fee6 	bl	800505c <_printf_common>
 8005290:	3001      	adds	r0, #1
 8005292:	d14a      	bne.n	800532a <_printf_i+0x1f2>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	b004      	add	sp, #16
 800529a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	f043 0320 	orr.w	r3, r3, #32
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	4833      	ldr	r0, [pc, #204]	@ (8005374 <_printf_i+0x23c>)
 80052a8:	2778      	movs	r7, #120	@ 0x78
 80052aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	6831      	ldr	r1, [r6, #0]
 80052b2:	061f      	lsls	r7, r3, #24
 80052b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80052b8:	d402      	bmi.n	80052c0 <_printf_i+0x188>
 80052ba:	065f      	lsls	r7, r3, #25
 80052bc:	bf48      	it	mi
 80052be:	b2ad      	uxthmi	r5, r5
 80052c0:	6031      	str	r1, [r6, #0]
 80052c2:	07d9      	lsls	r1, r3, #31
 80052c4:	bf44      	itt	mi
 80052c6:	f043 0320 	orrmi.w	r3, r3, #32
 80052ca:	6023      	strmi	r3, [r4, #0]
 80052cc:	b11d      	cbz	r5, 80052d6 <_printf_i+0x19e>
 80052ce:	2310      	movs	r3, #16
 80052d0:	e7ac      	b.n	800522c <_printf_i+0xf4>
 80052d2:	4827      	ldr	r0, [pc, #156]	@ (8005370 <_printf_i+0x238>)
 80052d4:	e7e9      	b.n	80052aa <_printf_i+0x172>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	f023 0320 	bic.w	r3, r3, #32
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	e7f6      	b.n	80052ce <_printf_i+0x196>
 80052e0:	4616      	mov	r6, r2
 80052e2:	e7bd      	b.n	8005260 <_printf_i+0x128>
 80052e4:	6833      	ldr	r3, [r6, #0]
 80052e6:	6825      	ldr	r5, [r4, #0]
 80052e8:	6961      	ldr	r1, [r4, #20]
 80052ea:	1d18      	adds	r0, r3, #4
 80052ec:	6030      	str	r0, [r6, #0]
 80052ee:	062e      	lsls	r6, r5, #24
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	d501      	bpl.n	80052f8 <_printf_i+0x1c0>
 80052f4:	6019      	str	r1, [r3, #0]
 80052f6:	e002      	b.n	80052fe <_printf_i+0x1c6>
 80052f8:	0668      	lsls	r0, r5, #25
 80052fa:	d5fb      	bpl.n	80052f4 <_printf_i+0x1bc>
 80052fc:	8019      	strh	r1, [r3, #0]
 80052fe:	2300      	movs	r3, #0
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	4616      	mov	r6, r2
 8005304:	e7bc      	b.n	8005280 <_printf_i+0x148>
 8005306:	6833      	ldr	r3, [r6, #0]
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	6032      	str	r2, [r6, #0]
 800530c:	681e      	ldr	r6, [r3, #0]
 800530e:	6862      	ldr	r2, [r4, #4]
 8005310:	2100      	movs	r1, #0
 8005312:	4630      	mov	r0, r6
 8005314:	f7fa ff94 	bl	8000240 <memchr>
 8005318:	b108      	cbz	r0, 800531e <_printf_i+0x1e6>
 800531a:	1b80      	subs	r0, r0, r6
 800531c:	6060      	str	r0, [r4, #4]
 800531e:	6863      	ldr	r3, [r4, #4]
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	2300      	movs	r3, #0
 8005324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005328:	e7aa      	b.n	8005280 <_printf_i+0x148>
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	4632      	mov	r2, r6
 800532e:	4649      	mov	r1, r9
 8005330:	4640      	mov	r0, r8
 8005332:	47d0      	blx	sl
 8005334:	3001      	adds	r0, #1
 8005336:	d0ad      	beq.n	8005294 <_printf_i+0x15c>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	079b      	lsls	r3, r3, #30
 800533c:	d413      	bmi.n	8005366 <_printf_i+0x22e>
 800533e:	68e0      	ldr	r0, [r4, #12]
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	4298      	cmp	r0, r3
 8005344:	bfb8      	it	lt
 8005346:	4618      	movlt	r0, r3
 8005348:	e7a6      	b.n	8005298 <_printf_i+0x160>
 800534a:	2301      	movs	r3, #1
 800534c:	4632      	mov	r2, r6
 800534e:	4649      	mov	r1, r9
 8005350:	4640      	mov	r0, r8
 8005352:	47d0      	blx	sl
 8005354:	3001      	adds	r0, #1
 8005356:	d09d      	beq.n	8005294 <_printf_i+0x15c>
 8005358:	3501      	adds	r5, #1
 800535a:	68e3      	ldr	r3, [r4, #12]
 800535c:	9903      	ldr	r1, [sp, #12]
 800535e:	1a5b      	subs	r3, r3, r1
 8005360:	42ab      	cmp	r3, r5
 8005362:	dcf2      	bgt.n	800534a <_printf_i+0x212>
 8005364:	e7eb      	b.n	800533e <_printf_i+0x206>
 8005366:	2500      	movs	r5, #0
 8005368:	f104 0619 	add.w	r6, r4, #25
 800536c:	e7f5      	b.n	800535a <_printf_i+0x222>
 800536e:	bf00      	nop
 8005370:	080054dd 	.word	0x080054dd
 8005374:	080054ee 	.word	0x080054ee

08005378 <memmove>:
 8005378:	4288      	cmp	r0, r1
 800537a:	b510      	push	{r4, lr}
 800537c:	eb01 0402 	add.w	r4, r1, r2
 8005380:	d902      	bls.n	8005388 <memmove+0x10>
 8005382:	4284      	cmp	r4, r0
 8005384:	4623      	mov	r3, r4
 8005386:	d807      	bhi.n	8005398 <memmove+0x20>
 8005388:	1e43      	subs	r3, r0, #1
 800538a:	42a1      	cmp	r1, r4
 800538c:	d008      	beq.n	80053a0 <memmove+0x28>
 800538e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005396:	e7f8      	b.n	800538a <memmove+0x12>
 8005398:	4402      	add	r2, r0
 800539a:	4601      	mov	r1, r0
 800539c:	428a      	cmp	r2, r1
 800539e:	d100      	bne.n	80053a2 <memmove+0x2a>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053aa:	e7f7      	b.n	800539c <memmove+0x24>

080053ac <_sbrk_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d06      	ldr	r5, [pc, #24]	@ (80053c8 <_sbrk_r+0x1c>)
 80053b0:	2300      	movs	r3, #0
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fb fb56 	bl	8000a68 <_sbrk>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_sbrk_r+0x1a>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_sbrk_r+0x1a>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	200002b8 	.word	0x200002b8

080053cc <memcpy>:
 80053cc:	440a      	add	r2, r1
 80053ce:	4291      	cmp	r1, r2
 80053d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d4:	d100      	bne.n	80053d8 <memcpy+0xc>
 80053d6:	4770      	bx	lr
 80053d8:	b510      	push	{r4, lr}
 80053da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e2:	4291      	cmp	r1, r2
 80053e4:	d1f9      	bne.n	80053da <memcpy+0xe>
 80053e6:	bd10      	pop	{r4, pc}

080053e8 <_realloc_r>:
 80053e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ec:	4680      	mov	r8, r0
 80053ee:	4615      	mov	r5, r2
 80053f0:	460c      	mov	r4, r1
 80053f2:	b921      	cbnz	r1, 80053fe <_realloc_r+0x16>
 80053f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f8:	4611      	mov	r1, r2
 80053fa:	f7ff bc4b 	b.w	8004c94 <_malloc_r>
 80053fe:	b92a      	cbnz	r2, 800540c <_realloc_r+0x24>
 8005400:	f7ff fbdc 	bl	8004bbc <_free_r>
 8005404:	2400      	movs	r4, #0
 8005406:	4620      	mov	r0, r4
 8005408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800540c:	f000 f81a 	bl	8005444 <_malloc_usable_size_r>
 8005410:	4285      	cmp	r5, r0
 8005412:	4606      	mov	r6, r0
 8005414:	d802      	bhi.n	800541c <_realloc_r+0x34>
 8005416:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800541a:	d8f4      	bhi.n	8005406 <_realloc_r+0x1e>
 800541c:	4629      	mov	r1, r5
 800541e:	4640      	mov	r0, r8
 8005420:	f7ff fc38 	bl	8004c94 <_malloc_r>
 8005424:	4607      	mov	r7, r0
 8005426:	2800      	cmp	r0, #0
 8005428:	d0ec      	beq.n	8005404 <_realloc_r+0x1c>
 800542a:	42b5      	cmp	r5, r6
 800542c:	462a      	mov	r2, r5
 800542e:	4621      	mov	r1, r4
 8005430:	bf28      	it	cs
 8005432:	4632      	movcs	r2, r6
 8005434:	f7ff ffca 	bl	80053cc <memcpy>
 8005438:	4621      	mov	r1, r4
 800543a:	4640      	mov	r0, r8
 800543c:	f7ff fbbe 	bl	8004bbc <_free_r>
 8005440:	463c      	mov	r4, r7
 8005442:	e7e0      	b.n	8005406 <_realloc_r+0x1e>

08005444 <_malloc_usable_size_r>:
 8005444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005448:	1f18      	subs	r0, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	bfbc      	itt	lt
 800544e:	580b      	ldrlt	r3, [r1, r0]
 8005450:	18c0      	addlt	r0, r0, r3
 8005452:	4770      	bx	lr

08005454 <_init>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr

08005460 <_fini>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr
