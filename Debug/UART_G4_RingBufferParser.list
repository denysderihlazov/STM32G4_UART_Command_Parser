
UART_G4_RingBufferParser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ad4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005cb4  08005cb4  00006cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005e24  08005e24  00006e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e2c  08005e2c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e30  08005e30  00006e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005e34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08005e9c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005e9c  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec66  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002694  00000000  00000000  00015cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00018398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b3  00000000  00000000  00018f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266be  00000000  00000000  000197d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010280  00000000  00000000  0003fe91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb67e  00000000  00000000  00050111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b78f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  0013b7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013ee24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005c9c 	.word	0x08005c9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005c9c 	.word	0x08005c9c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a2a      	ldr	r2, [pc, #168]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000602:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a24      	ldr	r2, [pc, #144]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0320 	and.w	r3, r3, #32
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a1e      	ldr	r2, [pc, #120]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a18      	ldr	r2, [pc, #96]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_GPIO_Init+0xc4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065e:	f000 ffa3 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000662:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000668:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	@ (80006a8 <MX_GPIO_Init+0xc8>)
 800067a:	f000 fe13 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067e:	2320      	movs	r3, #32
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f000 fe04 	bl	80012a4 <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3728      	adds	r7, #40	@ 0x28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000800 	.word	0x48000800

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fbb7 	bl	8000e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f828 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f7ff ff92 	bl	80005e0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006bc:	f000 fad0 	bl	8000c60 <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80006c0:	f000 f86d 	bl	800079e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  // Start listening for IRQ on LPUART1
  //    Callback will be handled in the User Code 4
  HAL_UART_Receive_IT(&hlpuart1, &TmpReceived, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	490b      	ldr	r1, [pc, #44]	@ (80006f4 <main+0x48>)
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <main+0x4c>)
 80006ca:	f002 f8d9 	bl	8002880 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(receivedLines > 0)
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <main+0x50>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0fb      	beq.n	80006ce <main+0x22>
	  {

		  Parser_handleLine(&RingBuffer, &ReceivedData);
 80006d6:	490a      	ldr	r1, [pc, #40]	@ (8000700 <main+0x54>)
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <main+0x58>)
 80006da:	f000 f8ab 	bl	8000834 <Parser_handleLine>

		  receivedLines--;
 80006de:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <main+0x50>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <main+0x50>)
 80006e8:	701a      	strb	r2, [r3, #0]

		  Parser_Parse(ReceivedData);
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <main+0x54>)
 80006ec:	f000 f906 	bl	80008fc <Parser_Parse>
	  if(receivedLines > 0)
 80006f0:	e7ed      	b.n	80006ce <main+0x22>
 80006f2:	bf00      	nop
 80006f4:	20000084 	.word	0x20000084
 80006f8:	200000d0 	.word	0x200000d0
 80006fc:	20000085 	.word	0x20000085
 8000700:	200000ac 	.word	0x200000ac
 8000704:	20000088 	.word	0x20000088

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2238      	movs	r2, #56	@ 0x38
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fbc9 	bl	8004eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 ff78 	bl	8001620 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2340      	movs	r3, #64	@ 0x40
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800074a:	2355      	movs	r3, #85	@ 0x55
 800074c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	4618      	mov	r0, r3
 8000760:	f001 f812 	bl	8001788 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076a:	f000 f85d 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2104      	movs	r1, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fb10 	bl	8001dac <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000792:	f000 f849 	bl	8000828 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	@ 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2028      	movs	r0, #40	@ 0x28
 80007a8:	f000 fc87 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ac:	2028      	movs	r0, #40	@ 0x28
 80007ae:	f000 fc9e 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	205b      	movs	r0, #91	@ 0x5b
 80007b8:	f000 fc7f 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80007bc:	205b      	movs	r0, #91	@ 0x5b
 80007be:	f000 fc96 	bl	80010ee <HAL_NVIC_EnableIRQ>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	// Checking if Callback from lpuart1
	if(huart->Instance == LPUART1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <HAL_UART_RxCpltCallback+0x4c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d117      	bne.n	800080a <HAL_UART_RxCpltCallback+0x42>
	{
		// Try to write byte to the ring buffer
		if(RB_OK == RingBuffer_Write(&RingBuffer, TmpReceived))
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_UART_RxCpltCallback+0x50>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	480e      	ldr	r0, [pc, #56]	@ (800081c <HAL_UART_RxCpltCallback+0x54>)
 80007e2:	f000 f8a5 	bl	8000930 <RingBuffer_Write>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d109      	bne.n	8000800 <HAL_UART_RxCpltCallback+0x38>
		{
			if(TmpReceived == ENDLINE)
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <HAL_UART_RxCpltCallback+0x50>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b0a      	cmp	r3, #10
 80007f2:	d105      	bne.n	8000800 <HAL_UART_RxCpltCallback+0x38>
			{
				receivedLines++;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <HAL_UART_RxCpltCallback+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <HAL_UART_RxCpltCallback+0x58>)
 80007fe:	701a      	strb	r2, [r3, #0]
			}
		}

		// Re-enable lpuart1 to receive next byte from interrupt
		HAL_UART_Receive_IT(&hlpuart1, &TmpReceived, 1);
 8000800:	2201      	movs	r2, #1
 8000802:	4905      	ldr	r1, [pc, #20]	@ (8000818 <HAL_UART_RxCpltCallback+0x50>)
 8000804:	4807      	ldr	r0, [pc, #28]	@ (8000824 <HAL_UART_RxCpltCallback+0x5c>)
 8000806:	f002 f83b 	bl	8002880 <HAL_UART_Receive_IT>
	}
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40008000 	.word	0x40008000
 8000818:	20000084 	.word	0x20000084
 800081c:	20000088 	.word	0x20000088
 8000820:	20000085 	.word	0x20000085
 8000824:	200000d0 	.word	0x200000d0

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <Parser_handleLine>:


// Functions
// Take each line and put to ReceivedData buffer
void Parser_handleLine(RingBuffer_t *RingBuffer, uint8_t *DataToParse)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	uint8_t TmpRead; // Buffer to read 1 byte from RingBuffer
	uint8_t i = 0; // Reset counter for next UART RX
 800083e:	2300      	movs	r3, #0
 8000840:	73fb      	strb	r3, [r7, #15]

	do
	{
		// Read 1 byte from Ring Buffer
		RingBuffer_Read(RingBuffer, &TmpRead);
 8000842:	f107 030e 	add.w	r3, r7, #14
 8000846:	4619      	mov	r1, r3
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 f8a2 	bl	8000992 <RingBuffer_Read>

		// Write to parse buffer
		if(TmpRead == ENDLINE)
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	2b0a      	cmp	r3, #10
 8000852:	d105      	bne.n	8000860 <Parser_handleLine+0x2c>
		{
		  // Swap '\n' with 0
			DataToParse[i] = 0;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4413      	add	r3, r2
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e004      	b.n	800086a <Parser_handleLine+0x36>
		}
		else
		{
		  // Put value read from RingBuffer to parse buffer
			DataToParse[i] = TmpRead;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	7bba      	ldrb	r2, [r7, #14]
 8000868:	701a      	strb	r2, [r3, #0]
		}
		i++;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	3301      	adds	r3, #1
 800086e:	73fb      	strb	r3, [r7, #15]
	} while(TmpRead != ENDLINE); // Read from RingBuffer until '\n' sign
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	2b0a      	cmp	r3, #10
 8000874:	d1e5      	bne.n	8000842 <Parser_handleLine+0xe>
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <Parser_ParseOnBoardLED>:


// LED LD2 control
static void Parser_ParseOnBoardLED()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	char *ParsePointer = strtok(NULL, ",");
 8000886:	4919      	ldr	r1, [pc, #100]	@ (80008ec <Parser_ParseOnBoardLED+0x6c>)
 8000888:	2000      	movs	r0, #0
 800088a:	f004 fb19 	bl	8004ec0 <strtok>
 800088e:	6078      	str	r0, [r7, #4]

	// Check if substring exist
	if(strlen(ParsePointer) > 0)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d026      	beq.n	80008e6 <Parser_ParseOnBoardLED+0x66>
	{
		// Check if substring is 0 or 1
		if(ParsePointer[0] < '0' || ParsePointer[0] > '1')
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b2f      	cmp	r3, #47	@ 0x2f
 800089e:	d903      	bls.n	80008a8 <Parser_ParseOnBoardLED+0x28>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b31      	cmp	r3, #49	@ 0x31
 80008a6:	d903      	bls.n	80008b0 <Parser_ParseOnBoardLED+0x30>
		{
			UartLogIT("Wrong value for LD2. Please type 0 or 1!\r\n");
 80008a8:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <Parser_ParseOnBoardLED+0x70>)
 80008aa:	f000 fa7d 	bl	8000da8 <UartLogIT>
			return;
 80008ae:	e01a      	b.n	80008e6 <Parser_ParseOnBoardLED+0x66>
		}

		if(ParsePointer[0] == '1')
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b31      	cmp	r3, #49	@ 0x31
 80008b6:	d109      	bne.n	80008cc <Parser_ParseOnBoardLED+0x4c>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2120      	movs	r1, #32
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f000 fe72 	bl	80015a8 <HAL_GPIO_WritePin>
			UartLogIT("LD2 On\r\n");
 80008c4:	480b      	ldr	r0, [pc, #44]	@ (80008f4 <Parser_ParseOnBoardLED+0x74>)
 80008c6:	f000 fa6f 	bl	8000da8 <UartLogIT>
 80008ca:	e00c      	b.n	80008e6 <Parser_ParseOnBoardLED+0x66>
		}
		else if(ParsePointer[0] == '0')
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b30      	cmp	r3, #48	@ 0x30
 80008d2:	d108      	bne.n	80008e6 <Parser_ParseOnBoardLED+0x66>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2120      	movs	r1, #32
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f000 fe64 	bl	80015a8 <HAL_GPIO_WritePin>
			UartLogIT("LD2 Off\r\n");
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <Parser_ParseOnBoardLED+0x78>)
 80008e2:	f000 fa61 	bl	8000da8 <UartLogIT>
		}
	}
}
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08005cb4 	.word	0x08005cb4
 80008f0:	08005cb8 	.word	0x08005cb8
 80008f4:	08005ce4 	.word	0x08005ce4
 80008f8:	08005cf0 	.word	0x08005cf0

080008fc <Parser_Parse>:


// Main parse function
void Parser_Parse(uint8_t *DataToParse)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	// Pointer to sub-string
	char *ParsePointer = strtok((char*)DataToParse, "=");
 8000904:	4908      	ldr	r1, [pc, #32]	@ (8000928 <Parser_Parse+0x2c>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f004 fada 	bl	8004ec0 <strtok>
 800090c:	60f8      	str	r0, [r7, #12]

	// LED control
	if(strcmp("LD2", ParsePointer) == 0)
 800090e:	68f9      	ldr	r1, [r7, #12]
 8000910:	4806      	ldr	r0, [pc, #24]	@ (800092c <Parser_Parse+0x30>)
 8000912:	f7ff fc85 	bl	8000220 <strcmp>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <Parser_Parse+0x24>
	{
		Parser_ParseOnBoardLED();
 800091c:	f7ff ffb0 	bl	8000880 <Parser_ParseOnBoardLED>
	}

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	08005cfc 	.word	0x08005cfc
 800092c:	08005d00 	.word	0x08005d00

08000930 <RingBuffer_Write>:


// Functions
// Write
RB_Status RingBuffer_Write(RingBuffer_t *RingBuffer, uint8_t Value)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]

	// Check if RB has place to write
	if((RingBuffer->Head + 1) % RING_BUFFER_SIZE == RingBuffer->Tail)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	425a      	negs	r2, r3
 8000944:	f003 031f 	and.w	r3, r3, #31
 8000948:	f002 021f 	and.w	r2, r2, #31
 800094c:	bf58      	it	pl
 800094e:	4253      	negpl	r3, r2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	8852      	ldrh	r2, [r2, #2]
 8000954:	4293      	cmp	r3, r2
 8000956:	d101      	bne.n	800095c <RingBuffer_Write+0x2c>
	{
		return RB_ERROR; // The buffer has no space to write
 8000958:	2300      	movs	r3, #0
 800095a:	e014      	b.n	8000986 <RingBuffer_Write+0x56>
	}

	// Write value to ring buffer
	RingBuffer->Buffer[RingBuffer->Head] = Value;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	711a      	strb	r2, [r3, #4]

	// Shift RB head pointer
	RingBuffer->Head = (RingBuffer->Head + 1) % RING_BUFFER_SIZE;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	425a      	negs	r2, r3
 8000972:	f003 031f 	and.w	r3, r3, #31
 8000976:	f002 021f 	and.w	r2, r2, #31
 800097a:	bf58      	it	pl
 800097c:	4253      	negpl	r3, r2
 800097e:	b29a      	uxth	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <RingBuffer_Read>:


// Read
RB_Status RingBuffer_Read(RingBuffer_t *RingBuffer, uint8_t *Value)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	// Check if RB isn't empty
	if(RingBuffer->Tail == RingBuffer->Head)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	885a      	ldrh	r2, [r3, #2]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d101      	bne.n	80009ac <RingBuffer_Read+0x1a>
	{
		return RB_ERROR; // The buffer is empty
 80009a8:	2300      	movs	r3, #0
 80009aa:	e015      	b.n	80009d8 <RingBuffer_Read+0x46>
	}

	// <- Read from buffer ->
	*Value = RingBuffer->Buffer[RingBuffer->Tail];
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	885b      	ldrh	r3, [r3, #2]
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	791a      	ldrb	r2, [r3, #4]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	701a      	strb	r2, [r3, #0]

	RingBuffer->Tail = (RingBuffer->Tail + 1) % RING_BUFFER_SIZE;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	3301      	adds	r3, #1
 80009c2:	425a      	negs	r2, r3
 80009c4:	f003 031f 	and.w	r3, r3, #31
 80009c8:	f002 021f 	and.w	r2, r2, #31
 80009cc:	bf58      	it	pl
 80009ce:	4253      	negpl	r3, r2
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a1a:	f000 fea5 	bl	8001768 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 fa21 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a8e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a92:	f000 fda1 	bl	80015d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000aa0:	4802      	ldr	r0, [pc, #8]	@ (8000aac <LPUART1_IRQHandler+0x10>)
 8000aa2:	f001 ff39 	bl	8002918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000d0 	.word	0x200000d0

08000ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return 1;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_kill>:

int _kill(int pid, int sig)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aca:	f004 fa9b 	bl	8005004 <__errno>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2216      	movs	r2, #22
 8000ad2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_exit>:

void _exit (int status)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ffe7 	bl	8000ac0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000af2:	bf00      	nop
 8000af4:	e7fd      	b.n	8000af2 <_exit+0x12>

08000af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e00a      	b.n	8000b1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b08:	f3af 8000 	nop.w
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	b2ca      	uxtb	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf0      	blt.n	8000b08 <_read+0x12>
  }

  return len;
 8000b26:	687b      	ldr	r3, [r7, #4]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e009      	b.n	8000b56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	60ba      	str	r2, [r7, #8]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dbf1      	blt.n	8000b42 <_write+0x12>
  }
  return len;
 8000b5e:	687b      	ldr	r3, [r7, #4]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_close>:

int _close(int file)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b90:	605a      	str	r2, [r3, #4]
  return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_isatty>:

int _isatty(int file)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba8:	2301      	movs	r3, #1
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f004 fa00 	bl	8005004 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20020000 	.word	0x20020000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	200000cc 	.word	0x200000cc
 8000c38:	200002b8 	.word	0x200002b8

08000c3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c66:	4a23      	ldr	r2, [pc, #140]	@ (8000cf4 <MX_LPUART1_UART_Init+0x94>)
 8000c68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_MultiProcessor_Init(&hlpuart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4812      	ldr	r0, [pc, #72]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000ca8:	f001 fcea 	bl	8002680 <HAL_MultiProcessor_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000cb2:	f7ff fdb9 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000cba:	f003 ff28 	bl	8004b0e <HAL_UARTEx_SetTxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000cc4:	f7ff fdb0 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000ccc:	f003 ff5d 	bl	8004b8a <HAL_UARTEx_SetRxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000cd6:	f7ff fda7 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_LPUART1_UART_Init+0x90>)
 8000cdc:	f003 fede 	bl	8004a9c <HAL_UARTEx_DisableFifoMode>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000ce6:	f7ff fd9f 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000d0 	.word	0x200000d0
 8000cf4:	40008000 	.word	0x40008000

08000cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09e      	sub	sp, #120	@ 0x78
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2254      	movs	r2, #84	@ 0x54
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 f8c8 	bl	8004eae <memset>
  if(uartHandle->Instance==LPUART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	@ (8000da0 <HAL_UART_MspInit+0xa8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d136      	bne.n	8000d96 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fa55 	bl	80021e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d40:	f7ff fd72 	bl	8000828 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <HAL_UART_MspInit+0xac>)
 8000d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d48:	4a16      	ldr	r2, [pc, #88]	@ (8000da4 <HAL_UART_MspInit+0xac>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <HAL_UART_MspInit+0xac>)
 8000d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_UART_MspInit+0xac>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <HAL_UART_MspInit+0xac>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d68:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_UART_MspInit+0xac>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d74:	230c      	movs	r3, #12
 8000d76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d84:	230c      	movs	r3, #12
 8000d86:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d92:	f000 fa87 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3778      	adds	r7, #120	@ 0x78
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40008000 	.word	0x40008000
 8000da4:	40021000 	.word	0x40021000

08000da8 <UartLogIT>:
#include "string.h"

// Functions
// UART Interrupt Logs 115200 8n1
void UartLogIT(char* Message)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&hlpuart1, (uint8_t*)Message, strlen(Message));
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fa3f 	bl	8000234 <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <UartLogIT+0x24>)
 8000dc0:	f001 fcca 	bl	8002758 <HAL_UART_Transmit_IT>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000d0 	.word	0x200000d0

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff ff32 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	@ (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f004 f907 	bl	8005010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fc53 	bl	80006ac <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e14:	08005e34 	.word	0x08005e34
  ldr r2, =_sbss
 8000e18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e1c:	200002b4 	.word	0x200002b4

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>

08000e22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f939 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f80e 	bl	8000e54 <HAL_InitTick>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	e001      	b.n	8000e48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e44:	f7ff fdce 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e48:	79fb      	ldrb	r3, [r7, #7]

}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <HAL_InitTick+0x68>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d022      	beq.n	8000eae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_InitTick+0x6c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <HAL_InitTick+0x68>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f944 	bl	800110a <HAL_SYSTICK_Config>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10f      	bne.n	8000ea8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d809      	bhi.n	8000ea2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295
 8000e96:	f000 f910 	bl	80010ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_InitTick+0x70>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e004      	b.n	8000eb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e001      	b.n	8000eb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a03      	ldr	r2, [pc, #12]	@ (8000ee4 <HAL_IncTick+0x1c>)
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000164 	.word	0x20000164
 8000ee8:	20000008 	.word	0x20000008

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000164 	.word	0x20000164

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	@ (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	@ 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff40 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff33 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa4 	bl	8001060 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d005      	beq.n	8001146 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2204      	movs	r2, #4
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e037      	b.n	80011b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 020e 	bic.w	r2, r2, #14
 8001154:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001164:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f003 021f 	and.w	r2, r3, #31
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	2101      	movs	r1, #1
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001192:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00c      	beq.n	80011b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d00d      	beq.n	8001208 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2204      	movs	r2, #4
 80011f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e047      	b.n	8001298 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800126c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001276:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
    }
  }
  return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b2:	e15a      	b.n	800156a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 814c 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b5b      	ldr	r3, [pc, #364]	@ (8001588 <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141c:	4a5a      	ldr	r2, [pc, #360]	@ (8001588 <HAL_GPIO_Init+0x2e4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	@ 0x60
 8001424:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <HAL_GPIO_Init+0x2e4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001430:	4a56      	ldr	r2, [pc, #344]	@ (800158c <HAL_GPIO_Init+0x2e8>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800145a:	d01f      	beq.n	800149c <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	@ (8001590 <HAL_GPIO_Init+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d019      	beq.n	8001498 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	@ (8001594 <HAL_GPIO_Init+0x2f0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <HAL_GPIO_Init+0x2f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a49      	ldr	r2, [pc, #292]	@ (800159c <HAL_GPIO_Init+0x2f8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a48      	ldr	r2, [pc, #288]	@ (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001484:	2305      	movs	r3, #5
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001488:	2306      	movs	r3, #6
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	@ (800158c <HAL_GPIO_Init+0x2e8>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e0:	4a30      	ldr	r2, [pc, #192]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150a:	4a26      	ldr	r2, [pc, #152]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153a:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae9d 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f806 	bl	8001608 <HAL_GPIO_EXTI_Callback>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d141      	bne.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800162e:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800163a:	d131      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800163c:	4b47      	ldr	r3, [pc, #284]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001642:	4a46      	ldr	r2, [pc, #280]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	4b43      	ldr	r3, [pc, #268]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001654:	4a41      	ldr	r2, [pc, #260]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800165a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800165c:	4b40      	ldr	r3, [pc, #256]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2232      	movs	r2, #50	@ 0x32
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	4a3f      	ldr	r2, [pc, #252]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001672:	e002      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3b01      	subs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167a:	4b38      	ldr	r3, [pc, #224]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001686:	d102      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f2      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800168e:	4b33      	ldr	r3, [pc, #204]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800169a:	d158      	bne.n	800174e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e057      	b.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016a0:	4b2e      	ldr	r3, [pc, #184]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016a6:	4a2d      	ldr	r2, [pc, #180]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80016b0:	e04d      	b.n	800174e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016b8:	d141      	bne.n	800173e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c6:	d131      	bne.n	800172c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ce:	4a23      	ldr	r2, [pc, #140]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d8:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016e0:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2232      	movs	r2, #50	@ 0x32
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	0c9b      	lsrs	r3, r3, #18
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fe:	e002      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001712:	d102      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f2      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001726:	d112      	bne.n	800174e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e011      	b.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800173c:	e007      	b.n	800174e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001746:	4a05      	ldr	r2, [pc, #20]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001748:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40007000 	.word	0x40007000
 8001760:	20000000 	.word	0x20000000
 8001764:	431bde83 	.word	0x431bde83

08001768 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001776:	6093      	str	r3, [r2, #8]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40007000 	.word	0x40007000

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e2fe      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d075      	beq.n	8001892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a6:	4b97      	ldr	r3, [pc, #604]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b0:	4b94      	ldr	r3, [pc, #592]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d102      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3e>
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d002      	beq.n	80017cc <HAL_RCC_OscConfig+0x44>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b8d      	ldr	r3, [pc, #564]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d05b      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d157      	bne.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e2d9      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017ee:	4b85      	ldr	r3, [pc, #532]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a84      	ldr	r2, [pc, #528]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b7f      	ldr	r3, [pc, #508]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b7c      	ldr	r3, [pc, #496]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7b      	ldr	r2, [pc, #492]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 8001820:	4b78      	ldr	r3, [pc, #480]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a77      	ldr	r2, [pc, #476]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b75      	ldr	r3, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a74      	ldr	r2, [pc, #464]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fb54 	bl	8000eec <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fb50 	bl	8000eec <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e29e      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xc0>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fb40 	bl	8000eec <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fb3c 	bl	8000eec <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e28a      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001882:	4b60      	ldr	r3, [pc, #384]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d075      	beq.n	800198a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800189e:	4b59      	ldr	r3, [pc, #356]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018a8:	4b56      	ldr	r3, [pc, #344]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0x136>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_OscConfig+0x13c>
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d11f      	bne.n	8001904 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_OscConfig+0x154>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e25d      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b49      	ldr	r3, [pc, #292]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	4946      	ldr	r1, [pc, #280]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018f0:	4b45      	ldr	r3, [pc, #276]	@ (8001a08 <HAL_RCC_OscConfig+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff faad 	bl	8000e54 <HAL_InitTick>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d043      	beq.n	8001988 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e249      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d023      	beq.n	8001954 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3c      	ldr	r2, [pc, #240]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fae8 	bl	8000eec <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fae4 	bl	8000eec <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e232      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001932:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	061b      	lsls	r3, r3, #24
 800194c:	492d      	ldr	r1, [pc, #180]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
 8001952:	e01a      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001954:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2a      	ldr	r2, [pc, #168]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 800195a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800195e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fac4 	bl	8000eec <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001968:	f7ff fac0 	bl	8000eec <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e20e      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800197a:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x1e0>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d041      	beq.n	8001a1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a4:	4a17      	ldr	r2, [pc, #92]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff fa9d 	bl	8000eec <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fa99 	bl	8000eec <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1e7      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80019ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ef      	beq.n	80019b6 <HAL_RCC_OscConfig+0x22e>
 80019d6:	e020      	b.n	8001a1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019de:	4a09      	ldr	r2, [pc, #36]	@ (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff fa80 	bl	8000eec <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ee:	e00d      	b.n	8001a0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff fa7c 	bl	8000eec <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d906      	bls.n	8001a0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1ca      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ea      	bne.n	80019f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80a6 	beq.w	8001b74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a2c:	4b84      	ldr	r3, [pc, #528]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2b4>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x2b6>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00d      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	4a7e      	ldr	r2, [pc, #504]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	4b79      	ldr	r3, [pc, #484]	@ (8001c44 <HAL_RCC_OscConfig+0x4bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a6a:	4b76      	ldr	r3, [pc, #472]	@ (8001c44 <HAL_RCC_OscConfig+0x4bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a75      	ldr	r2, [pc, #468]	@ (8001c44 <HAL_RCC_OscConfig+0x4bc>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa39 	bl	8000eec <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fa35 	bl	8000eec <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e183      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a90:	4b6c      	ldr	r3, [pc, #432]	@ (8001c44 <HAL_RCC_OscConfig+0x4bc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x32e>
 8001aa4:	4b66      	ldr	r3, [pc, #408]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aaa:	4a65      	ldr	r2, [pc, #404]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ab4:	e024      	b.n	8001b00 <HAL_RCC_OscConfig+0x378>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d110      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x358>
 8001abe:	4b60      	ldr	r3, [pc, #384]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ace:	4b5c      	ldr	r3, [pc, #368]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ade:	e00f      	b.n	8001b00 <HAL_RCC_OscConfig+0x378>
 8001ae0:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae6:	4a56      	ldr	r2, [pc, #344]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001af0:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af6:	4a52      	ldr	r2, [pc, #328]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001af8:	f023 0304 	bic.w	r3, r3, #4
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d016      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f9f0 	bl	8000eec <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff f9ec 	bl	8000eec <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e138      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b26:	4b46      	ldr	r3, [pc, #280]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ed      	beq.n	8001b10 <HAL_RCC_OscConfig+0x388>
 8001b34:	e015      	b.n	8001b62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7ff f9d9 	bl	8000eec <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f9d5 	bl	8000eec <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e121      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b54:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ed      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b62:	7ffb      	ldrb	r3, [r7, #31]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b35      	ldr	r3, [pc, #212]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b88:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f9a8 	bl	8000eec <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba0:	f7ff f9a4 	bl	8000eec <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0f2      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bb2:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ef      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x418>
 8001bc0:	e01b      	b.n	8001bfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f98b 	bl	8000eec <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bda:	f7ff f987 	bl	8000eec <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0d5      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ef      	bne.n	8001bda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80c9 	beq.w	8001d96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	f000 8083 	beq.w	8001d18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d15e      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_RCC_OscConfig+0x4b8>)
 8001c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f961 	bl	8000eec <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e00c      	b.n	8001c48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f95d 	bl	8000eec <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d905      	bls.n	8001c48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0ab      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	4b55      	ldr	r3, [pc, #340]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c54:	4b52      	ldr	r3, [pc, #328]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b52      	ldr	r3, [pc, #328]	@ (8001da4 <HAL_RCC_OscConfig+0x61c>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6a11      	ldr	r1, [r2, #32]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c64:	3a01      	subs	r2, #1
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001c6e:	0212      	lsls	r2, r2, #8
 8001c70:	4311      	orrs	r1, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c76:	0852      	lsrs	r2, r2, #1
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	0552      	lsls	r2, r2, #21
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c82:	0852      	lsrs	r2, r2, #1
 8001c84:	3a01      	subs	r2, #1
 8001c86:	0652      	lsls	r2, r2, #25
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c8e:	06d2      	lsls	r2, r2, #27
 8001c90:	430a      	orrs	r2, r1
 8001c92:	4943      	ldr	r1, [pc, #268]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c98:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a40      	ldr	r2, [pc, #256]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f91c 	bl	8000eec <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f918 	bl	8000eec <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e066      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x530>
 8001cd6:	e05e      	b.n	8001d96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a30      	ldr	r2, [pc, #192]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f902 	bl	8000eec <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f8fe 	bl	8000eec <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e04c      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfe:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d0a:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	4924      	ldr	r1, [pc, #144]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001d10:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <HAL_RCC_OscConfig+0x620>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	60cb      	str	r3, [r1, #12]
 8001d16:	e03e      	b.n	8001d96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e039      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d24:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <HAL_RCC_OscConfig+0x618>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0203 	and.w	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d12c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	3b01      	subs	r3, #1
 8001d44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d123      	bne.n	8001d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d11b      	bne.n	8001d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d113      	bne.n	8001d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d109      	bne.n	8001d92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	019f800c 	.word	0x019f800c
 8001da8:	feeefffc 	.word	0xfeeefffc

08001dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e11e      	b.n	8002002 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b91      	ldr	r3, [pc, #580]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d910      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 020f 	bic.w	r2, r3, #15
 8001dda:	498c      	ldr	r1, [pc, #560]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b8a      	ldr	r3, [pc, #552]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e106      	b.n	8002002 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d073      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d129      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	4b81      	ldr	r3, [pc, #516]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0f4      	b.n	8002002 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e18:	f000 f99e 	bl	8002158 <RCC_GetSysClockFreqFromPLLSource>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4a7c      	ldr	r2, [pc, #496]	@ (8002014 <HAL_RCC_ClockConfig+0x268>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d93f      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e26:	4b7a      	ldr	r3, [pc, #488]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d033      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d12f      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e46:	4b72      	ldr	r3, [pc, #456]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e4e:	4a70      	ldr	r2, [pc, #448]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e024      	b.n	8001ea6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e64:	4b6a      	ldr	r3, [pc, #424]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0c6      	b.n	8002002 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e74:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0be      	b.n	8002002 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e84:	f000 f8ce 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4a61      	ldr	r2, [pc, #388]	@ (8002014 <HAL_RCC_ClockConfig+0x268>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d909      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e92:	4b5f      	ldr	r3, [pc, #380]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4957      	ldr	r1, [pc, #348]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f818 	bl	8000eec <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff f814 	bl	8000eec <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e095      	b.n	8002002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d023      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b43      	ldr	r3, [pc, #268]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a42      	ldr	r2, [pc, #264]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f18:	4b3d      	ldr	r3, [pc, #244]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001f20:	4a3b      	ldr	r2, [pc, #236]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4936      	ldr	r1, [pc, #216]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b80      	cmp	r3, #128	@ 0x80
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f42:	4b33      	ldr	r3, [pc, #204]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001f48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d21d      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 020f 	bic.w	r2, r3, #15
 8001f64:	4929      	ldr	r1, [pc, #164]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe ffbe 	bl	8000eec <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe ffba 	bl	8000eec <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e03b      	b.n	8002002 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_RCC_ClockConfig+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1ed      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4917      	ldr	r1, [pc, #92]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	490f      	ldr	r1, [pc, #60]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd6:	f000 f825 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_RCC_ClockConfig+0x264>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490c      	ldr	r1, [pc, #48]	@ (8002018 <HAL_RCC_ClockConfig+0x26c>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <HAL_RCC_ClockConfig+0x270>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_RCC_ClockConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe ff2a 	bl	8000e54 <HAL_InitTick>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000
 8002010:	40021000 	.word	0x40021000
 8002014:	04c4b400 	.word	0x04c4b400
 8002018:	08005d04 	.word	0x08005d04
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800202a:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d102      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002036:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e047      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d102      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002048:	4b26      	ldr	r3, [pc, #152]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e03e      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800204e:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d136      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800205a:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002064:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3301      	adds	r3, #1
 8002070:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d10c      	bne.n	8002092 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002078:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002082:	68d2      	ldr	r2, [r2, #12]
 8002084:	0a12      	lsrs	r2, r2, #8
 8002086:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
      break;
 8002090:	e00c      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002092:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800209c:	68d2      	ldr	r2, [r2, #12]
 800209e:	0a12      	lsrs	r2, r2, #8
 80020a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020a4:	fb02 f303 	mul.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
      break;
 80020aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0e5b      	lsrs	r3, r3, #25
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e001      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020cc:	693b      	ldr	r3, [r7, #16]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	016e3600 	.word	0x016e3600

080020e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002104:	f7ff fff0 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4904      	ldr	r1, [pc, #16]	@ (8002128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	08005d14 	.word	0x08005d14

0800212c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002130:	f7ff ffda 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0adb      	lsrs	r3, r3, #11
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4904      	ldr	r1, [pc, #16]	@ (8002154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08005d14 	.word	0x08005d14

08002158 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002168:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3301      	adds	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d10c      	bne.n	8002196 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800217c:	4a17      	ldr	r2, [pc, #92]	@ (80021dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002186:	68d2      	ldr	r2, [r2, #12]
 8002188:	0a12      	lsrs	r2, r2, #8
 800218a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	617b      	str	r3, [r7, #20]
    break;
 8002194:	e00c      	b.n	80021b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4a0e      	ldr	r2, [pc, #56]	@ (80021d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	0a12      	lsrs	r2, r2, #8
 80021a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    break;
 80021ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b0:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0e5b      	lsrs	r3, r3, #25
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	3301      	adds	r3, #1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021ca:	687b      	ldr	r3, [r7, #4]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40021000 	.word	0x40021000
 80021dc:	016e3600 	.word	0x016e3600
 80021e0:	00f42400 	.word	0x00f42400

080021e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021ec:	2300      	movs	r3, #0
 80021ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021f0:	2300      	movs	r3, #0
 80021f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8098 	beq.w	8002332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	4b40      	ldr	r3, [pc, #256]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	4a3f      	ldr	r2, [pc, #252]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221c:	6593      	str	r3, [r2, #88]	@ 0x58
 800221e:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222a:	2301      	movs	r3, #1
 800222c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222e:	4b3a      	ldr	r3, [pc, #232]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a39      	ldr	r2, [pc, #228]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800223a:	f7fe fe57 	bl	8000eec <HAL_GetTick>
 800223e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002240:	e009      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fe53 	bl	8000eec <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d902      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	74fb      	strb	r3, [r7, #19]
        break;
 8002254:	e005      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002256:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0ef      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d159      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002268:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002272:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d01e      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d019      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002290:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002296:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b0:	4a18      	ldr	r2, [pc, #96]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d016      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe fe13 	bl	8000eec <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c8:	e00b      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fe0f 	bl	8000eec <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d902      	bls.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	74fb      	strb	r3, [r7, #19]
            break;
 80022e0:	e006      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ec      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f6:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002304:	4903      	ldr	r1, [pc, #12]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800230c:	e008      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	74bb      	strb	r3, [r7, #18]
 8002312:	e005      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002320:	7c7b      	ldrb	r3, [r7, #17]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4ba7      	ldr	r3, [pc, #668]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4aa6      	ldr	r2, [pc, #664]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233e:	4ba1      	ldr	r3, [pc, #644]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002344:	f023 0203 	bic.w	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	499d      	ldr	r1, [pc, #628]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002360:	4b98      	ldr	r3, [pc, #608]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f023 020c 	bic.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4995      	ldr	r1, [pc, #596]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002382:	4b90      	ldr	r3, [pc, #576]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002388:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	498c      	ldr	r1, [pc, #560]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a4:	4b87      	ldr	r3, [pc, #540]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	4984      	ldr	r1, [pc, #528]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023c6:	4b7f      	ldr	r3, [pc, #508]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	497b      	ldr	r1, [pc, #492]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e8:	4b76      	ldr	r3, [pc, #472]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	4973      	ldr	r1, [pc, #460]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800240a:	4b6e      	ldr	r3, [pc, #440]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	496a      	ldr	r1, [pc, #424]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800242c:	4b65      	ldr	r3, [pc, #404]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4962      	ldr	r1, [pc, #392]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800244e:	4b5d      	ldr	r3, [pc, #372]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002454:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	4959      	ldr	r1, [pc, #356]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002470:	4b54      	ldr	r3, [pc, #336]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247e:	4951      	ldr	r1, [pc, #324]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002492:	4b4c      	ldr	r3, [pc, #304]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002498:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	4948      	ldr	r1, [pc, #288]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b4:	4b43      	ldr	r3, [pc, #268]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4940      	ldr	r1, [pc, #256]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d4:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a3a      	ldr	r2, [pc, #232]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ec:	4b35      	ldr	r3, [pc, #212]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fa:	4932      	ldr	r1, [pc, #200]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800250a:	d105      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800250c:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a2c      	ldr	r2, [pc, #176]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002516:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002524:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002532:	4924      	ldr	r1, [pc, #144]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002542:	d105      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002544:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a1e      	ldr	r2, [pc, #120]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800254e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800255c:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256a:	4916      	ldr	r1, [pc, #88]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002576:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800257a:	d105      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a10      	ldr	r2, [pc, #64]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002586:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d019      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4908      	ldr	r1, [pc, #32]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025b2:	d109      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a02      	ldr	r2, [pc, #8]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025be:	60d3      	str	r3, [r2, #12]
 80025c0:	e002      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4926      	ldr	r1, [pc, #152]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025f4:	4b21      	ldr	r3, [pc, #132]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a20      	ldr	r2, [pc, #128]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261a:	4918      	ldr	r1, [pc, #96]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a12      	ldr	r2, [pc, #72]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002636:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002644:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800264a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	490a      	ldr	r1, [pc, #40]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a04      	ldr	r2, [pc, #16]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800266e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002670:	7cbb      	ldrb	r3, [r7, #18]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	460b      	mov	r3, r1
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e05b      	b.n	8002750 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7fe fb24 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2224      	movs	r2, #36	@ 0x24
 80026b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_MultiProcessor_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 ff7f 	bl	80035d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fc80 	bl	8002fdc <UART_SetConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_MultiProcessor_Init+0x66>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e034      	b.n	8002750 <HAL_MultiProcessor_Init+0xd0>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002704:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800270c:	d10a      	bne.n	8002724 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	061a      	lsls	r2, r3, #24
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 ffe5 	bl	8003718 <UART_CheckIdleState>
 800274e:	4603      	mov	r3, r0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002758:	b480      	push	{r7}
 800275a:	b091      	sub	sp, #68	@ 0x44
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	2b20      	cmp	r3, #32
 800276e:	d178      	bne.n	8002862 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_UART_Transmit_IT+0x24>
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e071      	b.n	8002864 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	88fa      	ldrh	r2, [r7, #6]
 800278a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	88fa      	ldrh	r2, [r7, #6]
 8002792:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2221      	movs	r2, #33	@ 0x21
 80027a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b4:	d12a      	bne.n	800280c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027be:	d107      	bne.n	80027d0 <HAL_UART_Transmit_IT+0x78>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a29      	ldr	r2, [pc, #164]	@ (8002870 <HAL_UART_Transmit_IT+0x118>)
 80027cc:	679a      	str	r2, [r3, #120]	@ 0x78
 80027ce:	e002      	b.n	80027d6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a28      	ldr	r2, [pc, #160]	@ (8002874 <HAL_UART_Transmit_IT+0x11c>)
 80027d4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3308      	adds	r3, #8
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3308      	adds	r3, #8
 80027f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80027f8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e5      	bne.n	80027d6 <HAL_UART_Transmit_IT+0x7e>
 800280a:	e028      	b.n	800285e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002814:	d107      	bne.n	8002826 <HAL_UART_Transmit_IT+0xce>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a15      	ldr	r2, [pc, #84]	@ (8002878 <HAL_UART_Transmit_IT+0x120>)
 8002822:	679a      	str	r2, [r3, #120]	@ 0x78
 8002824:	e002      	b.n	800282c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <HAL_UART_Transmit_IT+0x124>)
 800282a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	613b      	str	r3, [r7, #16]
   return(result);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	69f9      	ldr	r1, [r7, #28]
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	61bb      	str	r3, [r7, #24]
   return(result);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e6      	bne.n	800282c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
  }
}
 8002864:	4618      	mov	r0, r3
 8002866:	3744      	adds	r7, #68	@ 0x44
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	08003edf 	.word	0x08003edf
 8002874:	08003dff 	.word	0x08003dff
 8002878:	08003d3d 	.word	0x08003d3d
 800287c:	08003c85 	.word	0x08003c85

08002880 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002894:	2b20      	cmp	r3, #32
 8002896:	d137      	bne.n	8002908 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_UART_Receive_IT+0x24>
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e030      	b.n	800290a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a18      	ldr	r2, [pc, #96]	@ (8002914 <HAL_UART_Receive_IT+0x94>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d01f      	beq.n	80028f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d018      	beq.n	80028f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	e853 3f00 	ldrex	r3, [r3]
 80028d2:	613b      	str	r3, [r7, #16]
   return(result);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	69f9      	ldr	r1, [r7, #28]
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e6      	bne.n	80028c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f001 f822 	bl	8003948 <UART_Start_Receive_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	e000      	b.n	800290a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3728      	adds	r7, #40	@ 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40008000 	.word	0x40008000

08002918 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0ba      	sub	sp, #232	@ 0xe8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800293e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002942:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002946:	4013      	ands	r3, r2
 8002948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800294c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11b      	bne.n	800298c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800296c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8300 	beq.w	8002f82 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
      }
      return;
 800298a:	e2fa      	b.n	8002f82 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800298c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8123 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002996:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800299a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bd0 <HAL_UART_IRQHandler+0x2b8>)
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80029a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029a6:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd4 <HAL_UART_IRQHandler+0x2bc>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8116 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <HAL_UART_IRQHandler+0xc8>
 80029bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d011      	beq.n	8002a10 <HAL_UART_IRQHandler+0xf8>
 80029ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2202      	movs	r2, #2
 80029fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f043 0204 	orr.w	r2, r3, #4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d011      	beq.n	8002a40 <HAL_UART_IRQHandler+0x128>
 8002a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d017      	beq.n	8002a7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d105      	bne.n	8002a64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_UART_IRQHandler+0x2b8>)
 8002a5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_UART_IRQHandler+0x196>
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8266 	beq.w	8002f86 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d013      	beq.n	8002aee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b40      	cmp	r3, #64	@ 0x40
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d054      	beq.n	8002bbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f001 f83a 	bl	8003b8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d146      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1d9      	bne.n	8002b26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d017      	beq.n	8002bac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b82:	4a15      	ldr	r2, [pc, #84]	@ (8002bd8 <HAL_UART_IRQHandler+0x2c0>)
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fb21 	bl	80011d4 <HAL_DMA_Abort_IT>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d019      	beq.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002baa:	e00f      	b.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f9ff 	bl	8002fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb2:	e00b      	b.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f9fb 	bl	8002fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bba:	e007      	b.n	8002bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f9f7 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002bca:	e1dc      	b.n	8002f86 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	bf00      	nop
    return;
 8002bce:	e1da      	b.n	8002f86 <HAL_UART_IRQHandler+0x66e>
 8002bd0:	10000001 	.word	0x10000001
 8002bd4:	04000120 	.word	0x04000120
 8002bd8:	08003c59 	.word	0x08003c59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8170 	bne.w	8002ec6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8169 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8162 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	2b40      	cmp	r3, #64	@ 0x40
 8002c16:	f040 80d8 	bne.w	8002dca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80af 	beq.w	8002d90 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002c38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	f080 80a7 	bcs.w	8002d90 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 8087 	bne.w	8002d6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1da      	bne.n	8002c60 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3308      	adds	r3, #8
 8002cb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e1      	bne.n	8002caa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3308      	adds	r3, #8
 8002cec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3308      	adds	r3, #8
 8002d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d3c:	f023 0310 	bic.w	r3, r3, #16
 8002d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e4      	bne.n	8002d2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe f9da 	bl	8001122 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f91b 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d8e:	e0fc      	b.n	8002f8a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	f040 80f5 	bne.w	8002f8a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	f040 80eb 	bne.w	8002f8a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8fe 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
      return;
 8002dc8:	e0df      	b.n	8002f8a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80d1 	beq.w	8002f8e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80cc 	beq.w	8002f8e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e4      	bne.n	8002df6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3308      	adds	r3, #8
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e54:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5c:	e841 2300 	strex	r3, r2, [r1]
 8002e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e1      	bne.n	8002e2c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f023 0310 	bic.w	r3, r3, #16
 8002e90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	69b9      	ldr	r1, [r7, #24]
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	e841 2300 	strex	r3, r2, [r1]
 8002eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e4      	bne.n	8002e7c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f880 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ec4:	e063      	b.n	8002f8e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x5d8>
 8002ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f001 fdb9 	bl	8004a60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eee:	e051      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d014      	beq.n	8002f26 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d03a      	beq.n	8002f92 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
    }
    return;
 8002f24:	e035      	b.n	8002f92 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_UART_IRQHandler+0x62e>
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f001 f842 	bl	8003fc8 <UART_EndTransmit_IT>
    return;
 8002f44:	e026      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_UART_IRQHandler+0x64e>
 8002f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f001 fd92 	bl	8004a88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f64:	e016      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d010      	beq.n	8002f94 <HAL_UART_IRQHandler+0x67c>
 8002f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da0c      	bge.n	8002f94 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f001 fd7a 	bl	8004a74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f80:	e008      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f82:	bf00      	nop
 8002f84:	e006      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f86:	bf00      	nop
 8002f88:	e004      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f92:	bf00      	nop
  }
}
 8002f94:	37e8      	adds	r7, #232	@ 0xe8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop

08002f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b08c      	sub	sp, #48	@ 0x30
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4313      	orrs	r3, r2
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4baa      	ldr	r3, [pc, #680]	@ (80032b4 <UART_SetConfig+0x2d8>)
 800300c:	4013      	ands	r3, r2
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003014:	430b      	orrs	r3, r1
 8003016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a9f      	ldr	r2, [pc, #636]	@ (80032b8 <UART_SetConfig+0x2dc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003044:	4313      	orrs	r3, r2
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003052:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	f023 010f 	bic.w	r1, r3, #15
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a90      	ldr	r2, [pc, #576]	@ (80032bc <UART_SetConfig+0x2e0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d125      	bne.n	80030cc <UART_SetConfig+0xf0>
 8003080:	4b8f      	ldr	r3, [pc, #572]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b03      	cmp	r3, #3
 800308c:	d81a      	bhi.n	80030c4 <UART_SetConfig+0xe8>
 800308e:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <UART_SetConfig+0xb8>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030b5 	.word	0x080030b5
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030bd 	.word	0x080030bd
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030aa:	e116      	b.n	80032da <UART_SetConfig+0x2fe>
 80030ac:	2302      	movs	r3, #2
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b2:	e112      	b.n	80032da <UART_SetConfig+0x2fe>
 80030b4:	2304      	movs	r3, #4
 80030b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ba:	e10e      	b.n	80032da <UART_SetConfig+0x2fe>
 80030bc:	2308      	movs	r3, #8
 80030be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c2:	e10a      	b.n	80032da <UART_SetConfig+0x2fe>
 80030c4:	2310      	movs	r3, #16
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ca:	e106      	b.n	80032da <UART_SetConfig+0x2fe>
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a7c      	ldr	r2, [pc, #496]	@ (80032c4 <UART_SetConfig+0x2e8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d138      	bne.n	8003148 <UART_SetConfig+0x16c>
 80030d6:	4b7a      	ldr	r3, [pc, #488]	@ (80032c0 <UART_SetConfig+0x2e4>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	d82d      	bhi.n	8003140 <UART_SetConfig+0x164>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <UART_SetConfig+0x110>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003141 	.word	0x08003141
 80030f4:	08003141 	.word	0x08003141
 80030f8:	08003141 	.word	0x08003141
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003141 	.word	0x08003141
 8003104:	08003141 	.word	0x08003141
 8003108:	08003141 	.word	0x08003141
 800310c:	08003129 	.word	0x08003129
 8003110:	08003141 	.word	0x08003141
 8003114:	08003141 	.word	0x08003141
 8003118:	08003141 	.word	0x08003141
 800311c:	08003139 	.word	0x08003139
 8003120:	2300      	movs	r3, #0
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003126:	e0d8      	b.n	80032da <UART_SetConfig+0x2fe>
 8003128:	2302      	movs	r3, #2
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800312e:	e0d4      	b.n	80032da <UART_SetConfig+0x2fe>
 8003130:	2304      	movs	r3, #4
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003136:	e0d0      	b.n	80032da <UART_SetConfig+0x2fe>
 8003138:	2308      	movs	r3, #8
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800313e:	e0cc      	b.n	80032da <UART_SetConfig+0x2fe>
 8003140:	2310      	movs	r3, #16
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003146:	e0c8      	b.n	80032da <UART_SetConfig+0x2fe>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5e      	ldr	r2, [pc, #376]	@ (80032c8 <UART_SetConfig+0x2ec>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d125      	bne.n	800319e <UART_SetConfig+0x1c2>
 8003152:	4b5b      	ldr	r3, [pc, #364]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800315c:	2b30      	cmp	r3, #48	@ 0x30
 800315e:	d016      	beq.n	800318e <UART_SetConfig+0x1b2>
 8003160:	2b30      	cmp	r3, #48	@ 0x30
 8003162:	d818      	bhi.n	8003196 <UART_SetConfig+0x1ba>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d00a      	beq.n	800317e <UART_SetConfig+0x1a2>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d814      	bhi.n	8003196 <UART_SetConfig+0x1ba>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <UART_SetConfig+0x19a>
 8003170:	2b10      	cmp	r3, #16
 8003172:	d008      	beq.n	8003186 <UART_SetConfig+0x1aa>
 8003174:	e00f      	b.n	8003196 <UART_SetConfig+0x1ba>
 8003176:	2300      	movs	r3, #0
 8003178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800317c:	e0ad      	b.n	80032da <UART_SetConfig+0x2fe>
 800317e:	2302      	movs	r3, #2
 8003180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003184:	e0a9      	b.n	80032da <UART_SetConfig+0x2fe>
 8003186:	2304      	movs	r3, #4
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800318c:	e0a5      	b.n	80032da <UART_SetConfig+0x2fe>
 800318e:	2308      	movs	r3, #8
 8003190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003194:	e0a1      	b.n	80032da <UART_SetConfig+0x2fe>
 8003196:	2310      	movs	r3, #16
 8003198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800319c:	e09d      	b.n	80032da <UART_SetConfig+0x2fe>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4a      	ldr	r2, [pc, #296]	@ (80032cc <UART_SetConfig+0x2f0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d125      	bne.n	80031f4 <UART_SetConfig+0x218>
 80031a8:	4b45      	ldr	r3, [pc, #276]	@ (80032c0 <UART_SetConfig+0x2e4>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b4:	d016      	beq.n	80031e4 <UART_SetConfig+0x208>
 80031b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b8:	d818      	bhi.n	80031ec <UART_SetConfig+0x210>
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d00a      	beq.n	80031d4 <UART_SetConfig+0x1f8>
 80031be:	2b80      	cmp	r3, #128	@ 0x80
 80031c0:	d814      	bhi.n	80031ec <UART_SetConfig+0x210>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <UART_SetConfig+0x1f0>
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d008      	beq.n	80031dc <UART_SetConfig+0x200>
 80031ca:	e00f      	b.n	80031ec <UART_SetConfig+0x210>
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d2:	e082      	b.n	80032da <UART_SetConfig+0x2fe>
 80031d4:	2302      	movs	r3, #2
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031da:	e07e      	b.n	80032da <UART_SetConfig+0x2fe>
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e2:	e07a      	b.n	80032da <UART_SetConfig+0x2fe>
 80031e4:	2308      	movs	r3, #8
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ea:	e076      	b.n	80032da <UART_SetConfig+0x2fe>
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f2:	e072      	b.n	80032da <UART_SetConfig+0x2fe>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a35      	ldr	r2, [pc, #212]	@ (80032d0 <UART_SetConfig+0x2f4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12a      	bne.n	8003254 <UART_SetConfig+0x278>
 80031fe:	4b30      	ldr	r3, [pc, #192]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320c:	d01a      	beq.n	8003244 <UART_SetConfig+0x268>
 800320e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003212:	d81b      	bhi.n	800324c <UART_SetConfig+0x270>
 8003214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003218:	d00c      	beq.n	8003234 <UART_SetConfig+0x258>
 800321a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800321e:	d815      	bhi.n	800324c <UART_SetConfig+0x270>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <UART_SetConfig+0x250>
 8003224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003228:	d008      	beq.n	800323c <UART_SetConfig+0x260>
 800322a:	e00f      	b.n	800324c <UART_SetConfig+0x270>
 800322c:	2300      	movs	r3, #0
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003232:	e052      	b.n	80032da <UART_SetConfig+0x2fe>
 8003234:	2302      	movs	r3, #2
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323a:	e04e      	b.n	80032da <UART_SetConfig+0x2fe>
 800323c:	2304      	movs	r3, #4
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003242:	e04a      	b.n	80032da <UART_SetConfig+0x2fe>
 8003244:	2308      	movs	r3, #8
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324a:	e046      	b.n	80032da <UART_SetConfig+0x2fe>
 800324c:	2310      	movs	r3, #16
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003252:	e042      	b.n	80032da <UART_SetConfig+0x2fe>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a17      	ldr	r2, [pc, #92]	@ (80032b8 <UART_SetConfig+0x2dc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d13a      	bne.n	80032d4 <UART_SetConfig+0x2f8>
 800325e:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <UART_SetConfig+0x2e4>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326c:	d01a      	beq.n	80032a4 <UART_SetConfig+0x2c8>
 800326e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003272:	d81b      	bhi.n	80032ac <UART_SetConfig+0x2d0>
 8003274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003278:	d00c      	beq.n	8003294 <UART_SetConfig+0x2b8>
 800327a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327e:	d815      	bhi.n	80032ac <UART_SetConfig+0x2d0>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <UART_SetConfig+0x2b0>
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d008      	beq.n	800329c <UART_SetConfig+0x2c0>
 800328a:	e00f      	b.n	80032ac <UART_SetConfig+0x2d0>
 800328c:	2300      	movs	r3, #0
 800328e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003292:	e022      	b.n	80032da <UART_SetConfig+0x2fe>
 8003294:	2302      	movs	r3, #2
 8003296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800329a:	e01e      	b.n	80032da <UART_SetConfig+0x2fe>
 800329c:	2304      	movs	r3, #4
 800329e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032a2:	e01a      	b.n	80032da <UART_SetConfig+0x2fe>
 80032a4:	2308      	movs	r3, #8
 80032a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032aa:	e016      	b.n	80032da <UART_SetConfig+0x2fe>
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032b2:	e012      	b.n	80032da <UART_SetConfig+0x2fe>
 80032b4:	cfff69f3 	.word	0xcfff69f3
 80032b8:	40008000 	.word	0x40008000
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	40004800 	.word	0x40004800
 80032cc:	40004c00 	.word	0x40004c00
 80032d0:	40005000 	.word	0x40005000
 80032d4:	2310      	movs	r3, #16
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4aae      	ldr	r2, [pc, #696]	@ (8003598 <UART_SetConfig+0x5bc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 8097 	bne.w	8003414 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d823      	bhi.n	8003336 <UART_SetConfig+0x35a>
 80032ee:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <UART_SetConfig+0x318>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003337 	.word	0x08003337
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003337 	.word	0x08003337
 8003304:	08003327 	.word	0x08003327
 8003308:	08003337 	.word	0x08003337
 800330c:	08003337 	.word	0x08003337
 8003310:	08003337 	.word	0x08003337
 8003314:	0800332f 	.word	0x0800332f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7fe fef2 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800331c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800331e:	e010      	b.n	8003342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4b9e      	ldr	r3, [pc, #632]	@ (800359c <UART_SetConfig+0x5c0>)
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003324:	e00d      	b.n	8003342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7fe fe7d 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 800332a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800332c:	e009      	b.n	8003342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003334:	e005      	b.n	8003342 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8130 	beq.w	80035aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	4a94      	ldr	r2, [pc, #592]	@ (80035a0 <UART_SetConfig+0x5c4>)
 8003350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003354:	461a      	mov	r2, r3
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	fbb3 f3f2 	udiv	r3, r3, r2
 800335c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d305      	bcc.n	800337a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	429a      	cmp	r2, r3
 8003378:	d903      	bls.n	8003382 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003380:	e113      	b.n	80035aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	2200      	movs	r2, #0
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	60fa      	str	r2, [r7, #12]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	4a84      	ldr	r2, [pc, #528]	@ (80035a0 <UART_SetConfig+0x5c4>)
 8003390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003394:	b29b      	uxth	r3, r3
 8003396:	2200      	movs	r2, #0
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033a4:	f7fc ffa4 	bl	80002f0 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	020b      	lsls	r3, r1, #8
 80033ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033be:	0202      	lsls	r2, r0, #8
 80033c0:	6979      	ldr	r1, [r7, #20]
 80033c2:	6849      	ldr	r1, [r1, #4]
 80033c4:	0849      	lsrs	r1, r1, #1
 80033c6:	2000      	movs	r0, #0
 80033c8:	460c      	mov	r4, r1
 80033ca:	4605      	mov	r5, r0
 80033cc:	eb12 0804 	adds.w	r8, r2, r4
 80033d0:	eb43 0905 	adc.w	r9, r3, r5
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	469a      	mov	sl, r3
 80033dc:	4693      	mov	fp, r2
 80033de:	4652      	mov	r2, sl
 80033e0:	465b      	mov	r3, fp
 80033e2:	4640      	mov	r0, r8
 80033e4:	4649      	mov	r1, r9
 80033e6:	f7fc ff83 	bl	80002f0 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4613      	mov	r3, r2
 80033f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033f8:	d308      	bcc.n	800340c <UART_SetConfig+0x430>
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003400:	d204      	bcs.n	800340c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a3a      	ldr	r2, [r7, #32]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	e0ce      	b.n	80035aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003412:	e0ca      	b.n	80035aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800341c:	d166      	bne.n	80034ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800341e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003422:	2b08      	cmp	r3, #8
 8003424:	d827      	bhi.n	8003476 <UART_SetConfig+0x49a>
 8003426:	a201      	add	r2, pc, #4	@ (adr r2, 800342c <UART_SetConfig+0x450>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003451 	.word	0x08003451
 8003430:	08003459 	.word	0x08003459
 8003434:	08003461 	.word	0x08003461
 8003438:	08003477 	.word	0x08003477
 800343c:	08003467 	.word	0x08003467
 8003440:	08003477 	.word	0x08003477
 8003444:	08003477 	.word	0x08003477
 8003448:	08003477 	.word	0x08003477
 800344c:	0800346f 	.word	0x0800346f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003450:	f7fe fe56 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003456:	e014      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7fe fe68 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800345e:	e010      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003460:	4b4e      	ldr	r3, [pc, #312]	@ (800359c <UART_SetConfig+0x5c0>)
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003464:	e00d      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003466:	f7fe fddd 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 800346a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800346c:	e009      	b.n	8003482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003474:	e005      	b.n	8003482 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8090 	beq.w	80035aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	4a44      	ldr	r2, [pc, #272]	@ (80035a0 <UART_SetConfig+0x5c4>)
 8003490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003494:	461a      	mov	r2, r3
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	fbb3 f3f2 	udiv	r3, r3, r2
 800349c:	005a      	lsls	r2, r3, #1
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	441a      	add	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d916      	bls.n	80034e4 <UART_SetConfig+0x508>
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034bc:	d212      	bcs.n	80034e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f023 030f 	bic.w	r3, r3, #15
 80034c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	8bfb      	ldrh	r3, [r7, #30]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	8bfa      	ldrh	r2, [r7, #30]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	e062      	b.n	80035aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034ea:	e05e      	b.n	80035aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x56a>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0x520>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7fe fdee 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003526:	e014      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7fe fe00 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 800352c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800352e:	e010      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <UART_SetConfig+0x5c0>)
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003534:	e00d      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7fe fd75 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 800353a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800353c:	e009      	b.n	8003552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003544:	e005      	b.n	8003552 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003550:	bf00      	nop
    }

    if (pclk != 0U)
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d028      	beq.n	80035aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	4a10      	ldr	r2, [pc, #64]	@ (80035a0 <UART_SetConfig+0x5c4>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	fbb3 f2f2 	udiv	r2, r3, r2
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	441a      	add	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d910      	bls.n	80035a4 <UART_SetConfig+0x5c8>
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003588:	d20c      	bcs.n	80035a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	b29a      	uxth	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	e009      	b.n	80035aa <UART_SetConfig+0x5ce>
 8003596:	bf00      	nop
 8003598:	40008000 	.word	0x40008000
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	08005d1c 	.word	0x08005d1c
      }
      else
      {
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3730      	adds	r7, #48	@ 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01a      	beq.n	80036ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036d2:	d10a      	bne.n	80036ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b098      	sub	sp, #96	@ 0x60
 800371c:	af02      	add	r7, sp, #8
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003728:	f7fd fbe0 	bl	8000eec <HAL_GetTick>
 800372c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d12f      	bne.n	800379c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003744:	2200      	movs	r2, #0
 8003746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f88e 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800376a:	653b      	str	r3, [r7, #80]	@ 0x50
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003774:	647b      	str	r3, [r7, #68]	@ 0x44
 8003776:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800377a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e6      	bne.n	8003756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e063      	b.n	8003864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d149      	bne.n	800383e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	2200      	movs	r2, #0
 80037b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f857 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d03c      	beq.n	800383e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	623b      	str	r3, [r7, #32]
   return(result);
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e6      	bne.n	80037c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	60fb      	str	r3, [r7, #12]
   return(result);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3308      	adds	r3, #8
 8003814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003816:	61fa      	str	r2, [r7, #28]
 8003818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	617b      	str	r3, [r7, #20]
   return(result);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e012      	b.n	8003864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3758      	adds	r7, #88	@ 0x58
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387c:	e04f      	b.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d04b      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fd fb31 	bl	8000eec <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <UART_WaitOnFlagUntilTimeout+0x30>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e04e      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d037      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d034      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d031      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d110      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2208      	movs	r2, #8
 80038ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f95b 	bl	8003b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2208      	movs	r2, #8
 80038da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e029      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	d111      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f941 	bl	8003b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e00f      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	429a      	cmp	r2, r3
 800393a:	d0a0      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003948:	b480      	push	{r7}
 800394a:	b0a3      	sub	sp, #140	@ 0x8c
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397a:	d10e      	bne.n	800399a <UART_Start_Receive_IT+0x52>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <UART_Start_Receive_IT+0x48>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800398a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800398e:	e02d      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	22ff      	movs	r2, #255	@ 0xff
 8003994:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003998:	e028      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <UART_Start_Receive_IT+0x76>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <UART_Start_Receive_IT+0x6c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22ff      	movs	r2, #255	@ 0xff
 80039ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039b2:	e01b      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	227f      	movs	r2, #127	@ 0x7f
 80039b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039bc:	e016      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c6:	d10d      	bne.n	80039e4 <UART_Start_Receive_IT+0x9c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <UART_Start_Receive_IT+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	@ 0x7f
 80039d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039d8:	e008      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	223f      	movs	r2, #63	@ 0x3f
 80039de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80039e2:	e003      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2222      	movs	r2, #34	@ 0x22
 80039f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003a0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a20:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003a26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e3      	bne.n	80039fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a3c:	d14f      	bne.n	8003ade <UART_Start_Receive_IT+0x196>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d349      	bcc.n	8003ade <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a52:	d107      	bne.n	8003a64 <UART_Start_Receive_IT+0x11c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a47      	ldr	r2, [pc, #284]	@ (8003b7c <UART_Start_Receive_IT+0x234>)
 8003a60:	675a      	str	r2, [r3, #116]	@ 0x74
 8003a62:	e002      	b.n	8003a6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a46      	ldr	r2, [pc, #280]	@ (8003b80 <UART_Start_Receive_IT+0x238>)
 8003a68:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01a      	beq.n	8003aa8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a96:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003a9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e4      	bne.n	8003a72 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ac8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003aca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <UART_Start_Receive_IT+0x160>
 8003adc:	e046      	b.n	8003b6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae6:	d107      	bne.n	8003af8 <UART_Start_Receive_IT+0x1b0>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d103      	bne.n	8003af8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a24      	ldr	r2, [pc, #144]	@ (8003b84 <UART_Start_Receive_IT+0x23c>)
 8003af4:	675a      	str	r2, [r3, #116]	@ 0x74
 8003af6:	e002      	b.n	8003afe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <UART_Start_Receive_IT+0x240>)
 8003afc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d019      	beq.n	8003b3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003b1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b26:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e6      	bne.n	8003b06 <UART_Start_Receive_IT+0x1be>
 8003b38:	e018      	b.n	8003b6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	613b      	str	r3, [r7, #16]
   return(result);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f043 0320 	orr.w	r3, r3, #32
 8003b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	69f9      	ldr	r1, [r7, #28]
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	378c      	adds	r7, #140	@ 0x8c
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	080046f5 	.word	0x080046f5
 8003b80:	08004391 	.word	0x08004391
 8003b84:	080041d9 	.word	0x080041d9
 8003b88:	08004021 	.word	0x08004021

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b095      	sub	sp, #84	@ 0x54
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3308      	adds	r3, #8
 8003be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d118      	bne.n	8003c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c4c:	bf00      	nop
 8003c4e:	3754      	adds	r7, #84	@ 0x54
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff f99a 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b08f      	sub	sp, #60	@ 0x3c
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	2b21      	cmp	r3, #33	@ 0x21
 8003c94:	d14c      	bne.n	8003d30 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d132      	bne.n	8003d08 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e6      	bne.n	8003ca2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6979      	ldr	r1, [r7, #20]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e6      	bne.n	8003cd4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003d06:	e013      	b.n	8003d30 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003d30:	bf00      	nop
 8003d32:	373c      	adds	r7, #60	@ 0x3c
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b091      	sub	sp, #68	@ 0x44
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	2b21      	cmp	r3, #33	@ 0x21
 8003d4c:	d151      	bne.n	8003df2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d132      	bne.n	8003dc0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	623b      	str	r3, [r7, #32]
   return(result);
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e6      	bne.n	8003d5a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	617b      	str	r3, [r7, #20]
   return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e6      	bne.n	8003d8c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003dbe:	e018      	b.n	8003df2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8003df2:	bf00      	nop
 8003df4:	3744      	adds	r7, #68	@ 0x44
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b091      	sub	sp, #68	@ 0x44
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	2b21      	cmp	r3, #33	@ 0x21
 8003e0e:	d160      	bne.n	8003ed2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003e18:	e057      	b.n	8003eca <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d133      	bne.n	8003e8e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	623b      	str	r3, [r7, #32]
   return(result);
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	617b      	str	r3, [r7, #20]
   return(result);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e6      	bne.n	8003e5a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003e8c:	e021      	b.n	8003ed2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ec4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003eca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1a4      	bne.n	8003e1a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003ed0:	e7ff      	b.n	8003ed2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003ed2:	bf00      	nop
 8003ed4:	3744      	adds	r7, #68	@ 0x44
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b091      	sub	sp, #68	@ 0x44
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eec:	2b21      	cmp	r3, #33	@ 0x21
 8003eee:	d165      	bne.n	8003fbc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ef6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003ef8:	e05c      	b.n	8003fb4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d133      	bne.n	8003f6e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e5      	bne.n	8003f06 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	613b      	str	r3, [r7, #16]
   return(result);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e6      	bne.n	8003f3a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f6c:	e026      	b.n	8003fbc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d018      	beq.n	8003fae <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f80:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f90:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f96:	1c9a      	adds	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003fb4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d19f      	bne.n	8003efa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003fba:	e7ff      	b.n	8003fbc <UART_TxISR_16BIT_FIFOEN+0xde>
 8003fbc:	bf00      	nop
 8003fbe:	3744      	adds	r7, #68	@ 0x44
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6979      	ldr	r1, [r7, #20]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e6      	bne.n	8003fd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fe ffc3 	bl	8002f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004016:	bf00      	nop
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b09c      	sub	sp, #112	@ 0x70
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800402e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004038:	2b22      	cmp	r3, #34	@ 0x22
 800403a:	f040 80be 	bne.w	80041ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004048:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800404c:	b2d9      	uxtb	r1, r3
 800404e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	400a      	ands	r2, r1
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f040 80a1 	bne.w	80041ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e6      	bne.n	8004088 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3308      	adds	r3, #8
 80040c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80040da:	647a      	str	r2, [r7, #68]	@ 0x44
 80040dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a33      	ldr	r2, [pc, #204]	@ (80041d4 <UART_RxISR_8BIT+0x1b4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01f      	beq.n	800414c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d018      	beq.n	800414c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	623b      	str	r3, [r7, #32]
   return(result);
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800412e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004138:	633b      	str	r3, [r7, #48]	@ 0x30
 800413a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800413e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d12e      	bne.n	80041b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	60fb      	str	r3, [r7, #12]
   return(result);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0310 	bic.w	r3, r3, #16
 800416e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	617b      	str	r3, [r7, #20]
   return(result);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e6      	bne.n	800415a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b10      	cmp	r3, #16
 8004198:	d103      	bne.n	80041a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2210      	movs	r2, #16
 80041a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe ff0a 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041b0:	e00b      	b.n	80041ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fb08 	bl	80007c8 <HAL_UART_RxCpltCallback>
}
 80041b8:	e007      	b.n	80041ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0208 	orr.w	r2, r2, #8
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	3770      	adds	r7, #112	@ 0x70
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40008000 	.word	0x40008000

080041d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b09c      	sub	sp, #112	@ 0x70
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80041e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f0:	2b22      	cmp	r3, #34	@ 0x22
 80041f2:	f040 80be 	bne.w	8004372 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004206:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800420a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800420e:	4013      	ands	r3, r2
 8004210:	b29a      	uxth	r2, r3
 8004212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004214:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 80a1 	bne.w	8004382 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800424e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004254:	667b      	str	r3, [r7, #100]	@ 0x64
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800425e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004260:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004264:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800426c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3308      	adds	r3, #8
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	663b      	str	r3, [r7, #96]	@ 0x60
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004292:	643a      	str	r2, [r7, #64]	@ 0x40
 8004294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a33      	ldr	r2, [pc, #204]	@ (800438c <UART_RxISR_16BIT+0x1b4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d01f      	beq.n	8004304 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e6      	bne.n	80042d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d12e      	bne.n	800436a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 0310 	bic.w	r3, r3, #16
 8004326:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6979      	ldr	r1, [r7, #20]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b10      	cmp	r3, #16
 8004350:	d103      	bne.n	800435a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2210      	movs	r2, #16
 8004358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004360:	4619      	mov	r1, r3
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe fe2e 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004368:	e00b      	b.n	8004382 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fa2c 	bl	80007c8 <HAL_UART_RxCpltCallback>
}
 8004370:	e007      	b.n	8004382 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0208 	orr.w	r2, r2, #8
 8004380:	619a      	str	r2, [r3, #24]
}
 8004382:	bf00      	nop
 8004384:	3770      	adds	r7, #112	@ 0x70
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40008000 	.word	0x40008000

08004390 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b0ac      	sub	sp, #176	@ 0xb0
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800439e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043c6:	2b22      	cmp	r3, #34	@ 0x22
 80043c8:	f040 8183 	bne.w	80046d2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80043d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043d6:	e126      	b.n	8004626 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80043e6:	b2d9      	uxtb	r1, r3
 80043e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f2:	400a      	ands	r2, r1
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800441e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	2b00      	cmp	r3, #0
 8004428:	d053      	beq.n	80044d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800442a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d011      	beq.n	800445a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800445a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d011      	beq.n	800448a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2202      	movs	r2, #2
 8004478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800448a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d011      	beq.n	80044ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2204      	movs	r2, #4
 80044a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b0:	f043 0202 	orr.w	r2, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d006      	beq.n	80044d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fe fd73 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 80a3 	bne.w	8004626 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80044ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004502:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004504:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004508:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e4      	bne.n	80044e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800453e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004540:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004544:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800454c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e1      	bne.n	8004516 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a60      	ldr	r2, [pc, #384]	@ (80046ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d021      	beq.n	80045b4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01a      	beq.n	80045b4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800458c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80045a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80045ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e4      	bne.n	800457e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d130      	bne.n	800461e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d2:	f023 0310 	bic.w	r3, r3, #16
 80045d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80045e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e4      	bne.n	80045c2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b10      	cmp	r3, #16
 8004604:	d103      	bne.n	800460e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2210      	movs	r2, #16
 800460c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe fcd4 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800461c:	e00e      	b.n	800463c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc f8d2 	bl	80007c8 <HAL_UART_RxCpltCallback>
        break;
 8004624:	e00a      	b.n	800463c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004626:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800462e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	f47f aece 	bne.w	80043d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004642:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004646:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800464a:	2b00      	cmp	r3, #0
 800464c:	d049      	beq.n	80046e2 <UART_RxISR_8BIT_FIFOEN+0x352>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004654:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004658:	429a      	cmp	r2, r3
 800465a:	d242      	bcs.n	80046e2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3308      	adds	r3, #8
 8004662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	61fb      	str	r3, [r7, #28]
   return(result);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004680:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e3      	bne.n	800465c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004698:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f043 0320 	orr.w	r3, r3, #32
 80046ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e4      	bne.n	800469a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046d0:	e007      	b.n	80046e2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0208 	orr.w	r2, r2, #8
 80046e0:	619a      	str	r2, [r3, #24]
}
 80046e2:	bf00      	nop
 80046e4:	37b0      	adds	r7, #176	@ 0xb0
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40008000 	.word	0x40008000
 80046f0:	08004021 	.word	0x08004021

080046f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0ae      	sub	sp, #184	@ 0xb8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004702:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800472a:	2b22      	cmp	r3, #34	@ 0x22
 800472c:	f040 8187 	bne.w	8004a3e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004736:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800473a:	e12a      	b.n	8004992 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800474e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004752:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004756:	4013      	ands	r3, r2
 8004758:	b29a      	uxth	r2, r3
 800475a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800475e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	1c9a      	adds	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004786:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	2b00      	cmp	r3, #0
 8004790:	d053      	beq.n	800483a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d011      	beq.n	80047c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800479e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	f043 0201 	orr.w	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80047ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e8:	f043 0204 	orr.w	r2, r3, #4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80047fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2204      	movs	r2, #4
 8004810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	f043 0202 	orr.w	r2, r3, #2
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	2b00      	cmp	r3, #0
 800482a:	d006      	beq.n	800483a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fe fbbf 	bl	8002fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 80a5 	bne.w	8004992 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800485c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800486a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800486e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004872:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800487c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e2      	bne.n	8004848 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3308      	adds	r3, #8
 8004888:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80048aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e1      	bne.n	8004882 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a60      	ldr	r2, [pc, #384]	@ (8004a58 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d021      	beq.n	8004920 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01a      	beq.n	8004920 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800490c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800490e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004912:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800491a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e4      	bne.n	80048ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d130      	bne.n	800498a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800493c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493e:	f023 0310 	bic.w	r3, r3, #16
 8004942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44
 8004952:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800495e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e4      	bne.n	800492e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d103      	bne.n	800497a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fe fb1e 	bl	8002fc4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004988:	e00e      	b.n	80049a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fb ff1c 	bl	80007c8 <HAL_UART_RxCpltCallback>
        break;
 8004990:	e00a      	b.n	80049a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004992:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004996:	2b00      	cmp	r3, #0
 8004998:	d006      	beq.n	80049a8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800499a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f47f aeca 	bne.w	800473c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049ae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d049      	beq.n	8004a4e <UART_RxISR_16BIT_FIFOEN+0x35a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80049c0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d242      	bcs.n	8004a4e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	623b      	str	r3, [r7, #32]
   return(result);
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80049ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80049ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e3      	bne.n	80049c8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a16      	ldr	r2, [pc, #88]	@ (8004a5c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004a04:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f043 0320 	orr.w	r3, r3, #32
 8004a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	617b      	str	r3, [r7, #20]
   return(result);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e4      	bne.n	8004a06 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a3c:	e007      	b.n	8004a4e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0208 	orr.w	r2, r2, #8
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	37b8      	adds	r7, #184	@ 0xb8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40008000 	.word	0x40008000
 8004a5c:	080041d9 	.word	0x080041d9

08004a60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e027      	b.n	8004b02 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2224      	movs	r2, #36	@ 0x24
 8004abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004ae0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e02d      	b.n	8004b82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2224      	movs	r2, #36	@ 0x24
 8004b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f850 	bl	8004c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e02d      	b.n	8004bfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2224      	movs	r2, #36	@ 0x24
 8004bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f812 	bl	8004c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c28:	e031      	b.n	8004c8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c2e:	2308      	movs	r3, #8
 8004c30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	0e5b      	lsrs	r3, r3, #25
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	0f5b      	lsrs	r3, r3, #29
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c52:	7bbb      	ldrb	r3, [r7, #14]
 8004c54:	7b3a      	ldrb	r2, [r7, #12]
 8004c56:	4911      	ldr	r1, [pc, #68]	@ (8004c9c <UARTEx_SetNbDataToProcess+0x94>)
 8004c58:	5c8a      	ldrb	r2, [r1, r2]
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c5e:	7b3a      	ldrb	r2, [r7, #12]
 8004c60:	490f      	ldr	r1, [pc, #60]	@ (8004ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8004c62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	7b7a      	ldrb	r2, [r7, #13]
 8004c74:	4909      	ldr	r1, [pc, #36]	@ (8004c9c <UARTEx_SetNbDataToProcess+0x94>)
 8004c76:	5c8a      	ldrb	r2, [r1, r2]
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c7c:	7b7a      	ldrb	r2, [r7, #13]
 8004c7e:	4908      	ldr	r1, [pc, #32]	@ (8004ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8004c80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	08005d34 	.word	0x08005d34
 8004ca0:	08005d3c 	.word	0x08005d3c

08004ca4 <std>:
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	4604      	mov	r4, r0
 8004caa:	e9c0 3300 	strd	r3, r3, [r0]
 8004cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cb2:	6083      	str	r3, [r0, #8]
 8004cb4:	8181      	strh	r1, [r0, #12]
 8004cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cb8:	81c2      	strh	r2, [r0, #14]
 8004cba:	6183      	str	r3, [r0, #24]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	305c      	adds	r0, #92	@ 0x5c
 8004cc2:	f000 f8f4 	bl	8004eae <memset>
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <std+0x58>)
 8004cc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cca:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <std+0x5c>)
 8004ccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cce:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <std+0x60>)
 8004cd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <std+0x64>)
 8004cd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <std+0x68>)
 8004cd8:	6224      	str	r4, [r4, #32]
 8004cda:	429c      	cmp	r4, r3
 8004cdc:	d006      	beq.n	8004cec <std+0x48>
 8004cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ce2:	4294      	cmp	r4, r2
 8004ce4:	d002      	beq.n	8004cec <std+0x48>
 8004ce6:	33d0      	adds	r3, #208	@ 0xd0
 8004ce8:	429c      	cmp	r4, r3
 8004cea:	d105      	bne.n	8004cf8 <std+0x54>
 8004cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf4:	f000 b9b0 	b.w	8005058 <__retarget_lock_init_recursive>
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	bf00      	nop
 8004cfc:	08004e29 	.word	0x08004e29
 8004d00:	08004e4b 	.word	0x08004e4b
 8004d04:	08004e83 	.word	0x08004e83
 8004d08:	08004ea7 	.word	0x08004ea7
 8004d0c:	20000168 	.word	0x20000168

08004d10 <stdio_exit_handler>:
 8004d10:	4a02      	ldr	r2, [pc, #8]	@ (8004d1c <stdio_exit_handler+0xc>)
 8004d12:	4903      	ldr	r1, [pc, #12]	@ (8004d20 <stdio_exit_handler+0x10>)
 8004d14:	4803      	ldr	r0, [pc, #12]	@ (8004d24 <stdio_exit_handler+0x14>)
 8004d16:	f000 b869 	b.w	8004dec <_fwalk_sglue>
 8004d1a:	bf00      	nop
 8004d1c:	2000000c 	.word	0x2000000c
 8004d20:	080053a5 	.word	0x080053a5
 8004d24:	2000001c 	.word	0x2000001c

08004d28 <cleanup_stdio>:
 8004d28:	6841      	ldr	r1, [r0, #4]
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <cleanup_stdio+0x34>)
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	4604      	mov	r4, r0
 8004d32:	d001      	beq.n	8004d38 <cleanup_stdio+0x10>
 8004d34:	f000 fb36 	bl	80053a4 <_fflush_r>
 8004d38:	68a1      	ldr	r1, [r4, #8]
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <cleanup_stdio+0x38>)
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <cleanup_stdio+0x1e>
 8004d40:	4620      	mov	r0, r4
 8004d42:	f000 fb2f 	bl	80053a4 <_fflush_r>
 8004d46:	68e1      	ldr	r1, [r4, #12]
 8004d48:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <cleanup_stdio+0x3c>)
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	d004      	beq.n	8004d58 <cleanup_stdio+0x30>
 8004d4e:	4620      	mov	r0, r4
 8004d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d54:	f000 bb26 	b.w	80053a4 <_fflush_r>
 8004d58:	bd10      	pop	{r4, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000168 	.word	0x20000168
 8004d60:	200001d0 	.word	0x200001d0
 8004d64:	20000238 	.word	0x20000238

08004d68 <global_stdio_init.part.0>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <global_stdio_init.part.0+0x30>)
 8004d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8004d9c <global_stdio_init.part.0+0x34>)
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004da0 <global_stdio_init.part.0+0x38>)
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	4620      	mov	r0, r4
 8004d74:	2200      	movs	r2, #0
 8004d76:	2104      	movs	r1, #4
 8004d78:	f7ff ff94 	bl	8004ca4 <std>
 8004d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d80:	2201      	movs	r2, #1
 8004d82:	2109      	movs	r1, #9
 8004d84:	f7ff ff8e 	bl	8004ca4 <std>
 8004d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d92:	2112      	movs	r1, #18
 8004d94:	f7ff bf86 	b.w	8004ca4 <std>
 8004d98:	200002a0 	.word	0x200002a0
 8004d9c:	20000168 	.word	0x20000168
 8004da0:	08004d11 	.word	0x08004d11

08004da4 <__sfp_lock_acquire>:
 8004da4:	4801      	ldr	r0, [pc, #4]	@ (8004dac <__sfp_lock_acquire+0x8>)
 8004da6:	f000 b958 	b.w	800505a <__retarget_lock_acquire_recursive>
 8004daa:	bf00      	nop
 8004dac:	200002a9 	.word	0x200002a9

08004db0 <__sfp_lock_release>:
 8004db0:	4801      	ldr	r0, [pc, #4]	@ (8004db8 <__sfp_lock_release+0x8>)
 8004db2:	f000 b953 	b.w	800505c <__retarget_lock_release_recursive>
 8004db6:	bf00      	nop
 8004db8:	200002a9 	.word	0x200002a9

08004dbc <__sinit>:
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	f7ff fff0 	bl	8004da4 <__sfp_lock_acquire>
 8004dc4:	6a23      	ldr	r3, [r4, #32]
 8004dc6:	b11b      	cbz	r3, 8004dd0 <__sinit+0x14>
 8004dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dcc:	f7ff bff0 	b.w	8004db0 <__sfp_lock_release>
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <__sinit+0x28>)
 8004dd2:	6223      	str	r3, [r4, #32]
 8004dd4:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <__sinit+0x2c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f5      	bne.n	8004dc8 <__sinit+0xc>
 8004ddc:	f7ff ffc4 	bl	8004d68 <global_stdio_init.part.0>
 8004de0:	e7f2      	b.n	8004dc8 <__sinit+0xc>
 8004de2:	bf00      	nop
 8004de4:	08004d29 	.word	0x08004d29
 8004de8:	200002a0 	.word	0x200002a0

08004dec <_fwalk_sglue>:
 8004dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df0:	4607      	mov	r7, r0
 8004df2:	4688      	mov	r8, r1
 8004df4:	4614      	mov	r4, r2
 8004df6:	2600      	movs	r6, #0
 8004df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8004e00:	d505      	bpl.n	8004e0e <_fwalk_sglue+0x22>
 8004e02:	6824      	ldr	r4, [r4, #0]
 8004e04:	2c00      	cmp	r4, #0
 8004e06:	d1f7      	bne.n	8004df8 <_fwalk_sglue+0xc>
 8004e08:	4630      	mov	r0, r6
 8004e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e0e:	89ab      	ldrh	r3, [r5, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d907      	bls.n	8004e24 <_fwalk_sglue+0x38>
 8004e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	d003      	beq.n	8004e24 <_fwalk_sglue+0x38>
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4638      	mov	r0, r7
 8004e20:	47c0      	blx	r8
 8004e22:	4306      	orrs	r6, r0
 8004e24:	3568      	adds	r5, #104	@ 0x68
 8004e26:	e7e9      	b.n	8004dfc <_fwalk_sglue+0x10>

08004e28 <__sread>:
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e30:	f000 f8c4 	bl	8004fbc <_read_r>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	bfab      	itete	ge
 8004e38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e3c:	181b      	addge	r3, r3, r0
 8004e3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e42:	bfac      	ite	ge
 8004e44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e46:	81a3      	strhlt	r3, [r4, #12]
 8004e48:	bd10      	pop	{r4, pc}

08004e4a <__swrite>:
 8004e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4e:	461f      	mov	r7, r3
 8004e50:	898b      	ldrh	r3, [r1, #12]
 8004e52:	05db      	lsls	r3, r3, #23
 8004e54:	4605      	mov	r5, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	4616      	mov	r6, r2
 8004e5a:	d505      	bpl.n	8004e68 <__swrite+0x1e>
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	2302      	movs	r3, #2
 8004e62:	2200      	movs	r2, #0
 8004e64:	f000 f898 	bl	8004f98 <_lseek_r>
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e72:	81a3      	strh	r3, [r4, #12]
 8004e74:	4632      	mov	r2, r6
 8004e76:	463b      	mov	r3, r7
 8004e78:	4628      	mov	r0, r5
 8004e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7e:	f000 b8af 	b.w	8004fe0 <_write_r>

08004e82 <__sseek>:
 8004e82:	b510      	push	{r4, lr}
 8004e84:	460c      	mov	r4, r1
 8004e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8a:	f000 f885 	bl	8004f98 <_lseek_r>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	bf15      	itete	ne
 8004e94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e9e:	81a3      	strheq	r3, [r4, #12]
 8004ea0:	bf18      	it	ne
 8004ea2:	81a3      	strhne	r3, [r4, #12]
 8004ea4:	bd10      	pop	{r4, pc}

08004ea6 <__sclose>:
 8004ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eaa:	f000 b865 	b.w	8004f78 <_close_r>

08004eae <memset>:
 8004eae:	4402      	add	r2, r0
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d100      	bne.n	8004eb8 <memset+0xa>
 8004eb6:	4770      	bx	lr
 8004eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004ebc:	e7f9      	b.n	8004eb2 <memset+0x4>
	...

08004ec0 <strtok>:
 8004ec0:	4b16      	ldr	r3, [pc, #88]	@ (8004f1c <strtok+0x5c>)
 8004ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec6:	681f      	ldr	r7, [r3, #0]
 8004ec8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004eca:	4605      	mov	r5, r0
 8004ecc:	460e      	mov	r6, r1
 8004ece:	b9ec      	cbnz	r4, 8004f0c <strtok+0x4c>
 8004ed0:	2050      	movs	r0, #80	@ 0x50
 8004ed2:	f000 f92d 	bl	8005130 <malloc>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6478      	str	r0, [r7, #68]	@ 0x44
 8004eda:	b920      	cbnz	r0, 8004ee6 <strtok+0x26>
 8004edc:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <strtok+0x60>)
 8004ede:	4811      	ldr	r0, [pc, #68]	@ (8004f24 <strtok+0x64>)
 8004ee0:	215b      	movs	r1, #91	@ 0x5b
 8004ee2:	f000 f8bd 	bl	8005060 <__assert_func>
 8004ee6:	e9c0 4400 	strd	r4, r4, [r0]
 8004eea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004eee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004ef2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004ef6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004efa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004efe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004f02:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004f06:	6184      	str	r4, [r0, #24]
 8004f08:	7704      	strb	r4, [r0, #28]
 8004f0a:	6244      	str	r4, [r0, #36]	@ 0x24
 8004f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	2301      	movs	r3, #1
 8004f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f18:	f000 b806 	b.w	8004f28 <__strtok_r>
 8004f1c:	20000018 	.word	0x20000018
 8004f20:	08005d44 	.word	0x08005d44
 8004f24:	08005d5b 	.word	0x08005d5b

08004f28 <__strtok_r>:
 8004f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	b908      	cbnz	r0, 8004f32 <__strtok_r+0xa>
 8004f2e:	6814      	ldr	r4, [r2, #0]
 8004f30:	b144      	cbz	r4, 8004f44 <__strtok_r+0x1c>
 8004f32:	4620      	mov	r0, r4
 8004f34:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f38:	460f      	mov	r7, r1
 8004f3a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f3e:	b91e      	cbnz	r6, 8004f48 <__strtok_r+0x20>
 8004f40:	b965      	cbnz	r5, 8004f5c <__strtok_r+0x34>
 8004f42:	6015      	str	r5, [r2, #0]
 8004f44:	2000      	movs	r0, #0
 8004f46:	e005      	b.n	8004f54 <__strtok_r+0x2c>
 8004f48:	42b5      	cmp	r5, r6
 8004f4a:	d1f6      	bne.n	8004f3a <__strtok_r+0x12>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <__strtok_r+0xa>
 8004f50:	6014      	str	r4, [r2, #0]
 8004f52:	7003      	strb	r3, [r0, #0]
 8004f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f56:	461c      	mov	r4, r3
 8004f58:	e00c      	b.n	8004f74 <__strtok_r+0x4c>
 8004f5a:	b915      	cbnz	r5, 8004f62 <__strtok_r+0x3a>
 8004f5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f60:	460e      	mov	r6, r1
 8004f62:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f66:	42ab      	cmp	r3, r5
 8004f68:	d1f7      	bne.n	8004f5a <__strtok_r+0x32>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f3      	beq.n	8004f56 <__strtok_r+0x2e>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f74:	6014      	str	r4, [r2, #0]
 8004f76:	e7ed      	b.n	8004f54 <__strtok_r+0x2c>

08004f78 <_close_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d06      	ldr	r5, [pc, #24]	@ (8004f94 <_close_r+0x1c>)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	f7fb fdf0 	bl	8000b68 <_close>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_close_r+0x1a>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_close_r+0x1a>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	200002a4 	.word	0x200002a4

08004f98 <_lseek_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d07      	ldr	r5, [pc, #28]	@ (8004fb8 <_lseek_r+0x20>)
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	4608      	mov	r0, r1
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f7fb fe05 	bl	8000bb6 <_lseek>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_lseek_r+0x1e>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_lseek_r+0x1e>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	200002a4 	.word	0x200002a4

08004fbc <_read_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d07      	ldr	r5, [pc, #28]	@ (8004fdc <_read_r+0x20>)
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	4608      	mov	r0, r1
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	602a      	str	r2, [r5, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f7fb fd93 	bl	8000af6 <_read>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_read_r+0x1e>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_read_r+0x1e>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	200002a4 	.word	0x200002a4

08004fe0 <_write_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d07      	ldr	r5, [pc, #28]	@ (8005000 <_write_r+0x20>)
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	4608      	mov	r0, r1
 8004fe8:	4611      	mov	r1, r2
 8004fea:	2200      	movs	r2, #0
 8004fec:	602a      	str	r2, [r5, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f7fb fd9e 	bl	8000b30 <_write>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_write_r+0x1e>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_write_r+0x1e>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	200002a4 	.word	0x200002a4

08005004 <__errno>:
 8005004:	4b01      	ldr	r3, [pc, #4]	@ (800500c <__errno+0x8>)
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000018 	.word	0x20000018

08005010 <__libc_init_array>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4d0d      	ldr	r5, [pc, #52]	@ (8005048 <__libc_init_array+0x38>)
 8005014:	4c0d      	ldr	r4, [pc, #52]	@ (800504c <__libc_init_array+0x3c>)
 8005016:	1b64      	subs	r4, r4, r5
 8005018:	10a4      	asrs	r4, r4, #2
 800501a:	2600      	movs	r6, #0
 800501c:	42a6      	cmp	r6, r4
 800501e:	d109      	bne.n	8005034 <__libc_init_array+0x24>
 8005020:	4d0b      	ldr	r5, [pc, #44]	@ (8005050 <__libc_init_array+0x40>)
 8005022:	4c0c      	ldr	r4, [pc, #48]	@ (8005054 <__libc_init_array+0x44>)
 8005024:	f000 fe3a 	bl	8005c9c <_init>
 8005028:	1b64      	subs	r4, r4, r5
 800502a:	10a4      	asrs	r4, r4, #2
 800502c:	2600      	movs	r6, #0
 800502e:	42a6      	cmp	r6, r4
 8005030:	d105      	bne.n	800503e <__libc_init_array+0x2e>
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	f855 3b04 	ldr.w	r3, [r5], #4
 8005038:	4798      	blx	r3
 800503a:	3601      	adds	r6, #1
 800503c:	e7ee      	b.n	800501c <__libc_init_array+0xc>
 800503e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005042:	4798      	blx	r3
 8005044:	3601      	adds	r6, #1
 8005046:	e7f2      	b.n	800502e <__libc_init_array+0x1e>
 8005048:	08005e2c 	.word	0x08005e2c
 800504c:	08005e2c 	.word	0x08005e2c
 8005050:	08005e2c 	.word	0x08005e2c
 8005054:	08005e30 	.word	0x08005e30

08005058 <__retarget_lock_init_recursive>:
 8005058:	4770      	bx	lr

0800505a <__retarget_lock_acquire_recursive>:
 800505a:	4770      	bx	lr

0800505c <__retarget_lock_release_recursive>:
 800505c:	4770      	bx	lr
	...

08005060 <__assert_func>:
 8005060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005062:	4614      	mov	r4, r2
 8005064:	461a      	mov	r2, r3
 8005066:	4b09      	ldr	r3, [pc, #36]	@ (800508c <__assert_func+0x2c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4605      	mov	r5, r0
 800506c:	68d8      	ldr	r0, [r3, #12]
 800506e:	b954      	cbnz	r4, 8005086 <__assert_func+0x26>
 8005070:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <__assert_func+0x30>)
 8005072:	461c      	mov	r4, r3
 8005074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005078:	9100      	str	r1, [sp, #0]
 800507a:	462b      	mov	r3, r5
 800507c:	4905      	ldr	r1, [pc, #20]	@ (8005094 <__assert_func+0x34>)
 800507e:	f000 f9b9 	bl	80053f4 <fiprintf>
 8005082:	f000 f9d9 	bl	8005438 <abort>
 8005086:	4b04      	ldr	r3, [pc, #16]	@ (8005098 <__assert_func+0x38>)
 8005088:	e7f4      	b.n	8005074 <__assert_func+0x14>
 800508a:	bf00      	nop
 800508c:	20000018 	.word	0x20000018
 8005090:	08005df0 	.word	0x08005df0
 8005094:	08005dc2 	.word	0x08005dc2
 8005098:	08005db5 	.word	0x08005db5

0800509c <_free_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4605      	mov	r5, r0
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d041      	beq.n	8005128 <_free_r+0x8c>
 80050a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a8:	1f0c      	subs	r4, r1, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bfb8      	it	lt
 80050ae:	18e4      	addlt	r4, r4, r3
 80050b0:	f000 f8e8 	bl	8005284 <__malloc_lock>
 80050b4:	4a1d      	ldr	r2, [pc, #116]	@ (800512c <_free_r+0x90>)
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	b933      	cbnz	r3, 80050c8 <_free_r+0x2c>
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	6014      	str	r4, [r2, #0]
 80050be:	4628      	mov	r0, r5
 80050c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050c4:	f000 b8e4 	b.w	8005290 <__malloc_unlock>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d908      	bls.n	80050de <_free_r+0x42>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	1821      	adds	r1, r4, r0
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf01      	itttt	eq
 80050d4:	6819      	ldreq	r1, [r3, #0]
 80050d6:	685b      	ldreq	r3, [r3, #4]
 80050d8:	1809      	addeq	r1, r1, r0
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	e7ed      	b.n	80050ba <_free_r+0x1e>
 80050de:	461a      	mov	r2, r3
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b10b      	cbz	r3, 80050e8 <_free_r+0x4c>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d9fa      	bls.n	80050de <_free_r+0x42>
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	1850      	adds	r0, r2, r1
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d10b      	bne.n	8005108 <_free_r+0x6c>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	4401      	add	r1, r0
 80050f4:	1850      	adds	r0, r2, r1
 80050f6:	4283      	cmp	r3, r0
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	d1e0      	bne.n	80050be <_free_r+0x22>
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	6053      	str	r3, [r2, #4]
 8005102:	4408      	add	r0, r1
 8005104:	6010      	str	r0, [r2, #0]
 8005106:	e7da      	b.n	80050be <_free_r+0x22>
 8005108:	d902      	bls.n	8005110 <_free_r+0x74>
 800510a:	230c      	movs	r3, #12
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	e7d6      	b.n	80050be <_free_r+0x22>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	1821      	adds	r1, r4, r0
 8005114:	428b      	cmp	r3, r1
 8005116:	bf04      	itt	eq
 8005118:	6819      	ldreq	r1, [r3, #0]
 800511a:	685b      	ldreq	r3, [r3, #4]
 800511c:	6063      	str	r3, [r4, #4]
 800511e:	bf04      	itt	eq
 8005120:	1809      	addeq	r1, r1, r0
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	6054      	str	r4, [r2, #4]
 8005126:	e7ca      	b.n	80050be <_free_r+0x22>
 8005128:	bd38      	pop	{r3, r4, r5, pc}
 800512a:	bf00      	nop
 800512c:	200002b0 	.word	0x200002b0

08005130 <malloc>:
 8005130:	4b02      	ldr	r3, [pc, #8]	@ (800513c <malloc+0xc>)
 8005132:	4601      	mov	r1, r0
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	f000 b825 	b.w	8005184 <_malloc_r>
 800513a:	bf00      	nop
 800513c:	20000018 	.word	0x20000018

08005140 <sbrk_aligned>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	4e0f      	ldr	r6, [pc, #60]	@ (8005180 <sbrk_aligned+0x40>)
 8005144:	460c      	mov	r4, r1
 8005146:	6831      	ldr	r1, [r6, #0]
 8005148:	4605      	mov	r5, r0
 800514a:	b911      	cbnz	r1, 8005152 <sbrk_aligned+0x12>
 800514c:	f000 f964 	bl	8005418 <_sbrk_r>
 8005150:	6030      	str	r0, [r6, #0]
 8005152:	4621      	mov	r1, r4
 8005154:	4628      	mov	r0, r5
 8005156:	f000 f95f 	bl	8005418 <_sbrk_r>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	d103      	bne.n	8005166 <sbrk_aligned+0x26>
 800515e:	f04f 34ff 	mov.w	r4, #4294967295
 8005162:	4620      	mov	r0, r4
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	1cc4      	adds	r4, r0, #3
 8005168:	f024 0403 	bic.w	r4, r4, #3
 800516c:	42a0      	cmp	r0, r4
 800516e:	d0f8      	beq.n	8005162 <sbrk_aligned+0x22>
 8005170:	1a21      	subs	r1, r4, r0
 8005172:	4628      	mov	r0, r5
 8005174:	f000 f950 	bl	8005418 <_sbrk_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d1f2      	bne.n	8005162 <sbrk_aligned+0x22>
 800517c:	e7ef      	b.n	800515e <sbrk_aligned+0x1e>
 800517e:	bf00      	nop
 8005180:	200002ac 	.word	0x200002ac

08005184 <_malloc_r>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	1ccd      	adds	r5, r1, #3
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	3508      	adds	r5, #8
 8005190:	2d0c      	cmp	r5, #12
 8005192:	bf38      	it	cc
 8005194:	250c      	movcc	r5, #12
 8005196:	2d00      	cmp	r5, #0
 8005198:	4606      	mov	r6, r0
 800519a:	db01      	blt.n	80051a0 <_malloc_r+0x1c>
 800519c:	42a9      	cmp	r1, r5
 800519e:	d904      	bls.n	80051aa <_malloc_r+0x26>
 80051a0:	230c      	movs	r3, #12
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	2000      	movs	r0, #0
 80051a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005280 <_malloc_r+0xfc>
 80051ae:	f000 f869 	bl	8005284 <__malloc_lock>
 80051b2:	f8d8 3000 	ldr.w	r3, [r8]
 80051b6:	461c      	mov	r4, r3
 80051b8:	bb44      	cbnz	r4, 800520c <_malloc_r+0x88>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff ffbf 	bl	8005140 <sbrk_aligned>
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	4604      	mov	r4, r0
 80051c6:	d158      	bne.n	800527a <_malloc_r+0xf6>
 80051c8:	f8d8 4000 	ldr.w	r4, [r8]
 80051cc:	4627      	mov	r7, r4
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	d143      	bne.n	800525a <_malloc_r+0xd6>
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d04b      	beq.n	800526e <_malloc_r+0xea>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	4639      	mov	r1, r7
 80051da:	4630      	mov	r0, r6
 80051dc:	eb04 0903 	add.w	r9, r4, r3
 80051e0:	f000 f91a 	bl	8005418 <_sbrk_r>
 80051e4:	4581      	cmp	r9, r0
 80051e6:	d142      	bne.n	800526e <_malloc_r+0xea>
 80051e8:	6821      	ldr	r1, [r4, #0]
 80051ea:	1a6d      	subs	r5, r5, r1
 80051ec:	4629      	mov	r1, r5
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7ff ffa6 	bl	8005140 <sbrk_aligned>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d03a      	beq.n	800526e <_malloc_r+0xea>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	442b      	add	r3, r5
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	bb62      	cbnz	r2, 8005260 <_malloc_r+0xdc>
 8005206:	f8c8 7000 	str.w	r7, [r8]
 800520a:	e00f      	b.n	800522c <_malloc_r+0xa8>
 800520c:	6822      	ldr	r2, [r4, #0]
 800520e:	1b52      	subs	r2, r2, r5
 8005210:	d420      	bmi.n	8005254 <_malloc_r+0xd0>
 8005212:	2a0b      	cmp	r2, #11
 8005214:	d917      	bls.n	8005246 <_malloc_r+0xc2>
 8005216:	1961      	adds	r1, r4, r5
 8005218:	42a3      	cmp	r3, r4
 800521a:	6025      	str	r5, [r4, #0]
 800521c:	bf18      	it	ne
 800521e:	6059      	strne	r1, [r3, #4]
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	bf08      	it	eq
 8005224:	f8c8 1000 	streq.w	r1, [r8]
 8005228:	5162      	str	r2, [r4, r5]
 800522a:	604b      	str	r3, [r1, #4]
 800522c:	4630      	mov	r0, r6
 800522e:	f000 f82f 	bl	8005290 <__malloc_unlock>
 8005232:	f104 000b 	add.w	r0, r4, #11
 8005236:	1d23      	adds	r3, r4, #4
 8005238:	f020 0007 	bic.w	r0, r0, #7
 800523c:	1ac2      	subs	r2, r0, r3
 800523e:	bf1c      	itt	ne
 8005240:	1a1b      	subne	r3, r3, r0
 8005242:	50a3      	strne	r3, [r4, r2]
 8005244:	e7af      	b.n	80051a6 <_malloc_r+0x22>
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	42a3      	cmp	r3, r4
 800524a:	bf0c      	ite	eq
 800524c:	f8c8 2000 	streq.w	r2, [r8]
 8005250:	605a      	strne	r2, [r3, #4]
 8005252:	e7eb      	b.n	800522c <_malloc_r+0xa8>
 8005254:	4623      	mov	r3, r4
 8005256:	6864      	ldr	r4, [r4, #4]
 8005258:	e7ae      	b.n	80051b8 <_malloc_r+0x34>
 800525a:	463c      	mov	r4, r7
 800525c:	687f      	ldr	r7, [r7, #4]
 800525e:	e7b6      	b.n	80051ce <_malloc_r+0x4a>
 8005260:	461a      	mov	r2, r3
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	d1fb      	bne.n	8005260 <_malloc_r+0xdc>
 8005268:	2300      	movs	r3, #0
 800526a:	6053      	str	r3, [r2, #4]
 800526c:	e7de      	b.n	800522c <_malloc_r+0xa8>
 800526e:	230c      	movs	r3, #12
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	4630      	mov	r0, r6
 8005274:	f000 f80c 	bl	8005290 <__malloc_unlock>
 8005278:	e794      	b.n	80051a4 <_malloc_r+0x20>
 800527a:	6005      	str	r5, [r0, #0]
 800527c:	e7d6      	b.n	800522c <_malloc_r+0xa8>
 800527e:	bf00      	nop
 8005280:	200002b0 	.word	0x200002b0

08005284 <__malloc_lock>:
 8005284:	4801      	ldr	r0, [pc, #4]	@ (800528c <__malloc_lock+0x8>)
 8005286:	f7ff bee8 	b.w	800505a <__retarget_lock_acquire_recursive>
 800528a:	bf00      	nop
 800528c:	200002a8 	.word	0x200002a8

08005290 <__malloc_unlock>:
 8005290:	4801      	ldr	r0, [pc, #4]	@ (8005298 <__malloc_unlock+0x8>)
 8005292:	f7ff bee3 	b.w	800505c <__retarget_lock_release_recursive>
 8005296:	bf00      	nop
 8005298:	200002a8 	.word	0x200002a8

0800529c <__sflush_r>:
 800529c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a4:	0716      	lsls	r6, r2, #28
 80052a6:	4605      	mov	r5, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	d454      	bmi.n	8005356 <__sflush_r+0xba>
 80052ac:	684b      	ldr	r3, [r1, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dc02      	bgt.n	80052b8 <__sflush_r+0x1c>
 80052b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dd48      	ble.n	800534a <__sflush_r+0xae>
 80052b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	d045      	beq.n	800534a <__sflush_r+0xae>
 80052be:	2300      	movs	r3, #0
 80052c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052c4:	682f      	ldr	r7, [r5, #0]
 80052c6:	6a21      	ldr	r1, [r4, #32]
 80052c8:	602b      	str	r3, [r5, #0]
 80052ca:	d030      	beq.n	800532e <__sflush_r+0x92>
 80052cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	0759      	lsls	r1, r3, #29
 80052d2:	d505      	bpl.n	80052e0 <__sflush_r+0x44>
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	1ad2      	subs	r2, r2, r3
 80052d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052da:	b10b      	cbz	r3, 80052e0 <__sflush_r+0x44>
 80052dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052de:	1ad2      	subs	r2, r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052e4:	6a21      	ldr	r1, [r4, #32]
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b0      	blx	r6
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	d106      	bne.n	80052fe <__sflush_r+0x62>
 80052f0:	6829      	ldr	r1, [r5, #0]
 80052f2:	291d      	cmp	r1, #29
 80052f4:	d82b      	bhi.n	800534e <__sflush_r+0xb2>
 80052f6:	4a2a      	ldr	r2, [pc, #168]	@ (80053a0 <__sflush_r+0x104>)
 80052f8:	410a      	asrs	r2, r1
 80052fa:	07d6      	lsls	r6, r2, #31
 80052fc:	d427      	bmi.n	800534e <__sflush_r+0xb2>
 80052fe:	2200      	movs	r2, #0
 8005300:	6062      	str	r2, [r4, #4]
 8005302:	04d9      	lsls	r1, r3, #19
 8005304:	6922      	ldr	r2, [r4, #16]
 8005306:	6022      	str	r2, [r4, #0]
 8005308:	d504      	bpl.n	8005314 <__sflush_r+0x78>
 800530a:	1c42      	adds	r2, r0, #1
 800530c:	d101      	bne.n	8005312 <__sflush_r+0x76>
 800530e:	682b      	ldr	r3, [r5, #0]
 8005310:	b903      	cbnz	r3, 8005314 <__sflush_r+0x78>
 8005312:	6560      	str	r0, [r4, #84]	@ 0x54
 8005314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005316:	602f      	str	r7, [r5, #0]
 8005318:	b1b9      	cbz	r1, 800534a <__sflush_r+0xae>
 800531a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800531e:	4299      	cmp	r1, r3
 8005320:	d002      	beq.n	8005328 <__sflush_r+0x8c>
 8005322:	4628      	mov	r0, r5
 8005324:	f7ff feba 	bl	800509c <_free_r>
 8005328:	2300      	movs	r3, #0
 800532a:	6363      	str	r3, [r4, #52]	@ 0x34
 800532c:	e00d      	b.n	800534a <__sflush_r+0xae>
 800532e:	2301      	movs	r3, #1
 8005330:	4628      	mov	r0, r5
 8005332:	47b0      	blx	r6
 8005334:	4602      	mov	r2, r0
 8005336:	1c50      	adds	r0, r2, #1
 8005338:	d1c9      	bne.n	80052ce <__sflush_r+0x32>
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0c6      	beq.n	80052ce <__sflush_r+0x32>
 8005340:	2b1d      	cmp	r3, #29
 8005342:	d001      	beq.n	8005348 <__sflush_r+0xac>
 8005344:	2b16      	cmp	r3, #22
 8005346:	d11e      	bne.n	8005386 <__sflush_r+0xea>
 8005348:	602f      	str	r7, [r5, #0]
 800534a:	2000      	movs	r0, #0
 800534c:	e022      	b.n	8005394 <__sflush_r+0xf8>
 800534e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005352:	b21b      	sxth	r3, r3
 8005354:	e01b      	b.n	800538e <__sflush_r+0xf2>
 8005356:	690f      	ldr	r7, [r1, #16]
 8005358:	2f00      	cmp	r7, #0
 800535a:	d0f6      	beq.n	800534a <__sflush_r+0xae>
 800535c:	0793      	lsls	r3, r2, #30
 800535e:	680e      	ldr	r6, [r1, #0]
 8005360:	bf08      	it	eq
 8005362:	694b      	ldreq	r3, [r1, #20]
 8005364:	600f      	str	r7, [r1, #0]
 8005366:	bf18      	it	ne
 8005368:	2300      	movne	r3, #0
 800536a:	eba6 0807 	sub.w	r8, r6, r7
 800536e:	608b      	str	r3, [r1, #8]
 8005370:	f1b8 0f00 	cmp.w	r8, #0
 8005374:	dde9      	ble.n	800534a <__sflush_r+0xae>
 8005376:	6a21      	ldr	r1, [r4, #32]
 8005378:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800537a:	4643      	mov	r3, r8
 800537c:	463a      	mov	r2, r7
 800537e:	4628      	mov	r0, r5
 8005380:	47b0      	blx	r6
 8005382:	2800      	cmp	r0, #0
 8005384:	dc08      	bgt.n	8005398 <__sflush_r+0xfc>
 8005386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005398:	4407      	add	r7, r0
 800539a:	eba8 0800 	sub.w	r8, r8, r0
 800539e:	e7e7      	b.n	8005370 <__sflush_r+0xd4>
 80053a0:	dfbffffe 	.word	0xdfbffffe

080053a4 <_fflush_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	690b      	ldr	r3, [r1, #16]
 80053a8:	4605      	mov	r5, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	b913      	cbnz	r3, 80053b4 <_fflush_r+0x10>
 80053ae:	2500      	movs	r5, #0
 80053b0:	4628      	mov	r0, r5
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	b118      	cbz	r0, 80053be <_fflush_r+0x1a>
 80053b6:	6a03      	ldr	r3, [r0, #32]
 80053b8:	b90b      	cbnz	r3, 80053be <_fflush_r+0x1a>
 80053ba:	f7ff fcff 	bl	8004dbc <__sinit>
 80053be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f3      	beq.n	80053ae <_fflush_r+0xa>
 80053c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053c8:	07d0      	lsls	r0, r2, #31
 80053ca:	d404      	bmi.n	80053d6 <_fflush_r+0x32>
 80053cc:	0599      	lsls	r1, r3, #22
 80053ce:	d402      	bmi.n	80053d6 <_fflush_r+0x32>
 80053d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053d2:	f7ff fe42 	bl	800505a <__retarget_lock_acquire_recursive>
 80053d6:	4628      	mov	r0, r5
 80053d8:	4621      	mov	r1, r4
 80053da:	f7ff ff5f 	bl	800529c <__sflush_r>
 80053de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053e0:	07da      	lsls	r2, r3, #31
 80053e2:	4605      	mov	r5, r0
 80053e4:	d4e4      	bmi.n	80053b0 <_fflush_r+0xc>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	059b      	lsls	r3, r3, #22
 80053ea:	d4e1      	bmi.n	80053b0 <_fflush_r+0xc>
 80053ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ee:	f7ff fe35 	bl	800505c <__retarget_lock_release_recursive>
 80053f2:	e7dd      	b.n	80053b0 <_fflush_r+0xc>

080053f4 <fiprintf>:
 80053f4:	b40e      	push	{r1, r2, r3}
 80053f6:	b503      	push	{r0, r1, lr}
 80053f8:	4601      	mov	r1, r0
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	4805      	ldr	r0, [pc, #20]	@ (8005414 <fiprintf+0x20>)
 80053fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005402:	6800      	ldr	r0, [r0, #0]
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	f000 f847 	bl	8005498 <_vfiprintf_r>
 800540a:	b002      	add	sp, #8
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b003      	add	sp, #12
 8005412:	4770      	bx	lr
 8005414:	20000018 	.word	0x20000018

08005418 <_sbrk_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4d06      	ldr	r5, [pc, #24]	@ (8005434 <_sbrk_r+0x1c>)
 800541c:	2300      	movs	r3, #0
 800541e:	4604      	mov	r4, r0
 8005420:	4608      	mov	r0, r1
 8005422:	602b      	str	r3, [r5, #0]
 8005424:	f7fb fbd4 	bl	8000bd0 <_sbrk>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d102      	bne.n	8005432 <_sbrk_r+0x1a>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	b103      	cbz	r3, 8005432 <_sbrk_r+0x1a>
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	200002a4 	.word	0x200002a4

08005438 <abort>:
 8005438:	b508      	push	{r3, lr}
 800543a:	2006      	movs	r0, #6
 800543c:	f000 fb8e 	bl	8005b5c <raise>
 8005440:	2001      	movs	r0, #1
 8005442:	f7fb fb4d 	bl	8000ae0 <_exit>

08005446 <__sfputc_r>:
 8005446:	6893      	ldr	r3, [r2, #8]
 8005448:	3b01      	subs	r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	b410      	push	{r4}
 800544e:	6093      	str	r3, [r2, #8]
 8005450:	da08      	bge.n	8005464 <__sfputc_r+0x1e>
 8005452:	6994      	ldr	r4, [r2, #24]
 8005454:	42a3      	cmp	r3, r4
 8005456:	db01      	blt.n	800545c <__sfputc_r+0x16>
 8005458:	290a      	cmp	r1, #10
 800545a:	d103      	bne.n	8005464 <__sfputc_r+0x1e>
 800545c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005460:	f000 bac0 	b.w	80059e4 <__swbuf_r>
 8005464:	6813      	ldr	r3, [r2, #0]
 8005466:	1c58      	adds	r0, r3, #1
 8005468:	6010      	str	r0, [r2, #0]
 800546a:	7019      	strb	r1, [r3, #0]
 800546c:	4608      	mov	r0, r1
 800546e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005472:	4770      	bx	lr

08005474 <__sfputs_r>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	4606      	mov	r6, r0
 8005478:	460f      	mov	r7, r1
 800547a:	4614      	mov	r4, r2
 800547c:	18d5      	adds	r5, r2, r3
 800547e:	42ac      	cmp	r4, r5
 8005480:	d101      	bne.n	8005486 <__sfputs_r+0x12>
 8005482:	2000      	movs	r0, #0
 8005484:	e007      	b.n	8005496 <__sfputs_r+0x22>
 8005486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548a:	463a      	mov	r2, r7
 800548c:	4630      	mov	r0, r6
 800548e:	f7ff ffda 	bl	8005446 <__sfputc_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d1f3      	bne.n	800547e <__sfputs_r+0xa>
 8005496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005498 <_vfiprintf_r>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	460d      	mov	r5, r1
 800549e:	b09d      	sub	sp, #116	@ 0x74
 80054a0:	4614      	mov	r4, r2
 80054a2:	4698      	mov	r8, r3
 80054a4:	4606      	mov	r6, r0
 80054a6:	b118      	cbz	r0, 80054b0 <_vfiprintf_r+0x18>
 80054a8:	6a03      	ldr	r3, [r0, #32]
 80054aa:	b90b      	cbnz	r3, 80054b0 <_vfiprintf_r+0x18>
 80054ac:	f7ff fc86 	bl	8004dbc <__sinit>
 80054b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054b2:	07d9      	lsls	r1, r3, #31
 80054b4:	d405      	bmi.n	80054c2 <_vfiprintf_r+0x2a>
 80054b6:	89ab      	ldrh	r3, [r5, #12]
 80054b8:	059a      	lsls	r2, r3, #22
 80054ba:	d402      	bmi.n	80054c2 <_vfiprintf_r+0x2a>
 80054bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054be:	f7ff fdcc 	bl	800505a <__retarget_lock_acquire_recursive>
 80054c2:	89ab      	ldrh	r3, [r5, #12]
 80054c4:	071b      	lsls	r3, r3, #28
 80054c6:	d501      	bpl.n	80054cc <_vfiprintf_r+0x34>
 80054c8:	692b      	ldr	r3, [r5, #16]
 80054ca:	b99b      	cbnz	r3, 80054f4 <_vfiprintf_r+0x5c>
 80054cc:	4629      	mov	r1, r5
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 fac6 	bl	8005a60 <__swsetup_r>
 80054d4:	b170      	cbz	r0, 80054f4 <_vfiprintf_r+0x5c>
 80054d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054d8:	07dc      	lsls	r4, r3, #31
 80054da:	d504      	bpl.n	80054e6 <_vfiprintf_r+0x4e>
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	b01d      	add	sp, #116	@ 0x74
 80054e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e6:	89ab      	ldrh	r3, [r5, #12]
 80054e8:	0598      	lsls	r0, r3, #22
 80054ea:	d4f7      	bmi.n	80054dc <_vfiprintf_r+0x44>
 80054ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054ee:	f7ff fdb5 	bl	800505c <__retarget_lock_release_recursive>
 80054f2:	e7f3      	b.n	80054dc <_vfiprintf_r+0x44>
 80054f4:	2300      	movs	r3, #0
 80054f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f8:	2320      	movs	r3, #32
 80054fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005502:	2330      	movs	r3, #48	@ 0x30
 8005504:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80056b4 <_vfiprintf_r+0x21c>
 8005508:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800550c:	f04f 0901 	mov.w	r9, #1
 8005510:	4623      	mov	r3, r4
 8005512:	469a      	mov	sl, r3
 8005514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005518:	b10a      	cbz	r2, 800551e <_vfiprintf_r+0x86>
 800551a:	2a25      	cmp	r2, #37	@ 0x25
 800551c:	d1f9      	bne.n	8005512 <_vfiprintf_r+0x7a>
 800551e:	ebba 0b04 	subs.w	fp, sl, r4
 8005522:	d00b      	beq.n	800553c <_vfiprintf_r+0xa4>
 8005524:	465b      	mov	r3, fp
 8005526:	4622      	mov	r2, r4
 8005528:	4629      	mov	r1, r5
 800552a:	4630      	mov	r0, r6
 800552c:	f7ff ffa2 	bl	8005474 <__sfputs_r>
 8005530:	3001      	adds	r0, #1
 8005532:	f000 80a7 	beq.w	8005684 <_vfiprintf_r+0x1ec>
 8005536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005538:	445a      	add	r2, fp
 800553a:	9209      	str	r2, [sp, #36]	@ 0x24
 800553c:	f89a 3000 	ldrb.w	r3, [sl]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 809f 	beq.w	8005684 <_vfiprintf_r+0x1ec>
 8005546:	2300      	movs	r3, #0
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005550:	f10a 0a01 	add.w	sl, sl, #1
 8005554:	9304      	str	r3, [sp, #16]
 8005556:	9307      	str	r3, [sp, #28]
 8005558:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800555c:	931a      	str	r3, [sp, #104]	@ 0x68
 800555e:	4654      	mov	r4, sl
 8005560:	2205      	movs	r2, #5
 8005562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005566:	4853      	ldr	r0, [pc, #332]	@ (80056b4 <_vfiprintf_r+0x21c>)
 8005568:	f7fa fe72 	bl	8000250 <memchr>
 800556c:	9a04      	ldr	r2, [sp, #16]
 800556e:	b9d8      	cbnz	r0, 80055a8 <_vfiprintf_r+0x110>
 8005570:	06d1      	lsls	r1, r2, #27
 8005572:	bf44      	itt	mi
 8005574:	2320      	movmi	r3, #32
 8005576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800557a:	0713      	lsls	r3, r2, #28
 800557c:	bf44      	itt	mi
 800557e:	232b      	movmi	r3, #43	@ 0x2b
 8005580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005584:	f89a 3000 	ldrb.w	r3, [sl]
 8005588:	2b2a      	cmp	r3, #42	@ 0x2a
 800558a:	d015      	beq.n	80055b8 <_vfiprintf_r+0x120>
 800558c:	9a07      	ldr	r2, [sp, #28]
 800558e:	4654      	mov	r4, sl
 8005590:	2000      	movs	r0, #0
 8005592:	f04f 0c0a 	mov.w	ip, #10
 8005596:	4621      	mov	r1, r4
 8005598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559c:	3b30      	subs	r3, #48	@ 0x30
 800559e:	2b09      	cmp	r3, #9
 80055a0:	d94b      	bls.n	800563a <_vfiprintf_r+0x1a2>
 80055a2:	b1b0      	cbz	r0, 80055d2 <_vfiprintf_r+0x13a>
 80055a4:	9207      	str	r2, [sp, #28]
 80055a6:	e014      	b.n	80055d2 <_vfiprintf_r+0x13a>
 80055a8:	eba0 0308 	sub.w	r3, r0, r8
 80055ac:	fa09 f303 	lsl.w	r3, r9, r3
 80055b0:	4313      	orrs	r3, r2
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	46a2      	mov	sl, r4
 80055b6:	e7d2      	b.n	800555e <_vfiprintf_r+0xc6>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	1d19      	adds	r1, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	9103      	str	r1, [sp, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bfbb      	ittet	lt
 80055c4:	425b      	neglt	r3, r3
 80055c6:	f042 0202 	orrlt.w	r2, r2, #2
 80055ca:	9307      	strge	r3, [sp, #28]
 80055cc:	9307      	strlt	r3, [sp, #28]
 80055ce:	bfb8      	it	lt
 80055d0:	9204      	strlt	r2, [sp, #16]
 80055d2:	7823      	ldrb	r3, [r4, #0]
 80055d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d6:	d10a      	bne.n	80055ee <_vfiprintf_r+0x156>
 80055d8:	7863      	ldrb	r3, [r4, #1]
 80055da:	2b2a      	cmp	r3, #42	@ 0x2a
 80055dc:	d132      	bne.n	8005644 <_vfiprintf_r+0x1ac>
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	1d1a      	adds	r2, r3, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	9203      	str	r2, [sp, #12]
 80055e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ea:	3402      	adds	r4, #2
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80056c4 <_vfiprintf_r+0x22c>
 80055f2:	7821      	ldrb	r1, [r4, #0]
 80055f4:	2203      	movs	r2, #3
 80055f6:	4650      	mov	r0, sl
 80055f8:	f7fa fe2a 	bl	8000250 <memchr>
 80055fc:	b138      	cbz	r0, 800560e <_vfiprintf_r+0x176>
 80055fe:	9b04      	ldr	r3, [sp, #16]
 8005600:	eba0 000a 	sub.w	r0, r0, sl
 8005604:	2240      	movs	r2, #64	@ 0x40
 8005606:	4082      	lsls	r2, r0
 8005608:	4313      	orrs	r3, r2
 800560a:	3401      	adds	r4, #1
 800560c:	9304      	str	r3, [sp, #16]
 800560e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005612:	4829      	ldr	r0, [pc, #164]	@ (80056b8 <_vfiprintf_r+0x220>)
 8005614:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005618:	2206      	movs	r2, #6
 800561a:	f7fa fe19 	bl	8000250 <memchr>
 800561e:	2800      	cmp	r0, #0
 8005620:	d03f      	beq.n	80056a2 <_vfiprintf_r+0x20a>
 8005622:	4b26      	ldr	r3, [pc, #152]	@ (80056bc <_vfiprintf_r+0x224>)
 8005624:	bb1b      	cbnz	r3, 800566e <_vfiprintf_r+0x1d6>
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	3307      	adds	r3, #7
 800562a:	f023 0307 	bic.w	r3, r3, #7
 800562e:	3308      	adds	r3, #8
 8005630:	9303      	str	r3, [sp, #12]
 8005632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005634:	443b      	add	r3, r7
 8005636:	9309      	str	r3, [sp, #36]	@ 0x24
 8005638:	e76a      	b.n	8005510 <_vfiprintf_r+0x78>
 800563a:	fb0c 3202 	mla	r2, ip, r2, r3
 800563e:	460c      	mov	r4, r1
 8005640:	2001      	movs	r0, #1
 8005642:	e7a8      	b.n	8005596 <_vfiprintf_r+0xfe>
 8005644:	2300      	movs	r3, #0
 8005646:	3401      	adds	r4, #1
 8005648:	9305      	str	r3, [sp, #20]
 800564a:	4619      	mov	r1, r3
 800564c:	f04f 0c0a 	mov.w	ip, #10
 8005650:	4620      	mov	r0, r4
 8005652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005656:	3a30      	subs	r2, #48	@ 0x30
 8005658:	2a09      	cmp	r2, #9
 800565a:	d903      	bls.n	8005664 <_vfiprintf_r+0x1cc>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0c6      	beq.n	80055ee <_vfiprintf_r+0x156>
 8005660:	9105      	str	r1, [sp, #20]
 8005662:	e7c4      	b.n	80055ee <_vfiprintf_r+0x156>
 8005664:	fb0c 2101 	mla	r1, ip, r1, r2
 8005668:	4604      	mov	r4, r0
 800566a:	2301      	movs	r3, #1
 800566c:	e7f0      	b.n	8005650 <_vfiprintf_r+0x1b8>
 800566e:	ab03      	add	r3, sp, #12
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	462a      	mov	r2, r5
 8005674:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <_vfiprintf_r+0x228>)
 8005676:	a904      	add	r1, sp, #16
 8005678:	4630      	mov	r0, r6
 800567a:	f3af 8000 	nop.w
 800567e:	4607      	mov	r7, r0
 8005680:	1c78      	adds	r0, r7, #1
 8005682:	d1d6      	bne.n	8005632 <_vfiprintf_r+0x19a>
 8005684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005686:	07d9      	lsls	r1, r3, #31
 8005688:	d405      	bmi.n	8005696 <_vfiprintf_r+0x1fe>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	059a      	lsls	r2, r3, #22
 800568e:	d402      	bmi.n	8005696 <_vfiprintf_r+0x1fe>
 8005690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005692:	f7ff fce3 	bl	800505c <__retarget_lock_release_recursive>
 8005696:	89ab      	ldrh	r3, [r5, #12]
 8005698:	065b      	lsls	r3, r3, #25
 800569a:	f53f af1f 	bmi.w	80054dc <_vfiprintf_r+0x44>
 800569e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056a0:	e71e      	b.n	80054e0 <_vfiprintf_r+0x48>
 80056a2:	ab03      	add	r3, sp, #12
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	462a      	mov	r2, r5
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <_vfiprintf_r+0x228>)
 80056aa:	a904      	add	r1, sp, #16
 80056ac:	4630      	mov	r0, r6
 80056ae:	f000 f879 	bl	80057a4 <_printf_i>
 80056b2:	e7e4      	b.n	800567e <_vfiprintf_r+0x1e6>
 80056b4:	08005df1 	.word	0x08005df1
 80056b8:	08005dfb 	.word	0x08005dfb
 80056bc:	00000000 	.word	0x00000000
 80056c0:	08005475 	.word	0x08005475
 80056c4:	08005df7 	.word	0x08005df7

080056c8 <_printf_common>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	4616      	mov	r6, r2
 80056ce:	4698      	mov	r8, r3
 80056d0:	688a      	ldr	r2, [r1, #8]
 80056d2:	690b      	ldr	r3, [r1, #16]
 80056d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d8:	4293      	cmp	r3, r2
 80056da:	bfb8      	it	lt
 80056dc:	4613      	movlt	r3, r2
 80056de:	6033      	str	r3, [r6, #0]
 80056e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056e4:	4607      	mov	r7, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	b10a      	cbz	r2, 80056ee <_printf_common+0x26>
 80056ea:	3301      	adds	r3, #1
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	0699      	lsls	r1, r3, #26
 80056f2:	bf42      	ittt	mi
 80056f4:	6833      	ldrmi	r3, [r6, #0]
 80056f6:	3302      	addmi	r3, #2
 80056f8:	6033      	strmi	r3, [r6, #0]
 80056fa:	6825      	ldr	r5, [r4, #0]
 80056fc:	f015 0506 	ands.w	r5, r5, #6
 8005700:	d106      	bne.n	8005710 <_printf_common+0x48>
 8005702:	f104 0a19 	add.w	sl, r4, #25
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	6832      	ldr	r2, [r6, #0]
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	42ab      	cmp	r3, r5
 800570e:	dc26      	bgt.n	800575e <_printf_common+0x96>
 8005710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	3b00      	subs	r3, #0
 8005718:	bf18      	it	ne
 800571a:	2301      	movne	r3, #1
 800571c:	0692      	lsls	r2, r2, #26
 800571e:	d42b      	bmi.n	8005778 <_printf_common+0xb0>
 8005720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005724:	4641      	mov	r1, r8
 8005726:	4638      	mov	r0, r7
 8005728:	47c8      	blx	r9
 800572a:	3001      	adds	r0, #1
 800572c:	d01e      	beq.n	800576c <_printf_common+0xa4>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	6922      	ldr	r2, [r4, #16]
 8005732:	f003 0306 	and.w	r3, r3, #6
 8005736:	2b04      	cmp	r3, #4
 8005738:	bf02      	ittt	eq
 800573a:	68e5      	ldreq	r5, [r4, #12]
 800573c:	6833      	ldreq	r3, [r6, #0]
 800573e:	1aed      	subeq	r5, r5, r3
 8005740:	68a3      	ldr	r3, [r4, #8]
 8005742:	bf0c      	ite	eq
 8005744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005748:	2500      	movne	r5, #0
 800574a:	4293      	cmp	r3, r2
 800574c:	bfc4      	itt	gt
 800574e:	1a9b      	subgt	r3, r3, r2
 8005750:	18ed      	addgt	r5, r5, r3
 8005752:	2600      	movs	r6, #0
 8005754:	341a      	adds	r4, #26
 8005756:	42b5      	cmp	r5, r6
 8005758:	d11a      	bne.n	8005790 <_printf_common+0xc8>
 800575a:	2000      	movs	r0, #0
 800575c:	e008      	b.n	8005770 <_printf_common+0xa8>
 800575e:	2301      	movs	r3, #1
 8005760:	4652      	mov	r2, sl
 8005762:	4641      	mov	r1, r8
 8005764:	4638      	mov	r0, r7
 8005766:	47c8      	blx	r9
 8005768:	3001      	adds	r0, #1
 800576a:	d103      	bne.n	8005774 <_printf_common+0xac>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	3501      	adds	r5, #1
 8005776:	e7c6      	b.n	8005706 <_printf_common+0x3e>
 8005778:	18e1      	adds	r1, r4, r3
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	2030      	movs	r0, #48	@ 0x30
 800577e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005782:	4422      	add	r2, r4
 8005784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800578c:	3302      	adds	r3, #2
 800578e:	e7c7      	b.n	8005720 <_printf_common+0x58>
 8005790:	2301      	movs	r3, #1
 8005792:	4622      	mov	r2, r4
 8005794:	4641      	mov	r1, r8
 8005796:	4638      	mov	r0, r7
 8005798:	47c8      	blx	r9
 800579a:	3001      	adds	r0, #1
 800579c:	d0e6      	beq.n	800576c <_printf_common+0xa4>
 800579e:	3601      	adds	r6, #1
 80057a0:	e7d9      	b.n	8005756 <_printf_common+0x8e>
	...

080057a4 <_printf_i>:
 80057a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	7e0f      	ldrb	r7, [r1, #24]
 80057aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057ac:	2f78      	cmp	r7, #120	@ 0x78
 80057ae:	4691      	mov	r9, r2
 80057b0:	4680      	mov	r8, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	469a      	mov	sl, r3
 80057b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057ba:	d807      	bhi.n	80057cc <_printf_i+0x28>
 80057bc:	2f62      	cmp	r7, #98	@ 0x62
 80057be:	d80a      	bhi.n	80057d6 <_printf_i+0x32>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f000 80d2 	beq.w	800596a <_printf_i+0x1c6>
 80057c6:	2f58      	cmp	r7, #88	@ 0x58
 80057c8:	f000 80b9 	beq.w	800593e <_printf_i+0x19a>
 80057cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057d4:	e03a      	b.n	800584c <_printf_i+0xa8>
 80057d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057da:	2b15      	cmp	r3, #21
 80057dc:	d8f6      	bhi.n	80057cc <_printf_i+0x28>
 80057de:	a101      	add	r1, pc, #4	@ (adr r1, 80057e4 <_printf_i+0x40>)
 80057e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	08005851 	.word	0x08005851
 80057ec:	080057cd 	.word	0x080057cd
 80057f0:	080057cd 	.word	0x080057cd
 80057f4:	080057cd 	.word	0x080057cd
 80057f8:	080057cd 	.word	0x080057cd
 80057fc:	08005851 	.word	0x08005851
 8005800:	080057cd 	.word	0x080057cd
 8005804:	080057cd 	.word	0x080057cd
 8005808:	080057cd 	.word	0x080057cd
 800580c:	080057cd 	.word	0x080057cd
 8005810:	08005951 	.word	0x08005951
 8005814:	0800587b 	.word	0x0800587b
 8005818:	0800590b 	.word	0x0800590b
 800581c:	080057cd 	.word	0x080057cd
 8005820:	080057cd 	.word	0x080057cd
 8005824:	08005973 	.word	0x08005973
 8005828:	080057cd 	.word	0x080057cd
 800582c:	0800587b 	.word	0x0800587b
 8005830:	080057cd 	.word	0x080057cd
 8005834:	080057cd 	.word	0x080057cd
 8005838:	08005913 	.word	0x08005913
 800583c:	6833      	ldr	r3, [r6, #0]
 800583e:	1d1a      	adds	r2, r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6032      	str	r2, [r6, #0]
 8005844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800584c:	2301      	movs	r3, #1
 800584e:	e09d      	b.n	800598c <_printf_i+0x1e8>
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	1d19      	adds	r1, r3, #4
 8005856:	6031      	str	r1, [r6, #0]
 8005858:	0606      	lsls	r6, r0, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xbc>
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	e003      	b.n	8005868 <_printf_i+0xc4>
 8005860:	0645      	lsls	r5, r0, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xb8>
 8005864:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005868:	2d00      	cmp	r5, #0
 800586a:	da03      	bge.n	8005874 <_printf_i+0xd0>
 800586c:	232d      	movs	r3, #45	@ 0x2d
 800586e:	426d      	negs	r5, r5
 8005870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005874:	4859      	ldr	r0, [pc, #356]	@ (80059dc <_printf_i+0x238>)
 8005876:	230a      	movs	r3, #10
 8005878:	e011      	b.n	800589e <_printf_i+0xfa>
 800587a:	6821      	ldr	r1, [r4, #0]
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	0608      	lsls	r0, r1, #24
 8005880:	f853 5b04 	ldr.w	r5, [r3], #4
 8005884:	d402      	bmi.n	800588c <_printf_i+0xe8>
 8005886:	0649      	lsls	r1, r1, #25
 8005888:	bf48      	it	mi
 800588a:	b2ad      	uxthmi	r5, r5
 800588c:	2f6f      	cmp	r7, #111	@ 0x6f
 800588e:	4853      	ldr	r0, [pc, #332]	@ (80059dc <_printf_i+0x238>)
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	bf14      	ite	ne
 8005894:	230a      	movne	r3, #10
 8005896:	2308      	moveq	r3, #8
 8005898:	2100      	movs	r1, #0
 800589a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800589e:	6866      	ldr	r6, [r4, #4]
 80058a0:	60a6      	str	r6, [r4, #8]
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	bfa2      	ittt	ge
 80058a6:	6821      	ldrge	r1, [r4, #0]
 80058a8:	f021 0104 	bicge.w	r1, r1, #4
 80058ac:	6021      	strge	r1, [r4, #0]
 80058ae:	b90d      	cbnz	r5, 80058b4 <_printf_i+0x110>
 80058b0:	2e00      	cmp	r6, #0
 80058b2:	d04b      	beq.n	800594c <_printf_i+0x1a8>
 80058b4:	4616      	mov	r6, r2
 80058b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80058ba:	fb03 5711 	mls	r7, r3, r1, r5
 80058be:	5dc7      	ldrb	r7, [r0, r7]
 80058c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058c4:	462f      	mov	r7, r5
 80058c6:	42bb      	cmp	r3, r7
 80058c8:	460d      	mov	r5, r1
 80058ca:	d9f4      	bls.n	80058b6 <_printf_i+0x112>
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d10b      	bne.n	80058e8 <_printf_i+0x144>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	07df      	lsls	r7, r3, #31
 80058d4:	d508      	bpl.n	80058e8 <_printf_i+0x144>
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	4299      	cmp	r1, r3
 80058dc:	bfde      	ittt	le
 80058de:	2330      	movle	r3, #48	@ 0x30
 80058e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058e8:	1b92      	subs	r2, r2, r6
 80058ea:	6122      	str	r2, [r4, #16]
 80058ec:	f8cd a000 	str.w	sl, [sp]
 80058f0:	464b      	mov	r3, r9
 80058f2:	aa03      	add	r2, sp, #12
 80058f4:	4621      	mov	r1, r4
 80058f6:	4640      	mov	r0, r8
 80058f8:	f7ff fee6 	bl	80056c8 <_printf_common>
 80058fc:	3001      	adds	r0, #1
 80058fe:	d14a      	bne.n	8005996 <_printf_i+0x1f2>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	b004      	add	sp, #16
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	f043 0320 	orr.w	r3, r3, #32
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	4833      	ldr	r0, [pc, #204]	@ (80059e0 <_printf_i+0x23c>)
 8005914:	2778      	movs	r7, #120	@ 0x78
 8005916:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	6831      	ldr	r1, [r6, #0]
 800591e:	061f      	lsls	r7, r3, #24
 8005920:	f851 5b04 	ldr.w	r5, [r1], #4
 8005924:	d402      	bmi.n	800592c <_printf_i+0x188>
 8005926:	065f      	lsls	r7, r3, #25
 8005928:	bf48      	it	mi
 800592a:	b2ad      	uxthmi	r5, r5
 800592c:	6031      	str	r1, [r6, #0]
 800592e:	07d9      	lsls	r1, r3, #31
 8005930:	bf44      	itt	mi
 8005932:	f043 0320 	orrmi.w	r3, r3, #32
 8005936:	6023      	strmi	r3, [r4, #0]
 8005938:	b11d      	cbz	r5, 8005942 <_printf_i+0x19e>
 800593a:	2310      	movs	r3, #16
 800593c:	e7ac      	b.n	8005898 <_printf_i+0xf4>
 800593e:	4827      	ldr	r0, [pc, #156]	@ (80059dc <_printf_i+0x238>)
 8005940:	e7e9      	b.n	8005916 <_printf_i+0x172>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f023 0320 	bic.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	e7f6      	b.n	800593a <_printf_i+0x196>
 800594c:	4616      	mov	r6, r2
 800594e:	e7bd      	b.n	80058cc <_printf_i+0x128>
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	6961      	ldr	r1, [r4, #20]
 8005956:	1d18      	adds	r0, r3, #4
 8005958:	6030      	str	r0, [r6, #0]
 800595a:	062e      	lsls	r6, r5, #24
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	d501      	bpl.n	8005964 <_printf_i+0x1c0>
 8005960:	6019      	str	r1, [r3, #0]
 8005962:	e002      	b.n	800596a <_printf_i+0x1c6>
 8005964:	0668      	lsls	r0, r5, #25
 8005966:	d5fb      	bpl.n	8005960 <_printf_i+0x1bc>
 8005968:	8019      	strh	r1, [r3, #0]
 800596a:	2300      	movs	r3, #0
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	4616      	mov	r6, r2
 8005970:	e7bc      	b.n	80058ec <_printf_i+0x148>
 8005972:	6833      	ldr	r3, [r6, #0]
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	6032      	str	r2, [r6, #0]
 8005978:	681e      	ldr	r6, [r3, #0]
 800597a:	6862      	ldr	r2, [r4, #4]
 800597c:	2100      	movs	r1, #0
 800597e:	4630      	mov	r0, r6
 8005980:	f7fa fc66 	bl	8000250 <memchr>
 8005984:	b108      	cbz	r0, 800598a <_printf_i+0x1e6>
 8005986:	1b80      	subs	r0, r0, r6
 8005988:	6060      	str	r0, [r4, #4]
 800598a:	6863      	ldr	r3, [r4, #4]
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	2300      	movs	r3, #0
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005994:	e7aa      	b.n	80058ec <_printf_i+0x148>
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	4632      	mov	r2, r6
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	47d0      	blx	sl
 80059a0:	3001      	adds	r0, #1
 80059a2:	d0ad      	beq.n	8005900 <_printf_i+0x15c>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	079b      	lsls	r3, r3, #30
 80059a8:	d413      	bmi.n	80059d2 <_printf_i+0x22e>
 80059aa:	68e0      	ldr	r0, [r4, #12]
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	4298      	cmp	r0, r3
 80059b0:	bfb8      	it	lt
 80059b2:	4618      	movlt	r0, r3
 80059b4:	e7a6      	b.n	8005904 <_printf_i+0x160>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4632      	mov	r2, r6
 80059ba:	4649      	mov	r1, r9
 80059bc:	4640      	mov	r0, r8
 80059be:	47d0      	blx	sl
 80059c0:	3001      	adds	r0, #1
 80059c2:	d09d      	beq.n	8005900 <_printf_i+0x15c>
 80059c4:	3501      	adds	r5, #1
 80059c6:	68e3      	ldr	r3, [r4, #12]
 80059c8:	9903      	ldr	r1, [sp, #12]
 80059ca:	1a5b      	subs	r3, r3, r1
 80059cc:	42ab      	cmp	r3, r5
 80059ce:	dcf2      	bgt.n	80059b6 <_printf_i+0x212>
 80059d0:	e7eb      	b.n	80059aa <_printf_i+0x206>
 80059d2:	2500      	movs	r5, #0
 80059d4:	f104 0619 	add.w	r6, r4, #25
 80059d8:	e7f5      	b.n	80059c6 <_printf_i+0x222>
 80059da:	bf00      	nop
 80059dc:	08005e02 	.word	0x08005e02
 80059e0:	08005e13 	.word	0x08005e13

080059e4 <__swbuf_r>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	460e      	mov	r6, r1
 80059e8:	4614      	mov	r4, r2
 80059ea:	4605      	mov	r5, r0
 80059ec:	b118      	cbz	r0, 80059f6 <__swbuf_r+0x12>
 80059ee:	6a03      	ldr	r3, [r0, #32]
 80059f0:	b90b      	cbnz	r3, 80059f6 <__swbuf_r+0x12>
 80059f2:	f7ff f9e3 	bl	8004dbc <__sinit>
 80059f6:	69a3      	ldr	r3, [r4, #24]
 80059f8:	60a3      	str	r3, [r4, #8]
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	071a      	lsls	r2, r3, #28
 80059fe:	d501      	bpl.n	8005a04 <__swbuf_r+0x20>
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	b943      	cbnz	r3, 8005a16 <__swbuf_r+0x32>
 8005a04:	4621      	mov	r1, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f82a 	bl	8005a60 <__swsetup_r>
 8005a0c:	b118      	cbz	r0, 8005a16 <__swbuf_r+0x32>
 8005a0e:	f04f 37ff 	mov.w	r7, #4294967295
 8005a12:	4638      	mov	r0, r7
 8005a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	1a98      	subs	r0, r3, r2
 8005a1c:	6963      	ldr	r3, [r4, #20]
 8005a1e:	b2f6      	uxtb	r6, r6
 8005a20:	4283      	cmp	r3, r0
 8005a22:	4637      	mov	r7, r6
 8005a24:	dc05      	bgt.n	8005a32 <__swbuf_r+0x4e>
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f7ff fcbb 	bl	80053a4 <_fflush_r>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d1ed      	bne.n	8005a0e <__swbuf_r+0x2a>
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	60a3      	str	r3, [r4, #8]
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	6022      	str	r2, [r4, #0]
 8005a3e:	701e      	strb	r6, [r3, #0]
 8005a40:	6962      	ldr	r2, [r4, #20]
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d004      	beq.n	8005a52 <__swbuf_r+0x6e>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	07db      	lsls	r3, r3, #31
 8005a4c:	d5e1      	bpl.n	8005a12 <__swbuf_r+0x2e>
 8005a4e:	2e0a      	cmp	r6, #10
 8005a50:	d1df      	bne.n	8005a12 <__swbuf_r+0x2e>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff fca5 	bl	80053a4 <_fflush_r>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d0d9      	beq.n	8005a12 <__swbuf_r+0x2e>
 8005a5e:	e7d6      	b.n	8005a0e <__swbuf_r+0x2a>

08005a60 <__swsetup_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4b29      	ldr	r3, [pc, #164]	@ (8005b08 <__swsetup_r+0xa8>)
 8005a64:	4605      	mov	r5, r0
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	460c      	mov	r4, r1
 8005a6a:	b118      	cbz	r0, 8005a74 <__swsetup_r+0x14>
 8005a6c:	6a03      	ldr	r3, [r0, #32]
 8005a6e:	b90b      	cbnz	r3, 8005a74 <__swsetup_r+0x14>
 8005a70:	f7ff f9a4 	bl	8004dbc <__sinit>
 8005a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a78:	0719      	lsls	r1, r3, #28
 8005a7a:	d422      	bmi.n	8005ac2 <__swsetup_r+0x62>
 8005a7c:	06da      	lsls	r2, r3, #27
 8005a7e:	d407      	bmi.n	8005a90 <__swsetup_r+0x30>
 8005a80:	2209      	movs	r2, #9
 8005a82:	602a      	str	r2, [r5, #0]
 8005a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	e033      	b.n	8005af8 <__swsetup_r+0x98>
 8005a90:	0758      	lsls	r0, r3, #29
 8005a92:	d512      	bpl.n	8005aba <__swsetup_r+0x5a>
 8005a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a96:	b141      	cbz	r1, 8005aaa <__swsetup_r+0x4a>
 8005a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a9c:	4299      	cmp	r1, r3
 8005a9e:	d002      	beq.n	8005aa6 <__swsetup_r+0x46>
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f7ff fafb 	bl	800509c <_free_r>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	f043 0308 	orr.w	r3, r3, #8
 8005ac0:	81a3      	strh	r3, [r4, #12]
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	b94b      	cbnz	r3, 8005ada <__swsetup_r+0x7a>
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad0:	d003      	beq.n	8005ada <__swsetup_r+0x7a>
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 f883 	bl	8005be0 <__smakebuf_r>
 8005ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ade:	f013 0201 	ands.w	r2, r3, #1
 8005ae2:	d00a      	beq.n	8005afa <__swsetup_r+0x9a>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	60a2      	str	r2, [r4, #8]
 8005ae8:	6962      	ldr	r2, [r4, #20]
 8005aea:	4252      	negs	r2, r2
 8005aec:	61a2      	str	r2, [r4, #24]
 8005aee:	6922      	ldr	r2, [r4, #16]
 8005af0:	b942      	cbnz	r2, 8005b04 <__swsetup_r+0xa4>
 8005af2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005af6:	d1c5      	bne.n	8005a84 <__swsetup_r+0x24>
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	0799      	lsls	r1, r3, #30
 8005afc:	bf58      	it	pl
 8005afe:	6962      	ldrpl	r2, [r4, #20]
 8005b00:	60a2      	str	r2, [r4, #8]
 8005b02:	e7f4      	b.n	8005aee <__swsetup_r+0x8e>
 8005b04:	2000      	movs	r0, #0
 8005b06:	e7f7      	b.n	8005af8 <__swsetup_r+0x98>
 8005b08:	20000018 	.word	0x20000018

08005b0c <_raise_r>:
 8005b0c:	291f      	cmp	r1, #31
 8005b0e:	b538      	push	{r3, r4, r5, lr}
 8005b10:	4605      	mov	r5, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	d904      	bls.n	8005b20 <_raise_r+0x14>
 8005b16:	2316      	movs	r3, #22
 8005b18:	6003      	str	r3, [r0, #0]
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005b22:	b112      	cbz	r2, 8005b2a <_raise_r+0x1e>
 8005b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b28:	b94b      	cbnz	r3, 8005b3e <_raise_r+0x32>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f000 f830 	bl	8005b90 <_getpid_r>
 8005b30:	4622      	mov	r2, r4
 8005b32:	4601      	mov	r1, r0
 8005b34:	4628      	mov	r0, r5
 8005b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b3a:	f000 b817 	b.w	8005b6c <_kill_r>
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d00a      	beq.n	8005b58 <_raise_r+0x4c>
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	d103      	bne.n	8005b4e <_raise_r+0x42>
 8005b46:	2316      	movs	r3, #22
 8005b48:	6003      	str	r3, [r0, #0]
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	e7e7      	b.n	8005b1e <_raise_r+0x12>
 8005b4e:	2100      	movs	r1, #0
 8005b50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005b54:	4620      	mov	r0, r4
 8005b56:	4798      	blx	r3
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e7e0      	b.n	8005b1e <_raise_r+0x12>

08005b5c <raise>:
 8005b5c:	4b02      	ldr	r3, [pc, #8]	@ (8005b68 <raise+0xc>)
 8005b5e:	4601      	mov	r1, r0
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f7ff bfd3 	b.w	8005b0c <_raise_r>
 8005b66:	bf00      	nop
 8005b68:	20000018 	.word	0x20000018

08005b6c <_kill_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d07      	ldr	r5, [pc, #28]	@ (8005b8c <_kill_r+0x20>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	f7fa ffa1 	bl	8000ac0 <_kill>
 8005b7e:	1c43      	adds	r3, r0, #1
 8005b80:	d102      	bne.n	8005b88 <_kill_r+0x1c>
 8005b82:	682b      	ldr	r3, [r5, #0]
 8005b84:	b103      	cbz	r3, 8005b88 <_kill_r+0x1c>
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200002a4 	.word	0x200002a4

08005b90 <_getpid_r>:
 8005b90:	f7fa bf8e 	b.w	8000ab0 <_getpid>

08005b94 <__swhatbuf_r>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	b096      	sub	sp, #88	@ 0x58
 8005ba0:	4615      	mov	r5, r2
 8005ba2:	461e      	mov	r6, r3
 8005ba4:	da0d      	bge.n	8005bc2 <__swhatbuf_r+0x2e>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	bf14      	ite	ne
 8005bb2:	2340      	movne	r3, #64	@ 0x40
 8005bb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bb8:	2000      	movs	r0, #0
 8005bba:	6031      	str	r1, [r6, #0]
 8005bbc:	602b      	str	r3, [r5, #0]
 8005bbe:	b016      	add	sp, #88	@ 0x58
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
 8005bc2:	466a      	mov	r2, sp
 8005bc4:	f000 f848 	bl	8005c58 <_fstat_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	dbec      	blt.n	8005ba6 <__swhatbuf_r+0x12>
 8005bcc:	9901      	ldr	r1, [sp, #4]
 8005bce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005bd6:	4259      	negs	r1, r3
 8005bd8:	4159      	adcs	r1, r3
 8005bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bde:	e7eb      	b.n	8005bb8 <__swhatbuf_r+0x24>

08005be0 <__smakebuf_r>:
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be4:	079d      	lsls	r5, r3, #30
 8005be6:	4606      	mov	r6, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	d507      	bpl.n	8005bfc <__smakebuf_r+0x1c>
 8005bec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	6163      	str	r3, [r4, #20]
 8005bf8:	b003      	add	sp, #12
 8005bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfc:	ab01      	add	r3, sp, #4
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f7ff ffc8 	bl	8005b94 <__swhatbuf_r>
 8005c04:	9f00      	ldr	r7, [sp, #0]
 8005c06:	4605      	mov	r5, r0
 8005c08:	4639      	mov	r1, r7
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7ff faba 	bl	8005184 <_malloc_r>
 8005c10:	b948      	cbnz	r0, 8005c26 <__smakebuf_r+0x46>
 8005c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c16:	059a      	lsls	r2, r3, #22
 8005c18:	d4ee      	bmi.n	8005bf8 <__smakebuf_r+0x18>
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	81a3      	strh	r3, [r4, #12]
 8005c24:	e7e2      	b.n	8005bec <__smakebuf_r+0xc>
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	6020      	str	r0, [r4, #0]
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c36:	b15b      	cbz	r3, 8005c50 <__smakebuf_r+0x70>
 8005c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f81d 	bl	8005c7c <_isatty_r>
 8005c42:	b128      	cbz	r0, 8005c50 <__smakebuf_r+0x70>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	431d      	orrs	r5, r3
 8005c54:	81a5      	strh	r5, [r4, #12]
 8005c56:	e7cf      	b.n	8005bf8 <__smakebuf_r+0x18>

08005c58 <_fstat_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	@ (8005c78 <_fstat_r+0x20>)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	f7fa ff8b 	bl	8000b80 <_fstat>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d102      	bne.n	8005c74 <_fstat_r+0x1c>
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	b103      	cbz	r3, 8005c74 <_fstat_r+0x1c>
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	bd38      	pop	{r3, r4, r5, pc}
 8005c76:	bf00      	nop
 8005c78:	200002a4 	.word	0x200002a4

08005c7c <_isatty_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d06      	ldr	r5, [pc, #24]	@ (8005c98 <_isatty_r+0x1c>)
 8005c80:	2300      	movs	r3, #0
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	f7fa ff8a 	bl	8000ba0 <_isatty>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_isatty_r+0x1a>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_isatty_r+0x1a>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	200002a4 	.word	0x200002a4

08005c9c <_init>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr

08005ca8 <_fini>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr
